---
title: "04_analysis"
author: "tonya"
format: html
editor: visual
---

## Chapter 1.4

Analysis of poetry collections metadata (1835-1840)

```{r}
library(tidyverse)

library(patchwork)
library(wesanderson)
library(MetBrewer)
library(gghighlight)
theme_set(theme_minimal())

pal <- c(wes_palette("Chevalier1")[4], # sand
         wes_palette("Royal1")[1], # grey
         wes_palette("Zissou1")[4], # yellow
         wes_palette("Royal1")[2] # red
        ) 
```

```{r}
# do not run
# how`data/01_4 fil` was made
#`meta/collections_meta.cs` is derived from `numbers_meta/biblio_poetry_1830_1850_short.numbers`
# 
# pb <- read.csv("../../meta/collections_meta.csv", sep = ";") %>%
#     # add older ids where available
#     mutate(COL_ID = ifelse(!is.na(COL_ID), paste0("COL_", COL_ID), COL_ID)) %>% 
#     select(id, COL_ID,
#           poetry_prose, book_type, genre, special_tag,
#           author_sign, author, author_full_name,
#           title,
#           city, publisher, year,
#           pages, size_fold, size_cm, 
#           digital_copy, digital_copy_URL)
# 
# glimpse(pb)
# 
# #write.csv(pb, file = "../../data/01_4_poetry_books_1835_1840.csv")
# rm(pb)

```

Load dataset:

```{r}
pb_full <- read.csv("../../data/01_4_poetry_books_1835_1840.csv") %>% 
    select(-X) %>%
    mutate(year = as.numeric(year),
          group = paste0(book_type, "_", genre),
          # cleaning of tagging artefacts
          group = str_replace_all(group, "(alm).*", "\\1"),
          group = str_remove_all(group, "; nar")) 

glimpse(pb_full)
```

#### Plot 1.4.0 - Digitisation

```{r}
n_digit <- pb_full %>% 
    filter(group != "col_nar") %>% 
    mutate(group = recode(group,
                            alm = "Альманахи",
                            col_lyr = "Сборники стихотворений",
                         col_nar = "Сборники поэм",
                         sep_nar = "Отд. поэмы",
                         sep_lyr = "Отд. стихотворения")) %>%
    mutate(dig = ifelse(digital_copy == "" | str_detect(digital_copy, "drive"), 
                        FALSE, 
                        TRUE)
           ) %>%
    group_by(year, group, dig) %>% 
    count() %>%
    ggplot(aes(x = year, y = n, fill = as.factor(dig))) + 
        geom_col() + 
        facet_wrap(~group, 
                   scales = "free_x",
                   ncol = 4) + 
        scale_fill_manual(values = c(wes_palette("Chevalier1")[3],
                             wes_palette("Chevalier1")[1])) + 
        scale_x_continuous(breaks = seq(1830, 1850, 5)) +
        labs(x = "",
             y = "Количество книг",
             fill = "") + 
        theme(axis.text = element_text(size = 12),
              axis.title = element_text(size = 14),
             strip.text = element_text(size = 14),
             legend.position = "None") + 
        annotate("rect", 
                 xmin = 1834.5, xmax =1840.5, 
                 ymin = 0, ymax = Inf, 
                 alpha = 0.1)

n_digit
```

```{r}
perc_digit <- pb_full %>% 
    filter(group != "col_nar") %>% 
    mutate(group = recode(group,
                            alm = "Альманахи",
                            col_lyr = "Сборники стихотворений",
                         col_nar = "Сборники поэм",
                         sep_nar = "Отд. поэмы",
                         sep_lyr = "Отд. стихотворения")) %>%
    mutate(dig = ifelse(digital_copy == "" | str_detect(digital_copy, "drive"), 
                        FALSE, 
                        TRUE)
           ) %>%
    group_by(year, group, dig) %>% 
    count() %>%
    ggplot(aes(x = year, y = n, fill = as.factor(dig))) + 
        geom_col(position = "fill") + 
        facet_wrap(~group, 
                   scales = "free_x",
                   ncol = 4) + 
        scale_fill_manual(values = c(wes_palette("Chevalier1")[3],
                             wes_palette("Chevalier1")[1])) + 
        scale_x_continuous(breaks = seq(1830, 1850, 5)) +
        labs(x = "Год",
             y = "Процент книг",
             fill = "Оцифровано") + 
        theme(axis.text = element_text(size = 12),
              axis.title = element_text(size = 14),
             strip.text = element_text(size = 14),
             legend.position = "bottom") + 
        annotate("rect", 
                 xmin = 1834.5, xmax =1840.5, 
                 ymin = 0, ymax = Inf, 
                 alpha = 0.2)

perc_digit
```

Combine two plots:

```{r}
digit <- n_digit / perc_digit

digit

# ggsave("plots/Fig_1-4-0.png", plot = digit, dpi = 300,
#        width = 11, height = 7,
#        bg = "white")

rm(digit, n_digit, perc_digit)
```

### **Clean metadata with only lyric poetry between 1835 and 1840**

```{r}
pb <- pb_full %>% 
    filter(year > 1834 & year < 1841) %>% 

    # remove completely unknown books (not found either in 19-c. catalogues nor in modern ones)
    filter(special_tag != "unknown") %>%
    
    # for now I also filter out all narrative poems!
    filter(!str_detect(group, "nar")) %>%
    
    # recode group names
    mutate(group_abbr = group,
          group_eng = recode(group,
                         alm = "Almanacks",
                         col_lyr = "Lyric collections",
                         col_nar = "Narrative collections",
                         sep_nar = "Narrative booklets",
                         sep_lyr = "Lyric booklets"),
          group = recode(group_abbr,
                            alm = "Альманахи",
                            col_lyr = "Сборники стихотворений",
                         col_nar = "Сборники поэм",
                         sep_nar = "Отд. поэмы",
                         sep_lyr = "Отд. стихотворения")) %>% 
    
    # fill author's names if unavailable
    mutate(author = ifelse(author == "" & author_sign != "", author_sign, author))

pb %>% 
    count(group)
```

```{r}
# test how many books are containing prose (except for almanacks)
pb %>%
    filter(poetry_prose == "pr" & book_type != "alm")
```

#### Plot 1.4.1. Number of books by category

```{r}
pb %>% 
    group_by(group, year) %>% 
    count() %>%
    ggplot(aes(x = year, y = n,# color = group, 
               fill = group)) + 
        # geom_line() + geom_point() +
        #facet_wrap(~group_rus, scales = "free_x") +
        geom_col(position = "dodge") + 
        scale_fill_manual(values = pal) + 
        scale_x_continuous(breaks = seq(1835,1840,1)) +
        theme(
            legend.position = "bottom",
            axis.title = element_text(size = 14),
            axis.text = element_text(size = 12),
            legend.text = element_text(size = 14)
        ) + 
        labs(x = "Год", y = "Количество книг", fill = "")

# ggsave(file = "plots/Fig_1-4-1.png", plot = last_plot(), dpi = 300,
#     width = 10, height = 8, bg = "white")
```

#### Plot 1.4.2. Boxplots w/ n of pages and size in cm

```{r}
p1 <- pb %>% 
    filter(!is.na(pages)) %>%
    ggplot(aes(x = year, y = pages, group = year, 
               #color = group, 
               fill = group)) + 
        geom_boxplot() + 
        facet_wrap(~group) + 
        
        scale_x_continuous(breaks = seq(1835, 1840, 1)) +
        scale_fill_manual(values = pal) + 
        theme(
            legend.position = "None",
            axis.text = element_text(size = 12),
            axis.text.x = element_blank(), # removed years from x axis for the upper plot
            strip.text = element_text(size = 14)
        ) + 
        labs(x = "", y = "Количество страниц") 

p2 <- pb %>% 
    filter(!is.na(size_cm)) %>% 
    ggplot(aes(x = year, y = size_cm, group = year, fill = group)) + 
        geom_boxplot() + 
        facet_wrap(~group) + 
        scale_x_continuous(breaks = seq(1835, 1840, 1)) +
        scale_fill_manual(values = pal) + 
        theme(
            legend.position = "None",
            axis.text = element_text(size = 12),
            strip.text = element_blank() # remove facet labels for lower plot
        ) + 
        labs(x = "Год", y = "Размер в сантиметрах")

p3 <- p1 / p2

p3

# ggsave("plots/Fig_1-4-2.png", plot = p3, dpi = 300, bg = "white",
#       width = 12, height = 8)
```

Full version of the plot

```{r}
p1 <- pb_full %>% 
    filter(!str_detect(group, "nar")) %>%
    filter(!is.na(pages)) %>% 
    mutate(group = recode(group,
                            alm = "Альманахи",
                            col_lyr = "Сборники стихотворений",
                         col_nar = "Сборники поэм",
                         sep_nar = "Отд. поэмы",
                         sep_lyr = "Отд. стихотворения")) %>%
    ggplot(aes(x = year, y = pages, group = year, 
               #color = group, 
               fill = group)) + 
        geom_boxplot() + 
        facet_wrap(~group) + 
        
        scale_x_continuous(breaks = seq(1830, 1850, 5)) +
        scale_fill_manual(values = pal) + 
        theme(
            legend.position = "None",
            axis.text = element_text(size = 12),
            axis.text.x = element_blank(), # removed years from x axis for the upper plot
            strip.text = element_text(size = 14)
        ) + 
        labs(x = "", y = "Количество страниц") + 
      annotate("rect", 
                 xmin = 1834.5, xmax =1840.5, 
                 ymin = 0, ymax = Inf, 
                 alpha = 0.2)
        

p2 <- pb_full %>% 
    filter(!str_detect(group, "nar")) %>%
    filter(!is.na(size_cm)) %>% 
    mutate(group = recode(group,
                            alm = "Альманахи",
                            col_lyr = "Сборники стихотворений",
                         col_nar = "Сборники поэм",
                         sep_nar = "Отд. поэмы",
                         sep_lyr = "Отд. стихотворения")) %>%
    ggplot(aes(x = year, y = size_cm, group = year, fill = group)) + 
        geom_boxplot() + 
        facet_wrap(~group) + 
        scale_x_continuous(breaks = seq(1830, 1850, 5)) +
        scale_fill_manual(values = pal) + 
        theme(
            legend.position = "None",
            axis.text = element_text(size = 12),
            strip.text = element_blank() # remove facet labels for lower plot
        ) + 
        labs(x = "Год", y = "Размер в сантиметрах") + 
        annotate("rect", 
                 xmin = 1834.5, xmax =1840.5, 
                 ymin = 0, ymax = Inf, 
                 alpha = 0.2)


p3 <- p1 / p2

p3

ggsave("plots/Fig_1-4-2_full.png", plot = p3, dpi = 300, bg = "white",
      width = 11, height = 8)
```

```{r}
rm(p1,p2,p3)
```

### Lyric collections

```{r}
lyr <- pb %>% 
  filter(group_abbr == "col_lyr" & special_tag != "unknown")

glimpse(lyr)
```

```{r}
lyr %>% 
  filter(!is.na(pages) & !is.na(size_cm)) %>% 
  summarise(mean_p = mean(pages),
            med_p = median(pages),
            mean_s = mean(size_cm),
            med_s = median(size_cm))
```

Top authors

```{r}
lyr_authors <- lyr %>% 
    filter(author != "") %>% 
    count(author, sort = T) %>% head(15)

lyr_authors

lyr %>% 
  filter(author %in% lyr_authors$author) %>% 
  select(author, title, year) %>% 
  arrange(-desc(author))
```

Smallest & biggest lyric collections (in size, cm)

```{r}
lyr %>% 
    select(author, title, publisher, year, pages, size_fold, size_cm) %>%
    arrange(-desc(size_cm)) %>% head(10)

lyr %>% 
    select(author, title, publisher, year, pages, size_fold, size_cm) %>%
    arrange(desc(size_cm)) %>% head(10)
```

Smallest lyric collections in the number of pages & the thickiest

```{r}
lyr %>% 
    select(author, title, publisher, year, pages, size_fold, size_cm) %>%
    arrange(-desc(pages)) %>% head(10)

lyr %>% 
    select(author, title, publisher, year, pages, size_fold, size_cm) %>%
    arrange(desc(pages)) %>% head(10)
```

### Separate editions

```{r}
sep_authors <- pb %>% 
  filter(group_abbr == "sep_lyr" & author != "") %>% 
  group_by(author) %>% 
  count(sort = T) %>% 
  head(10)

sep_authors

pb %>% 
  filter(group_abbr == "sep_lyr" & author %in% sep_authors$author) %>% 
  select(author, title, year) %>% 
  arrange(-desc(author))
```

Some random examples of separate editions:

```{r}
pb %>% 
  filter(group_abbr == "sep_lyr" & author != "") %>% 
  sample_n(size = 10) %>% 
  select(author, title, city, year)

pb %>% 
  filter(group_abbr == "sep_lyr" #& str_detect(author, "Барановский")
         ) %>% 
  sample_n(size = 10) %>% 
  select(author, title, city, year)
```

### City of publishing

```{r}
pb %>% 
  count(city, sort = T)
```

```{r}
pb %>% 
  mutate(typo = paste0(city, ": ", publisher)) %>% 
  filter(!city %in% c("", "М.", "СПб.")) %>% 
  count(typo, sort = T)
```

```{r}
pb %>% 
  filter(city != "") %>% 
  group_by(year, city) %>% 
  count(sort = F) %>% 
  pivot_wider(names_from = year, values_from = n)
```

#### Plot 1.4.3

```{r}
pb %>% 
  #filter(group_abbr == "col_lyr") %>% 
  filter(city %in% c("СПб.", "М.")) %>% 
  count(city, year) %>% 
  mutate(city = ifelse(city == "М.", "Москва", "Санкт-Петербург")) %>% 
  ggplot(aes(x = year, y = n, fill = city)) + 
  geom_col(position = "dodge", width = 0.8) + 
  #geom_smooth(aes(color = city)) + 
  facet_wrap(~city, ncol = 1) + 
  scale_x_continuous(breaks = seq(1835, 1840, 1)) + 
  scale_fill_manual(values = pal) + 
  scale_color_manual(values = pal) + 
  labs(x = "Год", y = "Количество книг", fill = "") + 
  theme(strip.text = element_text(size = 14),
        legend.text = element_text(size = 14),
        axis.text = element_text(size = 14),
        axis.title = element_text(size = 12),
        legend.position = "bottom")

# ggsave(file = "plots/Fig_1-4-3.png", plot = last_plot(), dpi = 300,
#        width = 8, height = 8,
#        bg = "white")
```

### Publishers

Number of Moscow & Petersburg publishers

```{r}
pb %>% 
  filter(city %in% c("М.", "СПб.")) %>% 
  filter(publisher != "") %>% 
  group_by(city, publisher) %>% 
  count() %>% 
  ungroup() %>% 
  group_by(city) %>% 
  summarise(n_typo = n(),
            mean_n = mean(n),
            median_n = median(n))
```

Barplot with only 1835-1840 publishing houses:

```{r}

publ_totals <- pb %>% 
  mutate(publisher = paste0(city, ": ", publisher)) %>% 
  filter(publisher != ": ") %>%
  count(publisher, sort = T) %>% 
  rename(total = n)

pb %>% 
  mutate(publisher = paste0(city, ": ", publisher)) %>% 
  filter(publisher != ": ") %>% 
  left_join(publ_totals, by = "publisher") %>% 
  
  # variant 1: select publishers by total n of books
  filter(publisher %in% publ_totals$publisher[1:12]) %>% 
  mutate(publisher = paste0(publisher, " (", total, ")")) %>% 
  count(year, publisher) %>% 
  
    
  # variant 2: select by number of non-NA in each year  
  # count number of missing values
  
  #pivot_wider(names_from = year, values_from = n) %>% 
  # mutate(x = rowSums(is.na(.))) %>% 
  # # drop rows with more than 2 years missing
  # filter(x < 4) %>% 
  # select(-x) %>% 
  # pivot_longer(!publisher, names_to = "year", values_to = "n") %>% 
    
  # plot  
  ggplot(aes(x = year, y = n, fill = publisher)) +
  geom_col(width = 0.95) + 
  facet_wrap(~publisher, 
             strip.position = "left",
             ncol = 1) + 
  scale_x_continuous(breaks = seq(1835, 1840, 1)) + 
  scale_fill_met_d(name = "Redon") + 
  labs(x = "Год", 
       y = "") + 
  theme(legend.position = "None",
        strip.text.y.left = element_text(angle = 0),
        strip.placement = "outside",
        strip.text = element_text(size = 12),
        axis.text.y.left = element_blank(),
        axis.text.x = element_text(size = 12),
        axis.title = element_text(size = 14))

# ggsave(file = "plots/Fig_1-4-4.png", plot = last_plot(), dpi = 300,
#        width = 8, height = 10,
#        bg = "white")
```

```{r}
publ_totals[1:12,]
```

#### Plot 1.4.4

Full publishers' data

```{r}
# filter typographies with more than 15 poetry books issued
top_typos_35 <- sort(publ_totals$publisher[1:12])

publ_totals <- pb %>% 
  mutate(publisher = paste0(city, ": ", publisher)) %>% 
  filter(publisher != ": ") %>%
  count(publisher, sort = T) %>% 
  rename(total = n)

publ_plot_data <- pb_full %>% 
    mutate(typo = paste0(city, ": ", publisher)) %>% 
    filter(!is.na(year)) %>% 
    #filter(typo %in% top_typos) %>%
    count(typo, year, sort = T) %>% 
    ungroup() %>% 
    pivot_wider(names_from = year, values_from = n) %>%
    mutate_if(is.numeric, ~replace_na(., 0)) %>%
    pivot_longer(!typo, names_to = "year", values_to = "n") %>% 
    arrange(-desc(year)) %>%
    group_by(typo) %>% 
    mutate(cum_sum = cumsum(n),
          typo_group = ifelse(typo %in% top_typos_35, typo, "others")) %>% 
    filter(typo_group != "others")

# glimpse(publ_plot_data)

publ_plot_data %>% 
    ggplot(aes(x = as.factor(year), y = cum_sum, color = typo_group, 
               group = typo)) + 
        geom_line(alpha = 0.6, linewidth = 1) + 
        gghighlight(use_direct_label = FALSE,
              unhighlighted_params = list(colour = alpha("grey85", 1))) + 
        scale_color_met_d(name = "Redon") + 
        
  
        geom_point(data = publ_plot_data %>% 
                     filter(year == 1835) %>% 
                     group_by(typo) %>% 
                     slice_max(cum_sum)
                     ) + 
        geom_text(data = publ_plot_data %>% 
                     filter(year == 1835) %>% 
                     group_by(typo) %>% 
                     slice_max(cum_sum),
                  aes(label = cum_sum),
                  vjust = -1) + 
  
        geom_point(data = publ_plot_data %>% 
                     filter(year == 1840) %>% 
                     group_by(typo) %>% 
                     slice_max(cum_sum)
                     ) + 
        geom_text(data = publ_plot_data %>% 
                     filter(year == 1840) %>% 
                     group_by(typo) %>% 
                     slice_max(cum_sum),
                  aes(label = cum_sum),
                  vjust = -1) +
        
        facet_wrap(~factor(typo_group,
                          levels = top_typos_35),
                   ncol = 3) +
        scale_x_discrete(breaks = seq(1830, 1850, 5)) +
        labs(x = "",
             y = "",
             color = "") + 
        theme(axis.text = element_text(size = 12),
              #legend.text = element_text(size = 14),
              strip.text = element_text(size = 14),
              panel.spacing = unit(1.5, "lines"),
              legend.position = "None") + 
  
        annotate("rect", 
                 xmin = 6, xmax = 11, 
                 ymin = 0, ymax = Inf, 
                 alpha = 0.1)
  
# ggsave("plots/Fig_1-4-5.png", plot = last_plot(), dpi = 300,
#        height = 10, width = 8,
#        bg = "white")
```

```{r}
pb %>% 
  filter(str_detect(publisher, "Смирдин.*")) %>% 
  select(author, title, city, publisher, year)
```

### Authors

#### Load data

Load authors connector table and authors metadata

```{r}
# load table with author from pb and author ids
authors_c <- read.csv("../../meta/authors_cols.csv", sep = ";") %>% 
  select(-X) %>% 
  mutate(A_ID = paste0("A_", A_ID))
head(authors_c)

length(unique(pb$author))

pb_authors <- pb %>% 
  left_join(authors_c, by = "author") 
```

Load authors metadata

```{r}
authors_meta <- read.delim("../../meta/authors.tsv", sep = "\t") %>% 
  mutate(A_ID = str_replace_all(A_ID, "-", "_"))
head(authors_meta)
```

Join authors meta with pb

```{r}
pb_authors <- pb_authors %>% 
  left_join(authors_meta, by = "A_ID")

head(pb_authors)

# cases when author from cols meta is not equal to the author from authors meta:
pb_authors %>% 
  filter(author.x != author.y) %>% 
  select(author.x, author.y)
```

```{r}
pb_authors %>% 
  filter(is.na(A_ID)) %>% 
  select(id, COL_ID, A_ID, author_sign, title, year)

# 36 NA-s! meaning no known author, not in the authors metadata
```

```{r}
# glimpse(pb_authors)
# 
# pb_save <- pb_authors %>% 
#   rename(author = author.x,
#          author_full_name = author_full_name.x)
# 
# glimpse(pb_save[, 1:22])
# 
# write.csv(pb_save[,1:22], file = "../../meta/collections_meta.csv")
```

#### RP authors vs NA

```{r}
print("Number of known unique authors (-NA, - '')")
length(unique(pb_authors$author.x)) # 137 unique authors (- NA, - "")


total_known <- 55+82
print(c("Percent of unknown authors" , 
        55/total_known*100 ))  # 40% of authors IN THE META are unknown

print(c("Percent of known (by RP) authors" , 
        82/total_known*100 )) # 59.85 known by RP

total_n_groups <- pb_authors %>% 
  count(group_abbr)

# total: summarise NA and non-RP
pb_authors %>% 
  filter(!str_detect(RP, "\\d")) %>%  # 62
  count(group_abbr) %>% 
  rename(unknown_authors = n) %>% 
  left_join(total_n_groups, by = "group_abbr") %>% 
  mutate(perc_unknown  = round((unknown_authors/n) * 100, 2) )
```

Authors without RP article:

```{r}
pb_authors %>% 
  filter(!is.na(A_ID)) %>% 
  select(A_ID, author.y, RP) %>% 
  distinct() %>% 
  filter(RP == "") # 55 authors without RP articles
```

Authors with RP articles:

```{r}
pb_authors %>% 
  filter(!is.na(A_ID)) %>% 
  select(A_ID, author.y, RP) %>% 
  distinct() %>% 
  filter(str_detect(RP, "\\d")) # 82 authors with RP articles
```

#### Authors feats

```{r}
# Aristocracy
pb_authors %>% 
  select(author.y, aristocracy) %>% 
  distinct() %>% 
  mutate(aristocracy = ifelse(is.na(aristocracy), "not_available", aristocracy)) %>% 
  count(aristocracy) %>% 
  mutate(perc = round((n/138)*100, 2))

# total n for col_lyr (unique authors)
31+61+46

pb_authors %>% 
  select(author.y, gender) %>% 
  distinct() %>% 
  mutate(gender = ifelse(is.na(gender), "not_available", gender)) %>% 
  count(gender) %>% 
  mutate(perc = round((n/138)*100, 2))

1+7+129+1
```

Same but only for poetry collections:

```{r}
# Aristocracy
pb_authors %>% 
  filter(group_abbr == "col_lyr") %>% 
  select(author.y, aristocracy) %>% 
  distinct() %>% 
  mutate(aristocracy = ifelse(is.na(aristocracy), "not_available", aristocracy)) %>% 
  count(aristocracy) %>% 
  mutate(perc = round((n/101)*100, 2))

# total n for col_lyr (unique authors)
22+45+34

pb_authors %>% 
  filter(group_abbr == "col_lyr") %>% 
  select(author.y, gender) %>% 
  distinct() %>% 
  mutate(gender = ifelse(is.na(gender), "not_available", gender)) %>% 
  count(gender) %>% 
  mutate(perc = round((n/101)*100, 2))

1+7+92+1
```

##### age

```{r}
library(tidytext)

pb_authors %>% 
  filter(str_detect(birth, "\\d") & str_detect(death, "\\d")) %>% 
  mutate(birth = as.numeric(str_extract(birth, "\\d{4}")),
         death = as.numeric(str_extract(death, "\\d{4}")),
         RP = ifelse(str_detect(RP, "\\d+"), TRUE, FALSE)) %>% 
  select(A_ID, group_abbr, RP, birth, death) %>% 
  pivot_longer(!c(A_ID, group_abbr, RP), names_to = "event", values_to = "year") %>% 
  ggplot(aes(x = year,
    y = reorder_within(A_ID, -year, A_ID),
    color = group_abbr)) + 
  geom_line() + 
  scale_y_reordered() +
  #theme(legend.position = "None") + 
    annotate("rect", xmin = 1835, xmax = 1840,
             ymin = -Inf, ymax = Inf, 
             alpha = 0.1)
```

```{r}
pb_authors %>% 
  filter(str_detect(birth, "\\d") & str_detect(death, "\\d")) %>% 
  mutate(birth = as.numeric(str_extract(birth, "\\d{4}")),
         death = as.numeric(str_extract(death, "\\d{4}")),
         RP = ifelse(str_detect(RP, "\\d+"), TRUE, FALSE)) %>% 
  select(A_ID, group_abbr, aristocracy, birth, death, year) %>% 
  mutate(age_col = year - birth) %>% 
  rename(year_col = year) %>% 
  pivot_longer(!c(A_ID, group_abbr, aristocracy, age_col, year_col), 
               names_to = "event", values_to = "year") %>% 
  filter(!is.na(aristocracy)) %>% 
  mutate(young = ifelse(age_col < 35, TRUE, FALSE)) %>% 
  ggplot(aes(x = year,
    y = reorder_within(A_ID, -year, age_col),
    color = young)) +
  geom_line() + 
  geom_point(aes(x = year_col)) + 
  scale_y_reordered() +
  facet_wrap(~aristocracy, scales = "free") +
  #theme(legend.position = "None") +
    annotate("rect", xmin = 1835, xmax = 1840,
             ymin = -Inf, ymax = Inf,
             alpha = 0.1)
```

```{r}
rm(authors_c, authors_meta, total_n_groups, total_known)
```

#### Authors from RNC / Periodicals

##### RNC

```{r}
load("../../data/nkrja_19th_lem.Rda")

head(unique(c19$author))
```

Cleaning RNC authors to match with `pb_authors` data

```{r}

# all RNC

rnc_authors <- c19 %>% 
  select(author) %>% 
  mutate(author_rnc = str_replace_all(author, "(\\w\\.\\s\\w\\.)\\s(\\w+)$",
                                       "\\2 \\1"),
         author_rnc = str_remove_all(author_rnc, "[[:punct:]]|[[:space:]]")) %>% 
  distinct() %>% 
  select(author_rnc)

rnc1830 <- c19 %>% 
  filter(year > 1829 & year < 1840) %>% 
  select(author) %>% 
  mutate(author_rnc = str_replace_all(author, "(\\w\\.\\s\\w\\.)\\s(\\w+)$",
                                       "\\2 \\1"),
         author_rnc = str_remove_all(author_rnc, "[[:punct:]]|[[:space:]]")) %>% 
  distinct() %>% 
  select(author_rnc)

```

Same string manipulations with pb data

```{r}
authors_comparison <- pb_authors %>% 
  select(author.y) %>% 
  mutate(author_rnc = str_remove_all(author.y, "[[:punct:]]|[[:space:]]")) %>% 
  distinct() %>% 
  select(author_rnc) 

authors_comparison %>% 
  inner_join(rnc_authors, by = "author_rnc") # 29 authors intersection PB & all RNC

authors_comparison %>% 
  inner_join(rnc1830, by = "author_rnc") # 27 authors intersection PB & RNC 1830s

print("Percent of intersected authors btw RNC & PB:")
(29/ (nrow(authors_comparison)-1) )*100

```

```{r}
rm(c19, authors_comparison, rnc_authors, rnc1830)
```

##### Periodicals

```{r}
per_meta <- read.delim("../../meta/database_poems_published_in_journals.tsv",
                       sep = "\t")

head(per_meta)

per_authors <- per_meta %>% 
  select(A_ID, Author_Initials) %>% 
  distinct() %>% 
  filter(!is.na(A_ID)) %>% 
  mutate(A_ID = str_replace_all(A_ID, "-", "_"))

rm(per_meta)
```

```{r}
per_authors 
```

```{r}
print(c("Number of authors in periodicals (by A_ID):", 
      length(unique(per_authors$A_ID))))

print(c("Number of authors in poetry books (by A_ID):", 
      length(unique(pb_authors$A_ID))))
```

```{r}
print("Intersection:")

per_pb_intersection <- pb_authors %>% 
  select(A_ID, author.y) %>% 
  inner_join(per_authors, by = "A_ID") 

nrow(per_pb_intersection)

print(c("Percent of all PB authors intersected with periodicals:",
        round(
          ( nrow(per_pb_intersection)/ (length(unique(pb_authors$A_ID)) - 1) )*100, 
          2)
        ))

per_pb_intersection

```

```{r}
rm(authors_c, authors_meta, per_authors, per_pb_intersection, 
   total_known, total_n_groups)
```

### Reviews

```{r}
reviews <- read.delim("../../meta/collections_reviews.tsv",
                      sep = "\t")

head(reviews)
```

Attach reviews to `pb`

```{r}
pb_reviews <- pb %>% 
  rename(new_id = id) %>% 
  left_join(reviews %>% 
              filter(!is.na(COL_ID)) %>% 
              select(-Author, -Title),
            by = "COL_ID") 

head(pb_reviews)
```

Number of reviewed books (in general and in groups)

```{r}
print("Total number of reviews:")

pb_reviews %>% 
  select(new_id, group_abbr, author, title, year,
         Sovr, OZ, CO, MN, Telescope, JMNP, Sev_pchela, BdCH) %>% 
  pivot_longer(!c(new_id, group_abbr, author, title, year),
              names_to = "reviewer",
              values_to = "score") %>% 
  filter(!is.na(score) & score != "") %>% 
  nrow()
```

Number of reviewed books (out of total 218)

```{r}
print("Total number of reviewed books:")
pb_reviews %>% 
  select(new_id, group_abbr, author, title, year,
         Sovr, OZ, CO, MN, Telescope, JMNP, Sev_pchela, BdCH) %>% 
  pivot_longer(!c(new_id, group_abbr, author, title, year),
              names_to = "reviewer",
              values_to = "score") %>% 
  filter(!is.na(score) & score != "") %>% 
  select(-reviewer, -score) %>% 
  distinct() %>% 
  nrow()

total_n_groups <- pb %>% 
  count(group_abbr) %>% 
  rename(total = n)

pb_reviews %>% 
  select(new_id, group_abbr, author, title, year,
         Sovr, OZ, CO, MN, Telescope, JMNP, Sev_pchela, BdCH) %>% 
  pivot_longer(!c(new_id, group_abbr, author, title, year),
              names_to = "reviewer",
              values_to = "score") %>% 
  filter(!is.na(score) & score != "") %>% 
  select(-reviewer, -score) %>% 
  distinct() %>% 
  count(group_abbr) %>% 
  left_join(total_n_groups, by = "group_abbr") %>% 
  mutate(perc_reviewed = round( (n/total)*100, 2 ))
```

Number of positive/negative reviews by source

```{r}
pb_reviews %>% 
  select(new_id, group_abbr, author, title, year,
         Sovr_score, OZ_score, CO_score, MN_score, Telescope_score, JMNP_score,
         Sev_pch_score, BdCH_score) %>% 
  pivot_longer(!c(new_id, group_abbr, author, title, year),
              names_to = "reviewer",
              values_to = "score") %>% 
  filter(!is.na(score) & score != "") %>% 
  mutate(score_cln = str_extract(score, "neg"),
         score_cln = ifelse(str_detect(score, "pos"), "pos", score_cln),
         score_cln = ifelse(is.na(score_cln), "neutr", score_cln)) %>% 
  group_by(reviewer) %>% 
  count(score_cln) %>% 
  ungroup() %>% 
  pivot_wider(names_from = score_cln, values_from = n) %>% 
  mutate(total_reviews = rowSums(.[2:4], na.rm = TRUE))
```

Number of reviews for each book

```{r}
n_reviews <- pb_reviews %>% 
  select(new_id, group_abbr, author, title, year, 
         Sovr, OZ, CO, MN, Telescope, JMNP, Sev_pchela, BdCH) %>% 
  pivot_longer(!c(new_id, group_abbr, author, title, year), 
               names_to = "reviewer",
               values_to = "is_reviewed") %>% 
  mutate(is_reviewed = ifelse(is.na(is_reviewed)| is_reviewed == "", 
                              0, 
                              1)) %>% 
  pivot_wider(names_from = reviewer, values_from = is_reviewed) %>% 
  mutate(n_reviews = rowSums(.[6:13])) %>% 
  arrange(desc(n_reviews))

head(n_reviews)
```

```{r}

```
