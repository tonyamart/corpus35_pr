---
title: 'Chapter 2.2. Poems in periodicals: statistics'
format: md
editor: visual
---

```{r, warning=FALSE}
library(tidyverse)

# library(treemap)
library(MetBrewer)
library(ggpattern)
theme_set(theme_minimal())
```

```{r, eval=FALSE}
MetBrewer::colorblind_palettes

met.brewer(MetBrewer::colorblind_palettes[24])
```

## Data compilation

Load full metadata

```{r}
# load periodicals data stored separately
per_t <- readRDS("../../data/corpus1835/corpus_1835.Rds")

# read texts
per_texts <- read.csv("../../data/corpus1835/sql_db/texts_metadata.csv") %>% 
  filter(str_detect(text_id, "^P_"))

# read sources metadata
per_sources <- read.csv("../../data/corpus1835/sql_db/sources.csv") %>% 
  filter(type == "periodicals") %>% 
  # remove unnecessary vars
  select(source_id, book_title, year)

# attach sources to texts
per_full <- per_texts %>% 
  left_join(per_sources, by = "source_id") %>% 
  left_join(per_t %>% select(text_id, text_lemm))

glimpse(per_full)
```

Attach authors data: check if all author's names are complete

```{r}

# attach RP and gender columns from authors-meta
# load authors-meta
authors_meta <- read.csv("../../data/corpus1835/sql_db/authors.csv")

# glimpse(authors_meta)

# attach only gender by A_ID
per <- per_full %>% 
  left_join(authors_meta %>% 
              select(A_ID, author_name, RP_loc, author_sex,
                     year_birth, year_death), 
            by = "A_ID") %>% 
  rename(author_text = author_name)

glimpse(per)

# fill NA as empty values
per[is.na(per)] <- ""

rm(per_full, per_t, per_sources, per_texts, authors_meta)
```

## RNC comparison

```{r}
# RNC data
load("../../data/nkrja_19th_lem.Rda")

rnc_authors <- c19 %>% 
    select(author) %>% 
    mutate(author = str_remove_all(author, "[[:space:]]|[[:punct:]]")) %>% 
    distinct() %>% 
    pull()

head(rnc_authors)

# rm(c19)
```

## 2.1. Periodicals vs RNC

Comparison on number of authors

```{r}
print("Total number of authors in periodicals:")
per %>% 
    filter(A_ID != "" & author_text != "") %>% # nrow() # 1464 poems are with known author
    select(author_text) %>% 
    count(author_text, sort = T) %>% nrow() 

print("Number of authors with biography in RP:")
per %>% 
    filter(RP_loc != "") %>% # nrow() # 1197 poems by authors known by RP
    select(RP_loc) %>% 
    count(RP_loc, sort = T) %>% nrow() 

print("Number of authors included in RNC")
per %>% 
    filter(author_text != "") %>% 
    select(author_text) %>% 
    mutate(author = str_replace_all(author_text, 
                                    "(.*?[[:space:]])(\\w\\.\\w.)", 
                                    "\\2\\1")) %>% 
    mutate(author = str_remove_all(author, "[[:space:]]|[[:punct:]]")) %>% 
    distinct() %>% 
    filter(author %in% rnc_authors) %>% 
    nrow() # 58 
```

### Textual intersections between RNC & periodicals

-   Create for each poem an id column containing two first lines
-   Mark the intersection with a special tag

```{r}
periodicals <- per %>% 
    mutate(doublesCheck = str_extract(text_lemm, "^.*?\n.*?\n.*?\n")) %>% 
    mutate(doublesCheck = str_remove_all(doublesCheck, "[[:punct:]]|[[:space:]]")) 

glimpse(periodicals)
```

```{r}
nkrja19 <- c19 %>% 
    rename(index = `Unnamed..0`,
          text_lemm = lemma) %>% 
    select(index, author, text_lemm) %>%
    mutate(doublesCheck = str_extract(text_lemm, "^.*?\n.*?\n.*?\n")) %>% 
    mutate(doublesCheck = str_remove_all(doublesCheck, "[[:punct:]]|[[:space:]]"))

glimpse(nkrja19)
```

```{r}
doubles_id <- periodicals %>% 
    rename(per_text_lemm = text_lemm) %>% 
    inner_join(nkrja19, by = "doublesCheck") %>% 
    select(index, text_id, year, A_ID, author_text, author, doublesCheck, per_text_lemm, text_lemm) %>% 
  filter(doublesCheck != "")

doubles_id %>% select(-text_lemm, -per_text_lemm) %>% head
```

```{r}
print("Total number of intersected texts:")
nrow(doubles_id)

print("Total number of texts in periodicals:")
nrow(periodicals)

print("Total % of intersected texts out for all periodicals texts:")
round( (nrow(doubles_id)/nrow(periodicals))*100 , 2) 
```

```{r}
# glimpse(doubles_id)

doubles_counts <- doubles_id %>% 
    count(year) %>% 
    mutate(group = "Периодика и НКРЯ")

doubles_counts %>% pivot_wider(names_from = year, values_from = n)
```

### Plot 2.2.1

```{r}
rnc_1835 <- c19 %>% 
    rename(index = `Unnamed..0`) %>% 
    # remove intersection
    #anti_join(doubles_id %>% select(index), by = "index") %>%

    # calculate number of unique poems
    filter(year > 1834 & year < 1841) %>% 
    count(year, sort = F) %>% 
    mutate(group = "НКРЯ")

rnc_1835 %>% pivot_wider(names_from = year, values_from = n)
```

```{r}
counter_1835 <- per %>% 
    # remove intersection
    #anti_join(doubles_id %>% select(id), by = "id") %>%

    count(year, sort = F) %>% 
    mutate(group = "Периодика") %>%
    rbind(rnc_1835, doubles_counts)

counter_1835 %>% pivot_wider(names_from = year, values_from = n)
```

```{r}
p2_2_1 <- counter_1835 %>%
    ggplot(aes(x = year, y = n, fill = group)) + 
    geom_col(position = "dodge", width = 0.6) + 
    scale_fill_manual(values = c(met.brewer("Veronese")[5], # dark green
                                 met.brewer("Veronese")[3], # light yellow
                                 met.brewer("Veronese")[1] # dark red
                                )) + 
    scale_x_continuous(breaks = 1835:1840) +
    theme(axis.text = element_text(size = 14),
         axis.title = element_text(size = 16),
         legend.title = element_text(size = 16, face = "bold"),
         legend.text = element_text(size = 14)) + 
    labs(x = "Год",
        y = "Количество текстов",
        fill = "Корпус")

p2_2_1
```

#### bw version

```{r}
p2_2_1 <- counter_1835 %>%
    ggplot(aes(x = year, y = n, fill = group)) + 
    geom_col(position = "dodge", width = 0.6) + 
    scale_fill_manual(values = c("grey40",
                                 "grey75",
                                 "grey20"
                                )) + 
    scale_x_continuous(breaks = 1835:1840) +
    theme(axis.text = element_text(size = 14),
         axis.title = element_text(size = 16),
         legend.title = element_text(size = 16, face = "bold"),
         legend.text = element_text(size = 14)) + 
    labs(x = "Год",
        y = "Количество текстов",
        fill = "Корпус")

p2_2_1
```

```{r, eval=FALSE}
ggsave(file = "plots/Fig_2-2-1.png", plot = p2_2_1, dpi = 300,
      width = 8, height = 6, bg = "white")

ggsave(file = "plots/bw/Fig_2-2-1.png", plot = p2_2_1, dpi = 300,
      width = 8, height = 6, bg = "white")
```

```{r}
rm(c19, counter_1835, doubles_counts, doubles_id, nkrja19, p2_2_1, rnc_1835, rnc_authors)
```

## 2.2.1. Sources statistics

Analysis of poems published in different sources (journals & newspapers) and by different authors

```{r}
# glimpse(per)

per <- per %>% 
  rename(PER_ID = book_title)

unique(per$PER_ID)

names <- tibble(PER_ID = unique(per$PER_ID),
       per_name = c("СП", "БдЧ", "Современник", "ОЗ", "ЛПРИ/ЛГ", "ЛПРИ/ЛГ", "СО",
                    "МН", "Маяк", "Телескоп", "СО", "ПРиВЕТ"))

per <- per %>% 
  left_join(names, by = "PER_ID")

rm(names)
```

### Plot 2.2.2

```{r}
lbl <- per %>% 
  filter(!PER_ID %in% c("Молва", "Сев_пч", "Телескоп")) %>% 
  group_by(per_name) %>% 
  count() %>% 
  mutate(lable = paste0(per_name, " (", n, ")")) %>% 
  select(-n)
```

```{r}
per %>% 
  filter(!PER_ID %in% c("Молва", "Сев_пч", "Телескоп")) %>% 
  group_by(year, per_name) %>% 
  count() %>% 
  left_join(lbl, by = "per_name") %>% 
  ggplot(aes(x = year, y = n, fill = lable)) + 
  geom_col() + 
  geom_text(aes(x = year, y = n, label = n), 
            position = position_stack(vjust = .5), 
            color = "white") + 
  scale_x_continuous(breaks = 1835:1840) +
  scale_fill_manual(values = c(met.brewer("Veronese")[1], 
                               met.brewer("Veronese")[3],
                               met.brewer("Veronese")[4:5],
                               met.brewer("Veronese")[7],
                               met.brewer("Veronese")[2],
                               met.brewer("Johnson")[4],
                               met.brewer("Kandinsky")[3])) + 
  theme(axis.text = element_text(size = 14),
         axis.title = element_text(size = 16),
         legend.title = element_text(size = 16, face = "bold"),
         legend.text = element_text(size = 14)) + 
  labs(x = "Год", y = "Количество текстов", fill = "")
```

```{r, eval=FALSE}
ggsave(file = "plots/Fig_2-2-2.png", plot = last_plot(), dpi = 300,
      width = 8, height = 6, bg = "white")
```

#### bw version

```{r}
per %>% 
  filter(!PER_ID %in% c("Молва", "Сев_пч", "Телескоп")) %>% 
  group_by(year, per_name) %>% 
  count() %>% 
  left_join(lbl, by = "per_name") %>% 
  #filter(per_name %in% c("БдЧ", "ЛПРИ/ЛГ", "Маяк", "МН", "ОЗ")) %>% 
  ggplot(aes(x = year, y = n, fill = lable)) + 
  geom_col_pattern(aes(pattern = lable, 
                       pattern_angle = lable,
                       pattern_density = lable),
                   #pattern = 'pch',
                   fill = 'white',
                   colour = 'black', 
                   #pattern_density = 0.5, 
                   pattern_fill = 'white',
                   pattern_colour  = 'black',
                   pattern_spacing = 0.02) +
  
  scale_pattern_manual(values=c('stripe', 'circle', 'stripe', 'stripe', 'pch',
                             'stripe', 'pch', 'stripe'
                             )) +
  # scale_pattern_type_manual(values=c(NA, NA, NA, 'triangle', 'sine')) 
  # 
  geom_label(aes(x = year, y = n, label = n, group = lable),
            position = position_stack(vjust=0.5),
            fill = "white"
            ) +
  scale_x_continuous(breaks = 1835:1840) +
  #scale_fill_manual(values = c()) +
  theme(axis.text = element_text(size = 14),
         axis.title = element_text(size = 16),
         #legend.title = element_text(size = 16, face = "bold"),
         legend.title = element_blank(),
         legend.text = element_text(size = 14)) +
  labs(x = "Год", y = "Количество текстов")
```

```{r, eval=FALSE}
ggsave(file = "plots/bw/Fig_2-2-2.png", plot = last_plot(), dpi = 300,
      width = 8, height = 6, bg = "white")
```

## Table 2.2.4

-   count most prominent authors in a journal (total years) to highlight table 2.2.4

-   authors' age info

Count total number of texts by different authors in each source

```{r}
per %>%
  #filter(year == "1835") %>%
  filter(author_text != "" & !per_name %in% c("Телескоп", "СП")) %>%
  group_by(per_name, year) %>%
  count(author_text, sort = T) %>%
  slice_max(order_by = n, n = 5) %>%
  #ungroup() %>% 
  mutate(author_text = paste0(author_text, " (", n, ")")) %>% 
  select(-n) %>% 
  summarise(
    per_name = per_name,
    year = year,
    author_names = paste0(author_text, collapse = ", ")) %>% 
  ungroup() %>% 
  distinct() %>% 
  arrange(-desc(as.numeric(year))) 

```

Table 2.2.4 most prominent authors highlighting base

```{r}
per %>% 
  filter(author_text != "") %>% 
  group_by(per_name) %>%
  count(author_text, sort = T) %>% 
  slice_max(order_by = n, n = 6) %>% 
  arrange(-desc(per_name))
```

### authors age

```{r}
glimpse(per)

per_total <- per %>% 
  count(per_name) %>% 
  rename(total = n)

authors_known <- per %>% 
  #filter(author_text != "") %>% 
  mutate(age_known = ifelse(year_birth != "",
                            1, 0)) %>% 
  select(year, per_name, author_text, age_known) #%>% 
  #distinct()

# % of texts with authors of known age
authors_known %>% 
  count(per_name, age_known) %>% 
  left_join(per_total, by = "per_name") %>% 
  mutate(perc = round((n/total)*100, 1 ))

unique(per$year_birth)
unique(per$year_death)

# mean and median age of authors for the whole period
per %>% 
  #filter(author_text != "") %>% 
  mutate(age_known = ifelse(year_birth != "",
                            1, 0)) %>% 
  filter(age_known == 1) %>% 
  mutate(year_birth = as.numeric(str_remove(year_birth, "^\\w+\\s")),
         age = year - year_birth) %>% 
  select(per_name, author_text, year_birth, year, age) %>% 
  group_by(per_name) %>% 
  summarise(per_name = per_name,
            mean_age = round(mean(age), 1),
            median_age = round(median(age), 1)
            ) %>% distinct() %>% 
  arrange(-desc(mean_age))

# distribution of mean age over time
per %>% 
  #filter(author_text != "") %>% 
  mutate(age_known = ifelse(year_birth != "",
                            1, 0)) %>% 
  filter(age_known == 1) %>% 
  mutate(year_birth = as.numeric(str_remove(year_birth, "^\\w+\\s")),
         age = year - year_birth) %>% 
  select(per_name, author_text, year_birth, year, age) %>% 
  group_by(per_name, year) %>% 
  summarise(per_name = per_name,
            year = year,
            mean_age = round(mean(age), 1)) %>% distinct() %>% 
  arrange(-desc(mean_age)) %>% 
  arrange(-desc(year)) %>% 
  pivot_wider(names_from = year, values_from = mean_age)

# distribution of median age over time
per %>% 
  #filter(author_text != "") %>% 
  mutate(age_known = ifelse(year_birth != "",
                            1, 0)) %>% 
  filter(age_known == 1) %>% 
  mutate(year_birth = as.numeric(str_remove(year_birth, "^\\w+\\s")),
         age = year - year_birth) %>% 
  select(per_name, author_text, year_birth, year, age) %>% 
  group_by(per_name, year) %>% 
  summarise(per_name = per_name,
            year = year,
            mean_age = round(median(age), 1)) %>% distinct() %>% 
  arrange(-desc(mean_age)) %>% 
  arrange(-desc(year)) %>% 
  pivot_wider(names_from = year, values_from = mean_age)
```

```{r}
per %>% 
  filter(per_name == "Маяк" & author_text != "") %>% 
  select(author_text, year_birth) %>% 
  distinct()
```

### Authors rotation in journals

```{r}
per %>% 
  filter(PER_ID == "БдЧ" & author_text != "") %>% 
  group_by(year) %>% 
  count(author_text, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  ungroup() %>% 
  #filter(rank < 21) %>% 
  pivot_wider(!n, names_from = year, values_from = rank) %>% 
  select(author_text, `1835`, `1836`, `1837`, `1838`, `1839`, `1840`)
  #filter(year == 1835)
```

```{r}
# unite some journal's names
per <- per %>% 
  mutate(per_cln = ifelse(PER_ID == "СОиСА", "СО", PER_ID),
         per_cln = ifelse(PER_ID == "ЛГ", "ЛПРИ", per_cln))

# quick look on journal's existence (in data)
per %>% 
  count(year, per_cln) %>% 
  pivot_wider(names_from = year, values_from = n)

# selected journals
per_names <- c("БдЧ", "ЛПРИ", "СО", "Совр", "ОЗ")
```

Author's appearances in a journal yearly

```{r}
# per_names

p <- NULL
d <- NULL

for (i in 1:length(per_names)) {
  p <- per_names[i]
  
  print(p)
  
  d <- per %>% 
    filter(author_text != "") %>% 
    filter(per_cln == p) %>% 
    count(year, author_text) %>% 
    mutate(n = 1) %>% 
    pivot_wider(names_from = year, values_from = n, values_fill = 0) %>% 
    mutate(total = rowSums(select_if(., is.numeric))) %>% 
    arrange(desc(total))
  
  print(d)
  
}


```

How many authors appeared in a journal only once (=with one poem) in a year

```{r}

unique(per$year)
unique(per$per_cln)

x <- NULL
x1 <- NULL
y <- NULL
p <- NULL
years <- NULL
sources <- NULL
perc <- NULL

for (i in 1:length(unique(per$year))) {
  
  y <- unique(per$year)[i]
  
  for (j in 1:length(per_names)) {
    
    p <- per_names[j]
    
    x <- per %>% 
      filter(per_cln == p & year %in% c(y) & author_text != "") %>% 
      count(author_text, sort = T) %>% nrow()

    x1 <- per %>% 
      filter(per_cln == p & year %in% c(y) & author_text != "") %>% 
      count(author_text, sort = T) %>% 
      filter(n == 1) %>% nrow()
    
    print(c("source: ", p, "year:", y, 
            "total authors:", x, "onetimers:", x1, "perc:", round(x1/x*100,1)))
    
    years <- c(years, y)
    sources <- c(sources, p)
    perc <- c(perc, (x1/x)*100)
    
  }
  
}

# percentage of onetimers in each journal in each year
tibble(year = years,
       source = sources,
       perc = perc) %>% 
  mutate(perc = round(perc, 2)) %>% 
  pivot_wider(names_from = year, values_from = perc)
```

### Jaccard's coefficient for total top authors in each source

```{r}

t <- per %>% 
  filter(author_text != "") %>% 
  group_by(author_text, per_cln) %>% 
  count(sort = T) %>% 
  pivot_wider(names_from = per_cln, values_from = n)

summary(t)
```

```{r}
per %>% 
  filter(!author_text %in% c("", "***", "N.N.") & per_cln %in% per_names) %>% 
  group_by(author_text, per_cln) %>% 
  count() %>% 
  ungroup() %>% 
  filter(n > 3) %>% 
  count(per_cln)

x <- per %>% 
  filter(!author_text %in% c("", "***", "N.N.") & per_cln %in% per_names) %>% 
  group_by(author_text, per_cln) %>% 
  count() %>% 
  ungroup() %>% 
  filter(n > 3)

x
```

### Table 2.2.3

```{r}

source1 <- NULL
source2 <- NULL
a1 <- NULL
a2 <- NULL
sources <- NULL
intersections <- NULL
union <- NULL

for (i in 1:length(per_names)) {
  
  for (j in 1:length(per_names)) {
   
    source1 <- per_names[i]
    
    if (j == length(per_names)) {
      source2 <- per_names[1]
    } else {source2 <- per_names[j+1]}
    
    a1 <- x %>% 
      filter(per_cln == source1) %>% 
      select(author_text) %>% 
      distinct() %>% 
      pull()
     
    a2 <- x %>% 
      filter(per_cln == source2) %>% 
      select(author_text) %>% 
      distinct() %>% 
      pull()
    
    sources <- c(sources, paste0(source1, "__", source2))
    intersections <- c(intersections, length(intersect(a1, a2)))
    union <- c(union, length(union(a1, a2)))
    
  }
}

tibble(sources = sources, 
       int =  intersections, 
       union = union) %>% 
  mutate(jaccard = round(int/union, 3) ) %>% 
  select(sources, jaccard) %>% 
  separate(sources, into = c("s1", "s2"), sep = "__") %>% 
  pivot_wider(names_from = s2, values_from = jaccard) %>% 
  select(s1, БдЧ, ЛПРИ, СО, Совр, ОЗ)
```

### LPRI genre titles

```{r}
print("LPRI is the only source for these genres in all corpus:")
genres_legeres <- per %>% 
  #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
  filter(str_detect(text_title, 
                    "Шарада|Омоним|Анаграмма|Акростих|Логогриф|Эпиграмма|Загадка")) %>% 
  count(PER_ID, year) %>% 
  mutate(id = paste0(PER_ID, "_", year)) 

print(genres_legeres)

per %>% 
  #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
  filter(str_detect(text_title, 
                    "шарада|омоним|анаграмма|акростих|логогриф|эпиграмма|загадка")) %>% 
  count(PER_ID, year)

# per %>% 
#   #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
#   filter(str_detect(subtitle, 
#                     "Шарада|Омоним|Анаграмма|Акростих|Логогриф|Эпиграмма|Загадка")) %>% 
#   count(PER_ID, year)
```

```{r}
print("Total number of poems in LPRI in 1835-1836")
per %>% 
  filter(PER_ID == "ЛПРИ") %>% 
  count(PER_ID, year) %>% 
  rename(total = n) %>% 
  mutate(id = paste0(PER_ID, "_", year)) %>% 
  select(id, total) %>% 
  inner_join(genres_legeres %>% select(id, n), by = "id") %>% 
  mutate(perc = round((n/total)*100, 1) )
```

## 2.2.2 Female poetry in journals

Attach author's gender from authors' metadata table

```{r}
per %>% 
  filter(author_sex != "") %>% 
  count(year, author_sex) %>% 
  #drop_na() %>% 
  ggplot(aes(x = year, y = n, fill = author_sex)) + 
    geom_col(position = "dodge")
```

```{r}
per %>% 
  filter(author_sex != "") %>% 
  group_by(per_cln) %>% 
  count(year, author_sex) %>% 
  drop_na() %>% 
  pivot_wider(names_from = year, values_from = n, values_fill = 0 ) %>% 
  mutate(total = rowSums(across(where(is.numeric)))) 
```

```{r}
print(c("Total number of poems written by women poets in periodicals:", 
      per %>% filter(author_sex == "f") %>% nrow ) )

per %>% 
  filter(author_sex == "f") %>% 
  count(author_text, sort = T) %>% 
  mutate(perc = round((n/118)*100, 2))
```
