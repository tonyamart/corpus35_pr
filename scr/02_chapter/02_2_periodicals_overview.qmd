---
title: 'Chapter 2.2. Poems in periodicals: statistics'
jupyter: ir
---

```{r}
library(tidyverse)

library(treemap)
library(ggplotify)
theme_set(theme_minimal())
library(wesanderson)
library(MetBrewer)

# fix problems with cyrillics
# library(extrafont)
# library(showtext)
# font_add("Arial", "/Library/Fonts/Arial.ttf") 
# showtext_auto()
```

```{r}
MetBrewer::colorblind_palettes

met.brewer(MetBrewer::colorblind_palettes[24])
```

## Data compilation

Load full metadata

```{r}
per_full <- read.delim("../../meta/periodicals_texts.tsv", sep = "\t")
glimpse(per_full)
```

Attach texts and fill the column for text existence

```{r}
# lf <- list.files(path = "../../data/periodicals/periodicals_united/",
#                  full.names = T)
# 
# per_texts <- tibble(text_ID = str_remove_all(lf,
#                                 "../../data/periodicals/periodicals_united//|\\.txt"),
#        text_done = "1",
#        text_raw = sapply(lf, read_file))
# 
# glimpse(per_texts)
# 
# per_texts <- per_texts %>% 
#   mutate(text_lemm = str_remove_all(text_raw, "<.*?>"))
# 
# write.csv(per_texts, file = "per.csv")
```

```{r}
per_texts <- read.csv("../../data/periodicals_texts.csv") %>% 
                  select(-X) %>% 
                  mutate(text_ID = str_remove(text_ID, "\\.tx"))
glimpse(per_texts)
```

Attach authors data

```{r}
authors <- read.delim("../../meta/authors.tsv", sep = "\t")
glimpse(authors)
```

Combine all data together

```{r}
per <- per_full %>% 
  select(-txt_raw, -text) %>% 
  left_join(per_texts, by = "text_ID") %>% 
  left_join(authors %>% rename(author_x = author), by = "A_ID") %>% 
  # for poems with authors not in authors_meta add author == author_sign
  mutate(author = ifelse((A_ID == "" & author == ""), author_sign, author))

glimpse(per)

# save(per, file = "periodicals_full_data.Rda")
```

## Data load

```{r}
load("periodicals_full_data.Rda")
glimpse(per)

print(c("Number of texts:", per %>% filter(text_raw != "") %>% nrow))
```

```{r}

per %>% 
  mutate(text_done = ifelse(!is.na(text_raw), "text done", "only meta")) %>% 
  count(year, text_done) %>% 
  ggplot(aes(x = year, y = n, fill = text_done)) + 
  geom_col(position = "dodge") + 
  scale_fill_manual(values = met.brewer("NewKingdom")[1:3])
```

```{r}
# RNC data
load("../../data/nkrja_19th_lem.Rda")

rnc_authors <- c19 %>% 
    select(author) %>% 
    mutate(author = str_remove_all(author, "[[:space:]]|[[:punct:]]")) %>% 
    distinct() %>% 
    pull()

head(rnc_authors)

#rm(c19)
```

## 2.1. Periodicals vs RNC

Comparison on number of authors

```{r}
print("Total number of authors in periodicals:")
per %>% 
    filter(A_ID != "" & author != "") %>% # 1455 poems are with known author
    select(author) %>% 
    count(author, sort = T) %>% nrow() 

print("Number of authors with biography in RP:")
per %>% 
    filter(RP != "") %>% # 1198 poems by authors known by RP
    select(RP) %>% 
    count(RP, sort = T) %>% nrow() 

print("Number of authors included in RNC")
per %>% 
    filter(author != "") %>% 
    select(author) %>% 
    mutate(author = str_replace_all(author, 
                                    "(.*?[[:space:]])(\\w\\.\\w.)", 
                                    "\\2\\1")) %>% 
    mutate(author = str_remove_all(author, "[[:space:]]|[[:punct:]]")) %>% 
    distinct() %>% 
    filter(author %in% rnc_authors) %>% 
    nrow()
```

### Textual intersections between RNC & periodicals

-   Create for each poem an id column containing two first lines
-   Mark the intersection with a special tag

```{r}
periodicals <- per %>% 
    mutate(doublesCheck = str_extract(text_lemm, "^.*?\n.*?\n.*?\n")) %>% 
    mutate(doublesCheck = str_remove_all(doublesCheck, "[[:punct:]]|[[:space:]]")) %>% 
    filter(text_raw != "") # remove empty lines

glimpse(periodicals)
```

```{r}
nkrja19 <- c19 %>% 
    rename(index = `Unnamed..0`,
          text_lemm = lemma) %>% 
    select(index, author, text_lemm) %>%
    mutate(doublesCheck = str_extract(text_lemm, "^.*?\n.*?\n.*?\n")) %>% 
    mutate(doublesCheck = str_remove_all(doublesCheck, "[[:punct:]]|[[:space:]]"))

glimpse(nkrja19)
```

```{r}
doubles_id <- periodicals %>% 
    inner_join(nkrja19, by = "doublesCheck") %>% 
    select(index, text_ID, year, author.x, author.y, doublesCheck, text_raw)

doubles_id %>% select(-text_raw) %>% head
```

```{r}
print("Total number of intersected texts:")
nrow(doubles_id)

print("Total number of texts in periodicals:")
nrow(periodicals)

print("Total % of intersected texts out for all periodicals texts:")
round( (nrow(doubles_id)/nrow(periodicals))*100 , 1) 
```

```{r}
glimpse(doubles_id)

doubles_counts <- doubles_id %>% 
    count(year) %>% 
    mutate(group = "Периодика и НКРЯ")

doubles_counts %>% pivot_wider(names_from = year, values_from = n)
```

### Plot 2.2.1

```{r}
rnc_1835 <- c19 %>% 
    rename(index = `Unnamed..0`) %>% 
    # remove intersection
    #anti_join(doubles_id %>% select(index), by = "index") %>%

    # calculate number of unique poems
    filter(year > 1834 & year < 1841) %>% 
    count(year, sort = F) %>% 
    mutate(group = "НКРЯ")

rnc_1835 %>% pivot_wider(names_from = year, values_from = n)
```

```{r}
counter_1835 <- per %>% 
    # remove intersection
    #anti_join(doubles_id %>% select(id), by = "id") %>%

    count(year, sort = F) %>% 
    mutate(group = "Периодика") %>%
    rbind(rnc_1835, doubles_counts)

counter_1835 %>% pivot_wider(names_from = year, values_from = n)
```

```{r}
p2_2_1 <- counter_1835 %>%
    ggplot(aes(x = year, y = n, fill = group)) + 
    geom_col(position = "dodge", width = 0.6) + 
    scale_fill_manual(values = c(met.brewer("Veronese")[7], # dark blue
                                 met.brewer("Veronese")[4], # light blue
                                 met.brewer("Veronese")[1] # dark red
                                )) + 
    scale_x_continuous(breaks = 1835:1840) +
    theme(axis.text = element_text(size = 14),
         axis.title = element_text(size = 16),
         legend.title = element_text(size = 16, face = "bold"),
         legend.text = element_text(size = 14)) + 
    labs(x = "Год",
        y = "Количество текстов",
        fill = "Корпус")

p2_2_1
```

```{r}
# ggsave(file = "plots/fig2_2_1.png", plot = p2_2_1, dpi = 300,
#       width = 8, height = 6, bg = "white")
```

## 2.2.1. Sources statistics

Analysis of poems published in different sources (journals & newspapers) and by different authors

```{r}
glimpse(per)
```

```{r}
per %>% group_by(year, PER_ID) %>% count() %>% 
    ggplot(aes(x = year, y = n, fill = PER_ID)) + geom_col() 
```

### Plots 2.2.2

```{r}
periodicals <- per %>% 
  filter(!PER_ID %in% c("Молва", "МН", "Сев_пч"))

years_total <- periodicals %>% 
  count(year) %>% 
  mutate(year_label = paste0(year, " (N = ", n, ")"))

source_year_total <- periodicals %>% 
  count(PER_ID, year)
```

```{r}
authors_sources <- periodicals %>% 
    #filter(PER_ID != "Сев_пч") %>% 
    mutate(PER_ID = ifelse(str_detect(PER_ID,"СОиСА"), "СО", PER_ID)) %>% 
    filter(author != "") %>% 
    
    # grouping by author, year and source
    group_by(year, PER_ID, author) %>% 
    count(sort = T) %>% 
    ungroup() %>%
    
    # non-frequent authors grouped as "others"
    mutate(author = ifelse(n < 3, "Другие", author)) %>% 
    group_by(year, PER_ID, author) %>% 
    # sum poems by others
    summarise(n = sum(n)) %>% 
    mutate(author_label = paste0(author, " (", n, ")"))

head(authors_sources)
```

```{r}
MetBrewer::colorblind_palettes

met.brewer("Archambault")

met.brewer("Egypt")

met.brewer("Johnson")

met.brewer("Kandinsky")

met.brewer("Veronese")
```

```{r}
# treemap: https://cran.r-project.org/web/packages/treemap/treemap.pdf

x <- NULL

for (i in 1:length(unique(per_full$year))) {
    
    x <- unique(per_full$year)[i]
    
    filename = paste0("plots/treemaps/plot_", x, ".png")

    png(filename, width = 600, height = 600)

    t <- authors_sources %>% 
        filter(year == x) %>% 
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = light_palette,
            fontsize.labels = c(20, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = x,
            fontsize.title = 22
        )

    dev.off()
}
```

```{r}
years_total
```

```{r}
source_year_total %>% arrange(-desc(year))
```

```{r}

png("plots/treemaps/2-2-2_1835_v2.png", height = 650, width = 600)

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Veronese")[4], # SO
              met.brewer("Kandinsky")[3]) # Telescop

authors_sources %>% 
        filter(year == 1835) %>% 
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1835 (N = 269)",
            fontsize.title = 22
        )

dev.off()
```

```{r}
png("plots/treemaps/2-2-2_1836_v2.png", height = 650, width = 600)

authors_sources %>% 
        filter(year == 1836) %>% 
        select(PER_ID) %>% distinct() %>% arrange(-desc(PER_ID))

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7], # Sovr
              met.brewer("Kandinsky")[3]) # Telescop

authors_sources %>% 
        filter(year == 1836) %>% 
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1836 (N = 238)",
            fontsize.title = 22
        )

dev.off()
```

```{r}
png("plots/treemaps/2-2-2_1837_v2.png", height = 650, width = 600)

authors_sources %>% 
        filter(year == 1837) %>% 
        select(PER_ID) %>% distinct() %>% arrange(-desc(PER_ID))

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7]) # Sovr 

authors_sources %>%
        filter(year == 1837) %>%
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1837 (N = 282)",
            fontsize.title = 22
        )

dev.off()
```

```{r}
png("plots/treemaps/2-2-2_1838_v2.png", height = 650, width = 600)

authors_sources %>% 
        filter(year == 1838) %>% 
        select(PER_ID) %>% distinct() %>% arrange(-desc(PER_ID))

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7]) # Sovr

authors_sources %>%
        filter(year == 1838) %>%
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1838 (N = 288)",
            fontsize.title = 22
        )

dev.off()
```

```{r}
png("plots/treemaps/2-2-2_1839_v2.png", height = 650, width = 600)

authors_sources %>% 
        filter(year == 1839) %>% 
        select(PER_ID) %>% distinct() %>% arrange(-desc(PER_ID))

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Archambault")[2], # OZ
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7]) # Sovr

authors_sources %>%
        filter(year == 1839) %>%
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1839 (N = 312)",
            fontsize.title = 22
        )

dev.off()
```

```{r}
png("plots/treemaps/2-2-2_1840_v2.png", height = 650, width = 600)

authors_sources %>% 
        filter(year == 1840) %>% 
        select(PER_ID) %>% distinct() %>% arrange(-desc(PER_ID))

tree_pal <- c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LG
              met.brewer("Archambault")[2], # OZ
              met.brewer("Egypt")[2], # PRiVET
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7]) # Sovr

authors_sources %>%
        filter(year == 1840) %>%
        treemap(
            index = c("PER_ID", "author_label"),
            vSize = "n",
            type = "index",
            palette = tree_pal,
            fontsize.labels = c(24, 16),
            #position.legend = "right",
            overlap.labels = 1,
            title = "1840 (N = 378)",
            fontsize.title = 22
        )

dev.off()
```

### Authors rotation in journals

```{r}
per %>% 
  filter(PER_ID == "БдЧ" & author != "") %>% 
  group_by(year) %>% 
  count(author, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  ungroup() %>% 
  #filter(rank < 21) %>% 
  pivot_wider(!n, names_from = year, values_from = rank) %>% 
  select(author, `1835`, `1836`, `1837`, `1838`, `1839`, `1840`)
  #filter(year == 1835)
```

```{r}
# unite some journal's names
per <- per %>% 
  mutate(per_cln = ifelse(PER_ID == "СОиСА", "СО", PER_ID),
         per_cln = ifelse(PER_ID == "ЛГ", "ЛПРИ", per_cln))

# quick look on journal's existence (in data)
per %>% 
  count(year, per_cln) %>% 
  pivot_wider(names_from = year, values_from = n)

# selected journals
per_names <- c("БдЧ", "ЛПРИ", "СО", "Совр", "ОЗ")
```

```{r}
# Kendall's ranking correlation calculation

# #length(unique(per_full$year))
# 
# per_names <- c("БдЧ", "ЛПРИ", "СО", "Совр", "ОЗ")
# 
# x <- NULL
# y <- NULL
# year1 <- NULL
# year2 <- NULL
# 
# x1 <- NULL
# x2 <- NULL
# k <- NULL
# 
# jou <- c("journal")
# years <- c("year")
# tau <- c("tau")
# 
# for (i in 1:length(per_names)) {
#   
#   x <- per %>%
#     filter(per_cln == per_names[i])
#   
#   # print(per_names[i])
#   
#   for (j in 1:(length(unique(x$year))-1)) {
#     year1 <- unique(x$year)[j]
#     year2 <- year1 + 1
# 
#     # print(c(year1, year2))
#     
#     y <- x %>% 
#       filter(!is.na(author)) %>% 
#       group_by(year) %>% 
#       count(author, sort = T) %>% 
#       mutate(rank = row_number()) %>% 
#       ungroup() %>% 
#       #filter(rank < 21) %>% 
#       filter(year %in% c(year1, year2)) %>% 
#       mutate(year = ifelse(year == year1, "year1", "year2")) %>% 
#       pivot_wider(id_cols = !n, names_from = year, values_from = rank) %>% 
#       drop_na
# 
#     #print(y)
#     
#     x1 <- as.vector(y$year1)
#     x2 <- as.vector(y$year2)
# 
#     print(c(per_names[i], year1, year2,  x1, "vs", x2))
#     
#     if (length(x1) > 0 & length(x2) > 0) {
#       k <- cor.test(x1, x2, method = "kendall")
#       
#       #print(unlist(k[[4]]))
#     
#       jou <- c(jou, per_names[i])
#       years <- c(years, paste0(year1, "_", year2))
#       tau <- c(tau, unlist(k[[4]]))
#     }
#   }
# }   
# tibble(journal = jou, 
#        year = years,
#        tau_val = tau) %>% 
#   filter(journal != "journal") %>% 
#   mutate(tau_val = round(as.numeric(tau_val), 4)) %>% 
#   pivot_wider(names_from = year, values_from = tau_val)
```

```{r}
# per_names

p <- NULL
d <- NULL

for (i in 1:length(per_names)) {
  p <- per_names[i]
  
  print(p)
  
  d <- per %>% 
    filter(author != "") %>% 
    filter(per_cln == p) %>% 
    count(year, author) %>% 
    mutate(n = 1) %>% 
    pivot_wider(names_from = year, values_from = n, values_fill = 0) %>% 
    mutate(total = rowSums(select_if(., is.numeric))) %>% 
    arrange(desc(total))
  
  print(d)
  
}


```

```{r}

unique(per$year)
unique(per$per_cln)

x <- NULL
x1 <- NULL
y <- NULL
p <- NULL
years <- NULL
sources <- NULL
perc <- NULL

for (i in 1:length(unique(per$year))) {
  
  y <- unique(per$year)[i]
  
  for (j in 1:length(per_names)) {
    
    p <- per_names[j]
    
    x <- per %>% 
      filter(per_cln == p & year %in% c(y) & author != "") %>% 
      count(author, sort = T) %>% nrow

    x1 <- per %>% 
      filter(per_cln == p & year %in% c(y) & author != "") %>% 
      count(author, sort = T) %>% 
      filter(n == 1) %>% nrow
    
    print(c("source: ", p, "year:", y, 
            "total authors:", x, "onetimers:", x1, "perc:", round(x1/x*100,1)))
    
    years <- c(years, y)
    sources <- c(sources, p)
    perc <- c(perc, (x1/x)*100)
    
  }
  
}

tibble(year = years,
       source = sources,
       perc = perc) %>% 
  mutate(perc = round(perc, 2)) %>% 
  pivot_wider(names_from = year, values_from = perc)
```

### Plot 2.2.3

```{r}
tibble(year = years,
       source = sources,
       perc = perc) %>% 
  ggplot(aes(x = year, y = perc, color = source)) + 
  geom_point(size = 2) + 
  geom_line(linewidth = 2, alpha = 0.7) + 
  labs(#subtitle = "Доля авторов, опубликовавших только 1 стихотворение\nв течение года",
       x = "Год",
       y = "%") + 
  scale_color_manual(values = c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Archambault")[2], # OZ
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7])) + # Sovr 
  scale_y_continuous(limits = c(0,100)) + 
  theme(#legend.position = "None",
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14), 
        plot.subtitle = element_text(size = 16))

# ggsave(filename = "plots/Fig_2-2-3-1.png", plot = last_plot(),
#         width = 8, height = 6, dpi = 300, bg = "white")
```

```{r}

p <- NULL
y <- NULL

intersection <- NULL
total <- NULL

sources <- NULL
years <- NULL

for (i in 1:length(unique(per$year))) {
  
  y <- unique(per$year)[i]
  
  if (y < 1840) {

    for (j in 1:length(per_names)) {
      
      p <- per_names[j]
  
      authors_y1 <- per %>% 
        filter(per_cln == p & year == y & author != "") %>% 
        count(author) %>% pull(author)
  
      authors_y2 <- per %>% 
        filter(per_cln == p & year == y+1 & author != "") %>% 
        count(author) %>% pull(author)
      
      #intersect(authors_y1, authors_y2)
      
      sources <- c(sources, p)
      
      years <- c(years, paste0(y, " -> ", y+1))
      
      intersection <- c(intersection, length(intersect(authors_y1, authors_y2)))
      
      total <- c(total, length(c(authors_y1, authors_y2)))
      
      }
  } 
} 

tibble(sources = sources,
       years = years,
       int = intersection,
       total = total) %>% 
  mutate(jaccard = round((int/total)*100, 2) ) %>% 
  #drop_na() %>% 
  select(sources, years, jaccard) %>% 
  pivot_wider(names_from = years, values_from = jaccard)

tibble(sources = sources,
       years = years,
       int = intersection,
       total = total) %>% 
  mutate(source = paste0(sources, "_", years)) %>% 
  filter(!source %in% c("Совр_1835 -> 1836", "ОЗ_1838 -> 1839")) %>% 
  mutate(jaccard = round((int/total)*100, 3) ) %>% 
  drop_na() %>% 
  ggplot(aes(x = years, y = jaccard, color = sources, group = sources)) + 
    geom_point(size = 2) + 
    geom_line(linewidth = 2, alpha = 0.7) + 
    scale_y_continuous(limits = c(0, 100)) + 
    scale_color_manual(values = c(met.brewer("Veronese")[1], # BdCH
              met.brewer("Veronese")[3], # LPRI
              met.brewer("Archambault")[2], # OZ
              met.brewer("Veronese")[4], # SO
              met.brewer("Veronese")[7])) + 
  labs(color = "Источник",
       x = "Годы", 
       y = "Доля пересечения (коэфф. Жаккарда)") + 
  theme(legend.text = element_text(size = 12),
        legend.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 14))

ggsave(filename = "plots/Fig_2-2-3-2.png", plot = last_plot(),
       width = 8, height = 6, dpi = 300, bg = "white")
```

### Jaccard for total top authors in each source

```{r}

t <- per %>% 
  filter(author != "") %>% 
  group_by(author, per_cln) %>% 
  count(sort = T) %>% 
  pivot_wider(names_from = per_cln, values_from = n)

summary(t)
```

```{r}
per %>% 
  filter(author != "" & per_cln %in% per_names) %>% 
  group_by(author, per_cln) %>% 
  count() %>% 
  ungroup() %>% 
  filter(n > 3) %>% 
  count(per_cln)

x <- per %>% 
  filter(author != "" & per_cln %in% per_names) %>% 
  group_by(author, per_cln) %>% 
  count() %>% 
  ungroup() %>% 
  filter(n > 3)

x


```

```{r}

source1 <- NULL
source2 <- NULL
a1 <- NULL
a2 <- NULL
sources <- NULL
intersections <- NULL
union <- NULL

for (i in 1:length(per_names)) {
  
  for (j in 1:length(per_names)) {
   
    source1 <- per_names[i]
    
    if (j == length(per_names)) {
      source2 <- per_names[1]
    } else {source2 <- per_names[j+1]}
    
    a1 <- x %>% 
      filter(per_cln == source1) %>% 
      select(author) %>% 
      distinct() %>% 
      pull()
     
    a2 <- x %>% 
      filter(per_cln == source2) %>% 
      select(author) %>% 
      distinct() %>% 
      pull()
    
    sources <- c(sources, paste0(source1, "__", source2))
    intersections <- c(intersections, length(intersect(a1, a2)))
    union <- c(union, length(union(a1, a2)))
    
  }
}

tibble(sources = sources, 
       int =  intersections, 
       union = union) %>% 
  mutate(jaccard = round(int/union, 3) ) %>% 
  select(sources, jaccard) %>% 
  separate(sources, into = c("s1", "s2"), sep = "__") %>% 
  pivot_wider(names_from = s2, values_from = jaccard) %>% 
  select(s1, БдЧ, ЛПРИ, СО, Совр, ОЗ)
```

```{r}
tibble(sources = sources, 
       int =  intersections, 
       total = total) %>% 
  mutate(jaccard = round(int/union, 3) ) %>% 
  select(sources, jaccard) %>% 
  filter(jaccard != 1) %>% 
  ggplot(aes(y = jaccard)) + geom_boxplot()

x <- tibble(sources = sources, 
       int =  intersections, 
       total = total) %>% 
  mutate(jaccard = round(int/union, 3) ) %>% 
  select(sources, jaccard) %>% 
  filter(jaccard != 1)

summary(x)
```

```{r}
# x <- per %>% 
#   filter(author != "" & per_cln %in% per_names) %>% 
#   group_by(year, author, per_cln) %>% 
#   count() %>% 
#   ungroup() %>% 
#   filter(n > 2)
# 
# k <- NULL
# year <- NULL
# source1 <- NULL
# source2 <- NULL
# a1 <- NULL
# a2 <- NULL
# 
# t <- tibble(source = "NULL",
#        int = 1,
#        uni = 1)
# 
#   
# 
# 
# 
#   for (i in 1:length(per_names)) {
#     
#     for (j in 1:length(per_names)) {
#       
#       for (k in 1:length(unique(per$year))) {
#   
#       year <- unique(per$year)[k]
#      
#       source1 <- per_names[i]
#       
#       if (j == length(per_names)) {
#         source2 <- per_names[1]
#       } else {source2 <- per_names[j+1]}
#       
#       a1 <- x %>%
#         filter(per_cln == source1) %>% 
#         filter(year %in% year) %>%
#         select(author) %>%
#         distinct() %>%
#         pull()
# 
#       a2 <- x %>%
#         filter(per_cln == source2) %>% 
#         filter(year %in% year) %>%
#         select(author) %>%
#         distinct() %>%
#         pull()
#        
#   
#       t <- t %>% 
#         add_row(source = paste0(source1, "__", source2, "_", year), 
#                 int = length(intersect(a1, a2)),
#                 uni = length(union(a1, a2))
#                 )
#       
#       # sources <- c(sources, paste0(source1, "__", source2, "_", year))
#       # intersections <- c(intersections, length(intersect(a1, a2)))
#       # union <- c(union, length(union(a1, a2)))
#       
#     }
#   }
# }
# 
# 
# t

# tibble(s = sources,
#        int = intersections,
#        union = union) #%>% 
  #mutate(jccd = round(int/union, 4)) # %>% 
  # select(s, jccd) %>% 
  # separate(s, into = c("s1", "s2"), sep = "__") %>% 
  # separate(s2, into = c("s2", "year"), sep = "_") %>% 
  # filter(jccd != 1) %>% 
  # filter(year == 1836) %>% 
  # ggplot(aes(x = year, y = jccd)) + geom_point()
```

### LPRI genre titles

```{r}
print("LPRI is the only source for these genres in all corpus:")
genres_legeres <- per %>% 
  #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
  filter(str_detect(text_title, 
                    "Шарада|Омоним|Анаграмма|Акростих|Логогриф|Эпиграмма|Загадка")) %>% 
  count(PER_ID, year) %>% 
  mutate(id = paste0(PER_ID, "_", year)) 

print(genres_legeres)

per %>% 
  #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
  filter(str_detect(text_title, 
                    "шарада|омоним|анаграмма|акростих|логогриф|эпиграмма|загадка")) %>% 
  count(PER_ID, year)

per %>% 
  #filter(PER_ID %in% c("ЛПРИ", "ЛГ")) %>% 
  filter(str_detect(subtitle, 
                    "Шарада|Омоним|Анаграмма|Акростих|Логогриф|Эпиграмма|Загадка")) %>% 
  count(PER_ID, year)
```

```{r}
print("Total number of poems in LPRI in 1835-1836")
per %>% 
  filter(PER_ID == "ЛПРИ") %>% 
  count(PER_ID, year) %>% 
  rename(total = n) %>% 
  mutate(id = paste0(PER_ID, "_", year)) %>% 
  select(id, total) %>% 
  inner_join(genres_legeres %>% select(id, n), by = "id") %>% 
  mutate(perc = round((n/total)*100, 1) )
```

## 2.2.2 Female poetry in journals

```{r}
per %>% 
  count(year, gender) %>% 
  #drop_na() %>% 
  ggplot(aes(x = year, y = n, fill = gender)) + 
    geom_col(position = "dodge")
```

```{r}
per %>% 
  group_by(per_cln) %>% 
  count(year, gender) %>% 
  drop_na() %>% 
  pivot_wider(names_from = year, values_from = n, values_fill = 0 ) %>% 
  mutate(total = rowSums(across(where(is.numeric)))) 
```

```{r}
print(c("Total number of poems written by women poets in periodicals:", 
      per %>% filter(gender == "f") %>% nrow ) )

per %>% 
  filter(gender == "f") %>% 
  count(author, sort = T) %>% 
  mutate(perc = round((n/114)*100, 2))
```
