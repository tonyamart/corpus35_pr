---
title: "03_2_projections"
format: md
editor: visual
---

# 3.1. Genres & words

This script analyses how words are distributed inside genres using UMAP projections ( distances between samples based on the MFW frequency).

```{r}
library(tidyverse)
library(tidytext)

# library(stylo)
# library(seetrees)

library(umap)

library(MetBrewer)
theme_set(theme_minimal())
```

Load data

```{r}
corpus1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")

titles <- read.csv("poems_titles.csv") %>% select(-X)
```

Attach titles data to the corpus: for genres only

```{r}
genres <- unlist(str_split(c("песня
романс
сонет
элегия
басня
песнь
альбом
дума
баллада
отрывок
подражание
послание
молитва
фантазия
псалом
эпиграмма
мелодия
антологический
аполог
сказка
экспромт
надпись
эпилог"), pattern = "\n"))

multigenre <- titles %>% 
  select(text_id, lemma) %>% 
  filter(lemma %in% genres) %>% 
  group_by(text_id) %>% 
  summarise(genre = paste0(lemma, collapse = " | ")) %>% 
  filter(str_detect(genre, " \\| "))

m <- corpus1835 %>% 
  filter(text_id %in% multigenre$text_id) %>% 
  select(text_id, text_title, text_subtitle) %>% 
  left_join(multigenre %>% select(text_id, genre), by = "text_id")

# write.csv(m, "multigenre_texts.csv")
```

```{r}
# read the data with normalised genres
m <- read.delim("multigenre_texts.csv", sep = ';') %>% select(-X)

glimpse(m)

# attach normalised genres to other genre titles
ids_genres <- titles %>% 
  select(text_id, lemma) %>% 
  filter(lemma %in% genres) %>% 
  group_by(text_id) %>% 
  summarise(genre = paste0(lemma, collapse = " | ")) %>% 
  filter(!str_detect(genre, " \\| ")) %>% 
  rbind(m %>% 
          select(text_id, true_genre) %>% 
          rename(genre = true_genre)
          )

rm(m, multigenre, titles)
```

```{r}
# glimpse(corpus1835)

corpus_genres <- corpus1835 %>% 
  select(text_id, author_text, text_title, year, 
         text_cln, text_lemm, 
         meter, feet, n_lines) %>% 
  left_join(ids_genres, by = "text_id") %>% 
  mutate(genre = ifelse(genre == "", NA, genre))

table(corpus_genres$genre)
```

## length in lines

Coun how long are the texts with genre titles

```{r}
corpus_genres %>% 
  filter(!is.na(genre)) %>% 
  select(-text_lemm) %>% 
  separate_rows(text_cln, sep = "\n") %>% 
  filter(text_cln != "" & !str_detect(text_cln, "^\\W+$")) %>% 
  count(genre, text_id) %>% 
  group_by(genre) %>% 
  summarise(mean_lines = round(mean(n),2),
            median_lines = round(median(n),2)) %>% 
  ungroup() %>% 
  pivot_longer(!genre, names_to = "metric", values_to = "n_lines") %>% 
  ggplot(aes(x = reorder_within(genre, n_lines, genre), y = n_lines, fill = metric)) + 
  geom_col(position = "dodge") + 
  coord_flip() + 
  scale_x_reordered() + 
  scale_fill_manual(values = c(met.brewer("Veronese")[3],
                               met.brewer("Veronese")[6])) + 
  labs(x = "",
       y = "Количество строк")
```

Check if there is difference between periodicals and poetry collections

```{r}
corpus_genres %>% 
  filter(!is.na(genre)) %>% 
  select(-text_lemm) %>% 
  separate_rows(text_cln, sep = "\n") %>% 
  filter(text_cln != "" & !str_detect(text_cln, "^\\W+$")) %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus, genre, text_id) %>% 
  group_by(genre, corpus) %>% 
  summarise(median_lines = round(median(n),2)) %>% 
  ungroup() %>% 
  ggplot(aes(x = reorder_within(genre, median_lines, genre), 
             y = median_lines, 
             fill = corpus)) + 
  geom_col(position = "dodge", width = 0.7) + 
  coord_flip() + 
  scale_x_reordered() + 
  scale_fill_manual(values = c(met.brewer("Veronese")[3],
                               met.brewer("Veronese")[6])) + 
  labs(x = "",
       y = "Количество строк")
```

## Sampling

Take random samples of 25 lines from all texts longer than 25, filter out texts shorter than 8 lines.

```{r}
source("03_fn_sampling.R")
```

```{r}
# filter out short poems (<7 lines)
corpus_genres <- corpus_genres %>% 
  filter(n_lines > 7)

# -260 poems
```

Sample lemmatised texts

```{r}
genres_sampled <- sample_long(corpus_genres %>%  
                                #select(-text_lemm) %>% 
                                rename(#text_lemm = text_cln,
                                  id = text_id),
                        starting_n = 1,
                        sample_size = 25,
                        over9000 = 5)
```

Comparison on the number of genre-labelled poems before and after sampling

```{r}
corpus_genres %>% 
  filter(!is.na(genre)) %>% 
  nrow()

genres_sampled %>% 
  filter(!is.na(genre)) %>% 
  nrow()
```

Leave only the texts with genre titles

```{r}
genres_only <- genres_sampled %>% 
  filter(!is.na(genre))

# glimpse(genres_only)
```

Check sampling

```{r, eval=F}
genres_only %>% 
  #select(-text_lemm) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(text_lemm != "" & !str_detect(text_lemm, "^\\W+$")) %>% 
  count(id, genre) %>%  
  ggplot(aes(x = genre, y = n)) + geom_boxplot()
```

## Aggregation

### genres - n lines available

Available number of lines for each genre after sampling

```{r}
genres_only %>% 
  select(-text_cln) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  group_by(genre) %>% 
  count(sort = T)
```

Number of lines in each meter

```{r}
genres_only %>% 
  select(-text_cln) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  group_by(genre, meter) %>% 
  count(sort = T)
```

### grouping I - meters

preprocessing: all texts longer than 50 lines are sampled down to 25 lines, texts shorter than 8 lines excluded;

grouping 1: no meter division; for each genre a sample of 100 lines is taken, each genre has 10 samples (1000 lines total)

```{r}
genres_sampled <- genres_only %>%
  select(-text_cln) %>% 
  
  # filter only genres with > 1000 lines available
  filter(genre %in% c("песня", "романс", "элегия", "баллада", "послание", 
                      "песнь", "отрывок", "сонет", "басня", 
                      "дума")) %>% 
  
  separate_rows(text_lemm, sep = "\n") %>% 
  group_by(genre) %>% 
  sample_n(1000) %>% 
  mutate(sample_id = ceiling(1:1000),
         sample_id = floor(sample_id/100)+1, 
         sample_id = ifelse(sample_id == 11, 1, sample_id)) %>% 
  ungroup()

genres_sampled <- genres_sampled %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = "     --     ")) 

str(genres_sampled)
```

### grouping II - meters + genres

preprocessing: all texts longer than 50 lines are sampled down to 25 lines, texts shorter than 8 lines excluded;

grouping 2: genre and meter division; for each genre+metre a sample of 100 lines is taken, each category has 5 samples (500 lines total)

```{r}
genres_meters_v <- genres_only %>% 
  select(-text_cln) %>% 
  filter(meter != "Other?") %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  mutate(genre_meter = paste0(genre, "_", meter)) %>% 
  count(genre_meter, sort = T)

head(genres_meters_v, 20)

selected_gm <- genres_meters_v %>% filter(n > 500) %>% pull(genre_meter)
# selected_gm


genres_m_sampled <- genres_only %>%
  select(-text_cln) %>% 
  filter(meter != "Other?") %>% 
  
  mutate(genre_meter = paste0(genre, "_", meter)) %>% 
  
  # filter only genres-meters paits with > 500 lines available
  filter(genre_meter %in% selected_gm) %>% 
  
  separate_rows(text_lemm, sep = "\n") %>% 
  group_by(genre_meter) %>% 
  sample_n(500) %>% 
  mutate(sample_id = ceiling(1:500),
         sample_id = floor(sample_id/100)+1,
         sample_id = ifelse(sample_id == 6, 1, sample_id)) %>% 
  ungroup() 

genres_m_sampled <- genres_m_sampled %>% 
  mutate(sample_id = paste0(genre_meter, "__", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = "     --     ")) 

str(genres_m_sampled)
```

## Projections

### Genres

#### 500 MFW

Ranks

```{r}
ranks <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(500)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))
```

Frequencies: count MFW freq in each sample

```{r}
counter <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)
```

Matrix

```{r}
xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"))
  
glimpse(dat)

rm(ranks, counter, mtrx)
```

Plot

```{r}
dat %>% 
  ggplot(aes(x, y, color = genre)) + 
  #geom_point(size = 5, alpha = 0.6) + 
  geom_text(aes(label = genre)) + 
  labs(title = "500 MFW, lemmatised, 10 samples of 100 lines from each genre")
```

#### 250 MFW

```{r}
ranks <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(250)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))

counter <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)

xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"))
  
glimpse(dat)

rm(ranks, counter, mtrx)
```

```{r}
dat %>% 
  ggplot(aes(x, y, color = genre)) + 
  #geom_point(size = 5, alpha = 0.6) + 
  geom_text(aes(label = genre)) + 
  labs(#title = "250 MFW, lemmatised, 10 samples of 100 lines from each genre",
       x = "", y = "") + 
  theme(legend.position = "None", 
        ) + 
  scale_color_manual(values = c(met.brewer("Veronese"),
                                met.brewer("Derain")[1],
                                met.brewer("Egypt")[2:4]))

# ggsave("plots/Fig_3-1-3.png", plot = last_plot(), dpi = 300,
#        bg = "white", width = 6, height = 4)

# ggsave("plots/Fig_3-1-3.png", plot = last_plot(), dpi = 300,
#         bg = "white", width = 7, height = 5)
```

#### 750 MFW

```{r}
ranks <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(750)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))

counter <- genres_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)

xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"))
  
glimpse(dat)

rm(ranks, counter, mtrx)

dat %>% 
  ggplot(aes(x, y, color = genre)) + 
  #geom_point(size = 5, alpha = 0.6) + 
  geom_text(aes(label = genre)) + 
  labs(title = "750 MFW, lemmatised, 10 samples of 100 lines from each genre")
```

### Genres + meters

#### 500 MFW

```{r}
ranks <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(500)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))
```

```{r}
counter <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)
```

```{r}
xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\w+__\\d+$"),
         meter = str_extract(sample_id, "_\\w+__"),
         meter = str_remove_all(meter, "_"))
  
glimpse(dat)
```

```{r}
dat %>% 
  ggplot(aes(x, y, color = meter, shape = meter)) + 
  geom_point(size = 3, alpha = 0.6) + 
  geom_text(aes(label = genre), vjust=0.9) + 
  labs(title = "500 MFW, lemmatised, 5 samples of 100 lines from each genre")
```

#### 250 MFW

```{r}
ranks <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(250)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))

counter <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)

xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\w+__\\d+$"),
         meter = str_extract(sample_id, "_\\w+__"),
         meter = str_remove_all(meter, "_"))

glimpse(dat)

rm(ranks, counter, mtrx)
```

```{r}
dat %>% 
  ggplot(aes(x, y, color = meter, shape = meter)) + 
  geom_point(size = 3, alpha = 0.6) + 
  geom_text(aes(label = genre), vjust=0.9) + 
  labs(title = "250 MFW, lemmatised, 5 samples of 100 lines from each genre")
```

#### 750 MFW

```{r}
ranks <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(750)

head(ranks, 10)

tail(ranks, 10)

ranks %>% 
  mutate(rank = row_number()) %>% 
  sample_n(15) %>% 
  arrange(-desc(rank))

counter <- genres_m_sampled %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  group_by(sample_id) %>% 
  count(word) %>% 
  filter(word %in% ranks$word) %>% 
  ungroup()

counter %>% 
  sample_n(10)

xxx <- counter %>% 
  pivot_wider(names_from = word, values_from = n, values_fill = 0)

mtrx <- xxx %>% 
  ungroup() %>% 
  select(-sample_id) %>% 
  scale()

dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       sample_id = xxx$sample_id) %>% 
  mutate(genre = str_remove(sample_id, "_\\w+__\\d+$"),
         meter = str_extract(sample_id, "_\\w+__"),
         meter = str_remove_all(meter, "_"))

glimpse(dat)

rm(ranks, counter, mtrx)
```

```{r}
dat %>% 
  ggplot(aes(x, y, color = meter, shape = meter)) + 
  geom_point(size = 3, alpha = 0.6) + 
  geom_text(aes(label = genre), vjust=0.9) + 
  labs(title = "750 MFW, lemmatised, 5 samples of 100 lines from each genre")
```
