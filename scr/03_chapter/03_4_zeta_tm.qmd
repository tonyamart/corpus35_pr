---
title: "03_4_zeta_tm"
format: md
editor: visual
---

# Exploration with Zeta and topic modeling

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

library(topicmodels)

# library(umap)
library(stylo) # zeta as oppose()

library(MetBrewer)
theme_set(theme_minimal())
```

## Genres

### load data

```{r}
# main corpus
corpus1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")

# read genre titles
titles <- read.csv("poems_titles.csv") %>% select(-X)

# read the data with normalised genres
m <- read.delim("multigenre_texts.csv", sep = ';') %>% select(-X)

# list of genre words (longer)
genres <- unlist(str_split(c("песня
романс
сонет
элегия
басня
песнь
альбом
дума
баллада
отрывок
подражание
послание
молитва
фантазия
псалом
эпиграмма
мелодия
антологический
аполог
сказка
экспромт
надпись
эпилог"), pattern = "\n"))

# attach normalised genres to other genre titles
ids_genres <- titles %>% 
  select(text_id, lemma) %>% 
  filter(lemma %in% genres) %>% # select genres from the list
  group_by(text_id) %>% 
  summarise(genre = paste0(lemma, collapse = " | ")) %>% 
  filter(!str_detect(genre, " \\| ")) %>% # remove multigenre titles
  rbind(m %>% 
          select(text_id, true_genre) %>% 
          rename(genre = true_genre) # replace them with clean labels
          ) %>% 
  filter(genre != "")

corpus_genres <- corpus1835 %>% 
  left_join(ids_genres, by = "text_id") %>% 
  #filter(!is.na(genre)) %>% 
  select(text_id, genre, meter, text_lemm) %>% 
  mutate(genre = ifelse(is.na(genre), "no_genre", genre)) %>% 
  
  # filter only most freq genres
  filter(genre %in% c("песня", "романс", "элегия", "баллада", "послание", 
                      "песнь", "отрывок", "сонет", "басня", 
                      "дума", "no_genre"))

rm(genres, m, titles, ids_genres)
```

## keyness

### tf-idf

All genres

```{r}
# remove proper names from tf-idf results
propnames <- unlist(str_split(c("эдвард
эльвина
альфред
параша
пань
гленара
марина
заира
клара
медор
агнета
демьян
федя
езерский
столбин
таня
нина
варвик
делийиталл
макгрегор
ютланд
каллироэ
гаральд
аминта
зара
нигер
фингал
бенамар
омар
бенамара
клоринда
бендамира
мальвина
ma
улица
палиха
елена
яныш
павел
марко
мунго"), pattern = "\n"))


corpus_genres %>% 
  unnest_tokens(input = text_lemm, output = word, token = "words") %>% 
  group_by(genre) %>% 
  count(word) %>% 
  ungroup() %>% 
  # remove frequent proper names
  filter(!word %in% propnames) %>% 
  bind_tf_idf(term = word, document = genre, n) %>% 
  arrange(desc(tf_idf)) %>% 
  group_by(genre) %>% 
  slice_max(order_by = tf_idf, n = 10)  %>%
  ungroup() %>% 
  filter(!str_detect(genre, "no_genre")) %>% 
  ggplot(aes(tf_idf, fct_reorder(word, tf_idf), fill = genre)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~genre, ncol = 3, scales = "free") +
  labs(x = "tf-idf", y = NULL)

```

word bi-grams

```{r}
corpus_genres %>% 
  unnest_tokens(input = text_lemm, output = bigram, token = "ngrams", n = 2) %>% 
  group_by(genre) %>% 
  count(bigram) %>% 
  ungroup() %>% 
  # remove frequent proper names
  #filter(!word %in% propnames) %>% 
  bind_tf_idf(term = bigram, document = genre, n) %>% 
  arrange(desc(tf_idf)) %>% 
  group_by(genre) %>% 
  slice_max(order_by = tf_idf, n = 5)  %>%
  ungroup() %>% 
  filter(!str_detect(genre, "no_genre")) %>% 
  ggplot(aes(tf_idf, fct_reorder(bigram, tf_idf), fill = genre)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~genre, ncol = 3, scales = "free") +
  labs(x = "tf-idf", y = NULL)

```

### zeta

#### fable

```{r}
# glimpse(corpus_genres)

corpus_genres %>% 
  filter(meter == "Iamb") %>% 
  mutate(genre = ifelse(genre == "басня", "басня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  filter(meter == "Iamb") %>% 
  mutate(genre = ifelse(genre == "басня", "басня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(1500) %>% 
  mutate(sample_id = ceiling(1:1500),
         sample_id = floor(sample_id/500)+1,
         sample_id = ifelse(sample_id == 4, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "другое", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/fable/", path, sample_id, ".txt"))

head(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

Write sampled texts

```{r}
do.call(file.remove, list(
  list.files("zeta_tests/fable//primary_set", full.names = TRUE)))
do.call(file.remove, list(
  list.files("zeta_tests/fable//secondary_set", full.names = TRUE)))

for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

Run stylo oppose()

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/fable/",
  corpus.lang = "Other",
  text.slice.length = 500,
  write.png.file = TRUE
)
```

#### songs_iamb

```{r}
corpus_genres %>% 
  filter(meter == "Iamb") %>% 
  mutate(genre = ifelse(genre == "песня", "песня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  filter(meter == "Iamb") %>% 
  mutate(genre = ifelse(genre == "песня", "песня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(1200) %>% 
  mutate(sample_id = ceiling(1:1200),
         sample_id = floor(sample_id/400)+1,
         sample_id = ifelse(sample_id == 4, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "другое", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/song_iamb/", path, sample_id, ".txt"))

head(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

```{r, eval=FALSE}
for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/song_iamb/",
  corpus.lang = "Other",
  text.slice.length = 500,
  write.png.file = TRUE
)
```

#### songs_trochee

```{r}
corpus_genres %>% 
  filter(meter == "Trochee") %>% 
  mutate(genre = ifelse(genre == "песня", "песня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  filter(meter == "Trochee") %>% 
  mutate(genre = ifelse(genre == "песня", "песня", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(2500) %>% 
  mutate(sample_id = ceiling(1:2500),
         sample_id = floor(sample_id/500)+1,
         sample_id = ifelse(sample_id == 6, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "другое", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/song_trochee/", path, sample_id, ".txt"))

head(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

```{r, eval=FALSE}
for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/song_trochee/",
  corpus.lang = "Other",
  text.slice.length = 500,
  write.png.file = TRUE
)
```

#### songs iamb vs trochee

```{r}
corpus_genres %>% 
  filter(meter == "Trochee" | meter == "Iamb") %>% 
  filter(genre == "песня") %>% 
  mutate(genre = ifelse(meter == "Iamb", "песня_ямб", "песня_хорей")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  filter(meter == "Trochee" | meter == "Iamb") %>% 
  filter(genre == "песня") %>% 
  mutate(genre = ifelse(meter == "Iamb", "песня_ямб", "песня_хорей")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(1200) %>% 
  mutate(sample_id = ceiling(1:1200),
         sample_id = floor(sample_id/400)+1,
         sample_id = ifelse(sample_id == 4, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "песня_ямб", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/song_iamb_vs_trochee/", path, sample_id, ".txt"))

head(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

```{r, eval=FALSE}
for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/song_iamb_vs_trochee/",
  corpus.lang = "Other",
  text.slice.length = 500,
  write.png.file = TRUE
)
```

#### romance iamb vs trochee

```{r}
corpus_genres %>% 
  filter(meter == "Trochee" | meter == "Iamb") %>% 
  filter(genre == "романс") %>% 
  mutate(genre = ifelse(meter == "Iamb", "романс_ямб", "романс_хорей")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  filter(meter == "Trochee" | meter == "Iamb") %>% 
  filter(genre == "романс") %>% 
  mutate(genre = ifelse(meter == "Iamb", "романс_ямб", "романс_хорей")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(900) %>% 
  mutate(sample_id = ceiling(1:900),
         sample_id = floor(sample_id/300)+1,
         sample_id = ifelse(sample_id == 4, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "романс_ямб", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/romance_iamb_vs_trochee/", path, sample_id, ".txt"))

head(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

```{r, eval=FALSE}
for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/romance_iamb_vs_trochee/",
  corpus.lang = "Other",
  text.slice.length = 200,
  write.png.file = TRUE
)
```

#### elegy

```{r}
corpus_genres %>% 
  mutate(genre = ifelse(genre == "элегия", "элегия", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  count(genre, sort = T)

corpus_prepared <- corpus_genres %>% 
  mutate(genre = ifelse(genre == "элегия", "элегия", "другое")) %>% 
  separate_rows(text_lemm, sep = "\n") %>% 
  filter(!str_detect(text_lemm, "^\\W+$|^\\s+$") & text_lemm != "") %>% 
  group_by(genre) %>% 
  sample_n(3500) %>% 
  mutate(sample_id = ceiling(1:3500),
         sample_id = floor(sample_id/500)+1,
         sample_id = ifelse(sample_id == 8, 1, sample_id)) %>%
         # sample_id = floor(sample_id/100)+1, 
         # sample_id = ifelse(sample_id == 16, 1, sample_id)) %>%
  ungroup() %>% 
  mutate(sample_id = paste0(genre, "_", sample_id)) %>% 
  group_by(sample_id) %>% 
  summarise(text = paste0(text_lemm, collapse = " ------ ")) %>% 
  mutate(genre = str_remove(sample_id, "_\\d+$"), 
         path = ifelse(genre == "другое", "secondary_set/", "primary_set/"),
         path = paste0("zeta_tests/elegy/", path, sample_id, ".txt"))

tail(corpus_prepared)

# sample sizes in words
corpus_prepared %>% 
  unnest_tokens(input = text, output = word, token = "words") %>% 
  count(sample_id)
```

```{r, eval=FALSE}
for (i in 1:nrow(corpus_prepared)) {
  writeLines(corpus_prepared$text[i], corpus_prepared$path[i])
}
```

```{r}
oppose(
  gui = FALSE,
  path = "zeta_tests/elegy/",
  corpus.lang = "Other",
  text.slice.length = 500,
  write.png.file = TRUE
)
```

## topic model

Topic model based on the separate texts

```{r}
table(corpus_genres$genre)

corpus_genres <- corpus_genres %>% 
  filter(genre != "no_genre")
```

Create stoplist & rankings

```{r}
stoplist <- c("и","в","во","не","что","он","на","я","с","со","как","а","то","все","она","так","его","но","ты","к","у","же","вы","за","бы","по","ее","мне","было","вот","от","меня","о","из","ему","теперь","даже","ну","ли","если","или","ни","быть","был","него","до","вас","нибудь","вам","сказал","себя","ей","может","они","есть","ней","для","мы","тебя","их","чем","была","сам","чтоб","без","будто","чего","себе","под","будет","ж","кто","этот","того","потому","этого","какой","ним","этом","мой","тем","чтобы","нее","были","куда","зачем","всех","можно","при","об","хоть","над","больше","тот","через","эти","нас","про","всего","них","какая","много","разве","сказала","три","эту","моя","свою","этой","перед","лучше","чуть","том","такой","им","более","всю","между","твой","весь")


ranks <- corpus_genres %>% 
  unnest_tokens(input = text_lemm, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  
  # remove words from the stoplist
  filter(!word %in% stoplist) %>% 
  head(5000)

head(ranks)
tail(ranks)
```

#### genres

Create dtm and model, extract coefficients

```{r, eval=FALSE}
dtm <- corpus_genres %>% 
  mutate(doc_id = paste0(genre, "___", text_id)) %>% 
  unnest_tokens(input = text_lemm, output = word, token = "words") %>% 
  filter(word %in% ranks$word) %>% 
  count(doc_id, word) %>% 
  cast_dtm(document = doc_id, term = word, value = n)

# Create a model with 20 topics
mod_20 <- LDA(dtm, k = 20, method = "Gibbs",
              control = list(alpha = 0.5, delta = 0.1, 
                             iter = 2000, seed = 1234, thin = 1))

# Extract coefficients
beta20 <- tidy(mod_20, matrix = "beta") 
gamma20 <- tidy(mod_20, matrix = "gamma")

save(beta20, gamma20, file = "lda_tm_genres_20.Rda")
```

```{r}
load("lda_tm_genres_20.Rda")
```

Beta

```{r}
#### Plot: words' probabilities in topics ####
beta20 %>% 
  group_by(topic) %>% 
  top_n(20, beta) %>% 
  ungroup() %>%
  arrange(topic, desc(beta)) %>% 
  ggplot(aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) + 
  geom_col(show.legend = FALSE) + 
  facet_wrap(~topic, scales = "free") + 
  coord_flip() + 
  theme_minimal(base_size = 14) + 
  scale_x_reordered() + 
  labs(title = "Probability of top 20 words in topics",
       subtitle = "LDA model build with 'topicmodels' r package, 20 topics, alpha = 0,5, 2000 iterations") + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank())


ggsave("tm20_beta.png", plot = last_plot(),
       bg = "white", width = 15, height = 12)
```

Gamma

Distribution of topics in genres

```{r, message=FALSE}
# glimpse(gamma20)

gamma20 %>% 
  mutate(genre = str_extract(document, "^\\w+___"),
         genre = str_remove(genre, "___$")) %>% 
  group_by(genre, topic) %>% 
  summarise(mean_gamma = mean(gamma)) %>% 
  ungroup() %>% 
  ggplot(aes(x = genre, y = topic, fill = mean_gamma)) + 
  geom_tile() + 
  scale_fill_viridis_c() + 
  scale_y_continuous(breaks = 1:50) + 
  geom_text(aes(label = #round(mean_gamma, 3)
                  #paste0(topic, "\n", round(mean_gamma, 3))
                  topic
                ), colour = "white")

gamma20 %>% 
  mutate(genre = str_extract(document, "^\\w+___"),
         genre = str_remove(genre, "___$")) %>% 
  group_by(genre, topic) %>% 
  summarise(mean_gamma = mean(gamma)) %>% 
  ungroup() %>% 
  group_by(genre) %>% 
  slice_max(n = 5, order_by = mean_gamma) %>% 
  ggplot(aes(x = genre, y = mean_gamma, fill = as.factor(topic))) + 
  geom_col(position = "stack") + 
  geom_text(aes(label = topic), position = position_stack(vjust = 0.5)) + 
  theme(legend.position = "None")
```

Projection for texts based on vectors of topics

```{r}
# glimpse(gamma20)

gamma_matrix <- gamma20 %>% 
  pivot_wider(names_from = topic, values_from = gamma) 
  #scale()

mtrx <- gamma_matrix %>% 
  select(-document) 
  
dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       document = gamma_matrix$document) %>% 
  mutate(genre = str_remove(document, "___.*?$"))
  
glimpse(dat)

dat %>% 
  mutate(genre_lbl = ifelse(genre == "песня", "песня", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "элегия", "элегия", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "басня", "басня", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  ggplot(aes(x, y, color = genre)) + 
  #geom_point(size = 4, alpha = 0.6) + 
  geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")
```

#### genres + meters

```{r}
mg_lable <- corpus_genres %>% 
  filter(meter %in% c("Iamb", "Trochee", "Amphibrach")) %>% 
  count(meter, genre, sort = T) %>% 
  filter(n > 7) %>% 
  mutate(mg = paste0(meter, "_", genre)) %>% 
  pull(mg)

mg_lable
```

```{r, eval=FALSE}
dtm <- corpus_genres %>% 
  mutate(mg = paste0(meter, "_", genre)) %>% 
  filter(mg %in% mg_lable) %>% 
  mutate(doc_id = paste0(mg, "___", text_id)) %>% 
  unnest_tokens(input = text_lemm, output = word, token = "words") %>% 
  filter(word %in% ranks$word) %>% 
  count(doc_id, word) %>% 
  cast_dtm(document = doc_id, term = word, value = n)

# Create a model with 20 topics
mod_20 <- LDA(dtm, k = 20, method = "Gibbs",
              control = list(alpha = 0.5, delta = 0.1, 
                             iter = 2000, seed = 1234, thin = 1))

# Extract coefficients
beta20 <- tidy(mod_20, matrix = "beta") 
gamma20 <- tidy(mod_20, matrix = "gamma")

save(beta20, gamma20, file = "lda_tm_genres-meters_20.Rda")
```

```{r}
load('lda_tm_genres-meters_20.Rda')
```

Beta

```{r}
beta20 %>% 
  group_by(topic) %>% 
  top_n(20, beta) %>% 
  ungroup() %>%
  arrange(topic, desc(beta)) %>% 
  ggplot(aes(reorder_within(term, beta, topic), beta, fill = factor(topic))) + 
  geom_col(show.legend = FALSE) + 
  facet_wrap(~topic, scales = "free") + 
  coord_flip() + 
  theme_minimal(base_size = 14) + 
  scale_x_reordered() + 
  labs(title = "Probability of top 20 words in topics",
       subtitle = "LDA model build with 'topicmodels' r package, 20 topics, alpha = 0,5, 2000 iterations") + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank())


ggsave("tm20_meters_beta.png", plot = last_plot(),
       bg = "white", width = 15, height = 12)
```

Gamma

Distribution of topics in genres & meters

```{r}
gamma20 %>% 
  mutate(genre = str_extract(document, "^\\w+___"),
         genre = str_remove(genre, "___$")) %>% 
  group_by(genre, topic) %>% 
  summarise(mean_gamma = mean(gamma)) %>% 
  ungroup() %>% 
  ggplot(aes(x = genre, y = topic, fill = mean_gamma)) + 
  geom_tile() + 
  scale_fill_viridis_c() + 
  scale_y_continuous(breaks = 1:50) + 
  geom_text(aes(label = #round(mean_gamma, 3)
                  #paste0(topic, "\n", round(mean_gamma, 3))
                  topic
                ), colour = "white") + 
  theme(axis.text.x = element_text(angle = 90))

gamma20 %>% 
  mutate(genre = str_extract(document, "^\\w+___"),
         genre = str_remove(genre, "___$")) %>% 
  group_by(genre, topic) %>% 
  summarise(mean_gamma = mean(gamma)) %>% 
  ungroup() %>% 
  group_by(genre) %>% 
  slice_max(n = 5, order_by = mean_gamma) %>% 
  ggplot(aes(x = genre, y = mean_gamma, fill = as.factor(topic))) + 
  geom_col(position = "stack") + 
  geom_text(aes(label = topic), position = position_stack(vjust = 0.5)) + 
  theme(legend.position = "None") + 
  theme(axis.text.x = element_text(angle = 90))
```

Projection

```{r}
gamma_matrix <- gamma20 %>% 
  pivot_wider(names_from = topic, values_from = gamma) 
  #scale()

mtrx <- gamma_matrix %>% 
  select(-document) 
  
dim(mtrx)

u <- umap(mtrx)

dat <- tibble(x = u$layout[,1],
       y = u$layout[,2],
       document = gamma_matrix$document) %>% 
  mutate(genre = str_remove(document, "___.*?$"))
  
unique(dat$genre)

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Iamb_песня", "Iamb_песня", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Trochee_песня", "Trochee_песня", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Trochee_баллада", "Trochee_баллада", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Iamb_баллада", "Iamb_баллада", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Iamb_элегия", "элегия", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(genre_lbl = ifelse(genre == "Iamb_басня", "басня", "другое")) %>% 
  ggplot(aes(x, y, color = genre_lbl)) + 
  geom_point(size = 4, alpha = 0.6) + 
  # geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")

dat %>% 
  mutate(meter = str_extract(genre, "^\\w+_")) %>% 
  ggplot(aes(x, y, color = meter)) + 
  geom_point(size = 3, alpha = 0.6) + 
  #geom_text(aes(label = genre)) + 
  labs(title = "topic model of 20 topics, individual texts")
```
