---
title: "04_3_networks"
format: md
editor: visual
---

# 4.2. Networks building

## load pckg

```{r}
library(tidyverse)

# networks
library(igraph)
library(ggraph)
library(ggrepel)

# basic colouring and layout options
library(wesanderson)
library(patchwork)
theme_set(theme_minimal())
```

## load data & fn

```{r}
# load model output
load("../../data/ch4/lda75_output.Rda")

# load function for edges calculation
source("04_fn_calculate_edges.R")

# function to extract topic lables:
get_topic_labels = function(x, n_labels = 10) {
  
  #takes beta-matrix as an input
  top_terms = x %>%
    group_by(topic) %>%
    top_n(20, beta) %>%
    ungroup() %>%
    arrange(topic, -beta)
  
  topic_labels = top_terms %>%
    group_by(topic) %>%
    top_n(n_labels, beta) %>%
    summarise(label=paste(term, collapse=" ")) %>%
    mutate(label = paste(topic, label, sep="_"))
  
  return(topic_labels)
}

# graph viz fn
# function for network visualisation: 
# taken as input net, meter as a string & colour palette value
network <- function(network, meter_value, palette_v) { 
  ggraph(network, layout = "stress") +
    geom_edge_fan(aes(color = meter,
                      filter = meter %in% c(meter_value)
                      #,
                      #width = N_connections
                     ),
                      alpha = 0.6, width = 1) +
    geom_node_point() +
    #geom_node_text(aes(label=idn), 
    #               hjust=0.1, 
    #               vjust=-0.4, 
    #               size=3, 
    #               color="grey50") +
    theme_void() + 
    theme(strip.text = element_text(size = 12)) + 
    scale_edge_color_manual(values = palette_v, aesthetics = "edge_colour") #+ 
    #theme(legend.position = "None")
}

network_compare <- function(network, meter_value, palette_v) {
  ggraph(network, layout = "kk") +
    # one layer for edges which are unique for each corpus (RNC or Periodicals)
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Unique edge", 
                      width = n), 
                      alpha = 0.4) +
    
    # second layer for intersected edges
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Both corpora", 
                      width = n), 
                      alpha = 1) + 
    
    geom_node_text(aes(label=idn), 
                   hjust=0.1, 
                   vjust=-0.4, 
                   size=3, 
                   color="grey50") +
    
    geom_node_point() +
    theme_void() + 
    theme(strip.text = element_text(size = 18)) +
    facet_wrap(~corpus_fullname, 
               scales="free_x", 
               drop=T,
               ncol = 2) + 
    scale_edge_color_manual(values = palette_v) + 
    #labs(title = meter_value) + 
    theme(legend.position = "None")
}




gamma <- gamma %>% 
  rename(author = first_line)

glimpse(gamma)

```

### extract topic labels

```{r}
topic_labels <- get_topic_labels(beta, n_labels = 5)
head(topic_labels)

# write.csv(topic_labels, file = "data/topic_labels.csv")
```

# demo plot

Calculate upper 5% of distribution

```{r}
summary(gamma$gamma)
quantile(gamma$gamma, probs = c(0.05, 0.5, 0.75, 0.95))
quantile_95 <- quantile(gamma$gamma, probs = 0.95)[[1]]
quantile_95
```

Extract data for one poem & create the lineplot

```{r}
t <- gamma %>% 
  filter(index == "M_P_1733" & gamma > quantile_95) %>% 
  left_join(topic_labels, by = "topic")

t


# Line plot
demo_lineplot <- gamma %>% 
    filter(index == "M_P_1733") %>% 
    ungroup() %>% 
    ggplot(aes(x = topic, y = gamma)) + 
        geom_line() + 
        
        # threshold line
        geom_hline(yintercept = quantile_95, 
                   linetype = 5,
                   linewidth = 1,
                   colour = wes_palette("Darjeeling1")[2]) + 
        
        geom_point(data = gamma %>% filter(index == "M_P_1733" & gamma > quantile_95), 
                   size = 2) + 
  
        geom_label_repel(data = t %>% filter(topic == "29"),
                   aes(label = label ),
                   nudge_y = 0.025,
                   nudge_x = -0.5
                  ) + 
        geom_label_repel(data = t %>% filter(topic == "36"),
                   aes(label = label ),
                   nudge_y = 0.055,
                   nudge_x = 15
                  ) + 
        geom_label_repel(data = t %>% filter(!topic %in% c("29", "36")),
                   aes(label = label ),
                   nudge_y = 0.02,
                   nudge_x = 24
                  ) + 
        
        labs(x = "Топик", y = "Вероятность топика") + 
        expand_limits(x = 80, y = 0.26) + 
        scale_x_continuous(breaks = seq(5, 70, 5)) +
        scale_y_continuous(breaks = seq(0, 0.25, 0.05)) + 
        theme(axis.text = element_text(size = 14),
             axis.title = element_text(size = 16))

demo_lineplot
```

```{r, eval=FALSE}
ggsave("plots/demo_lineplot.png", plot = last_plot(), dpi = 300,
        bg = "white", width = 8, height = 6)
```

Demo - graph

```{r}
t <- gamma %>% 
  filter(index == "M_P_1733") 

demo_edges <- compute_edges(t, time_slice = 5)

demo_edges <- demo_edges %>% 
  ungroup() %>% 
  select(source, target)

demo_nodes <- tibble(source = unique(c(demo_edges$source, demo_edges$target)),
                     idn = str_extract(source, "^\\d+"))

demo_net <- graph_from_data_frame(demo_edges, demo_nodes, directed = F)

demo_graph <- ggraph(demo_net, "stress") + 
    geom_edge_fan(width = 1) + 
    geom_node_point(colour = wes_palette("Darjeeling1")[2], size = 14) + 
    geom_node_text(aes(label = idn), size = 8, colour = "white") + 
    scale_x_continuous(expand = c(0,0.7)) + 
    scale_y_continuous(expand = c(0, 0.7))

demo_graph
```

Combine two graphs with patchwork

```{r, eval=FALSE}
layout <- "
AAAAAAAA###
AAAAAAAABBB
AAAAAAAABBB
AAAAAAAA###
"

demo_lineplot + demo_graph + plot_layout(design = layout)

ggsave(filename = "plots/demo.png", plot = last_plot(),
       height = 7, width = 10, bg = "white", dpi = 300)
```

# RNC

Select corpus

```{r}

# prepare gamma data
gamma_rnc <- gamma %>% 
    # select ONLY RNC connections & topics
    filter(corpus == "N") 
    # add index for create_edges function
    # mutate(index = paste0(corpus, "_", id)) 
```

## Create edges

### compute edges

```{r}
edges_raw <- compute_edges(gamma_rnc,
                           gamma_thresh = 0.05,
                           time_slice = 5)

head(edges_raw)
```

### calc top meters

```{r}
# select top meters
meter_counts <- gamma %>% 
  mutate(year_span = floor(as.numeric(year)/5)*5) %>% 
  rename("meter" = "formula") %>% 
  filter(!str_detect(meter, "other")) %>% 
  group_by(year_span, meter) %>% 
  count(sort = T) %>% 
  ungroup() %>% 
  filter(n > 10 & year_span != 1850)

head(meter_counts)
```

```{r}
# group meter counts in a variable
top_meters <- meter_counts %>% 
  group_by(meter) %>%
  summarise(total = sum(n)) %>% 
  arrange(desc(total))

head(top_meters, 15)
```

### create links

```{r}
# create links
links <- edges_raw %>% 
  mutate(meter = formula) %>%
  # filter out only 8 most present meters
  filter(meter %in% top_meters$meter[1:8]) %>% 
  # group and count edges
  group_by(slice, meter, corpus) %>% 
  count(slice, meter, edge_id, source, target, sort = T) %>% 
  # filter non-frequent edges
  filter(n > 2) %>% 
  ungroup() 

# quick check
head(links)
unique(links$meter)     
```

### create edgelist

```{r}
edgelist <- links %>% 
  select(source, target, n, meter, slice, corpus) %>% 
  mutate(width = n/10) %>% 
  filter(slice != 1850) %>% 
  rename(N_connections = n) %>% 
  mutate(facet_title = slice)

nodelist <- tibble(source = unique(c(links$target, links$source))) %>% 
  mutate(idn = as.numeric(str_replace(source, "^([0-9].*?)_.*", "\\1"))) 

head(edgelist)
head(nodelist) 
nrow(nodelist)
```

## create network

```{r}
net <- graph_from_data_frame(d = edgelist, vertices = nodelist, directed = F)
net
```

```{r}
unique(edgelist$meter)
```

### all RNC viz (check)

Meters without Iamb-4

```{r}
all_nkrja <- network(net, c("iamb_6", "iamb_free", "iamb_4", 
                            "trochee_4"), 
                     c(wes_palette("Darjeeling1")[2], 
                       wes_palette("Darjeeling1")[4], 
                       wes_palette("Moonrise3")[1],
                       wes_palette("Darjeeling1")[1])) 
                

all_nkrja + facet_wrap(~slice, 
                        scales="free_x", 
                        drop=T,
                        ncol = 5) + 
    labs(edge_colour = "Meter") + 
    theme(strip.text = element_text(size = 16),
         legend.text = element_text(size = 14), 
         legend.title = element_text(size = 16),
         panel.spacing = unit(1.4, "lines"),
         legend.position = "bottom")
        
```

All without Iamb-4

```{r}
all_nkrja <- network(net, c("iamb_6", "iamb_free", #"iamb_4", 
                            "trochee_4"), 
                     c(wes_palette("Darjeeling1")[4], 
                       wes_palette("Moonrise3")[1],
                       #wes_palette("Darjeeling1")[3], 
                       wes_palette("Darjeeling1")[1])) 
                

all_nkrja + facet_wrap(~slice, 
                        scales="free_x", 
                        drop=T,
                        ncol = 5) + 
    labs(edge_colour = "Meter") + 
    theme(strip.text = element_text(size = 16),
         legend.text = element_text(size = 14), 
         legend.title = element_text(size = 16),
         panel.spacing = unit(1.4, "lines"),
         legend.position = "bottom")
```

### iamb-4

```{r}
iamb_4 <- network(net, c("iamb_4"), wes_palette("Darjeeling1")[2])
    
iamb_4 + facet_wrap(~slice, 
                 scales="free_x", 
                 drop=T,
                 ncol = 5) + 
    theme(legend.position = "None",
         strip.text = element_text(size = 16),
         legend.text = element_text(size = 14), 
         legend.title = element_text(size = 16))
```

### iamb-6

```{r}
iamb_6 <- network(net, c("iamb_6"), wes_palette("Darjeeling1")[4])
iamb_6 + facet_wrap(~slice, 
                 scales="free_x", 
                 drop=T,
                 ncol = 5) + 
    theme(legend.position = "None",
         strip.text = element_text(size = 16),
         legend.text = element_text(size = 14), 
         legend.title = element_text(size = 16))
```

### trochee-4

```{r}
trochee_4 <- network(net, c("trochee_4"), wes_palette("Darjeeling1")[1])
trochee_4 + facet_wrap(~slice, 
                 scales="free_x", 
                 drop=T,
                 ncol = 5) + 
    theme(legend.position = "None",
         strip.text = element_text(size = 16),
         legend.text = element_text(size = 14), 
         legend.title = element_text(size = 16))
```

## Network stats

### density

Calculate network density taking separately each time slice and each meter. The density of a graph is the ratio of the number of edges and the number of possible edges.

```{r}
density_vector <- function(formula) {
    densities <- vector()
    e1 <- NULL
    for (i in 1:length(unique(edgelist$slice))) {
        e1 <- edgelist %>% 
            filter(meter == formula & slice == unique(edgelist$slice)[i] & corpus == "N")

            net_test <- graph_from_data_frame(d = e1, vertices = nodelist, directed = F)

            densities[i] <- edge_density(net_test, loops = F)
    }
    densities
}
```

```{r}
length(unique(edgelist$slice))
```

```{r}
density_table <- tibble(meter = c(rep("iamb_4", 15), rep("iamb_6", 15), 
                 rep("iamb_free", 15), rep("trochee_4", 15)),
      slice = rep(unique(edgelist$slice), 4),
      density = round(c(density_vector("iamb_4"),
                       density_vector("iamb_6"),
                       density_vector("iamb_free"), 
                       density_vector("trochee_4")), 3)) %>% 
    arrange(desc(-slice)) 

density_table %>% 
    # pivot for easier reading
    pivot_wider(names_from = slice, values_from = density)
```

```{r}
summary(density_table$density)

density_table %>% 
    ggplot(aes(x = meter, y = density, fill = meter)) + geom_boxplot() + 
    scale_fill_manual(values = c(wes_palette("Darjeeling1")[2], 
                                wes_palette("Darjeeling1")[4],
                                wes_palette("Moonrise3")[1],
                                wes_palette("Darjeeling1")[1]))
```

# RNC vs Corpus-1835

```{r}
glimpse(gamma)
```

Check topic prob distribution

```{r, eval=FALSE}
topic_probs <- gamma %>%
  group_by(topic) %>%
  summarise(avg_gamma = mean(gamma)) %>% 
  ungroup() %>% 
  arrange(desc(avg_gamma))

print("Most probable topics (avg)")

head(topic_probs, 10)

topic_probs %>% 
  ggplot(aes(reorder(topic,-avg_gamma), avg_gamma)) + geom_col()

gamma %>% 
  mutate(year_span = floor(as.numeric(year)/5)*5) %>% 
  group_by(year_span, topic) %>% 
  summarise(gamma_avg = mean(gamma)) %>% 
  top_n(10) %>% 
  ggplot(aes(x = year_span, y = gamma_avg, fill = as.factor(topic))) + geom_col()
```

## 1830s: No-sampling data

```{r}
# glimpse(gamma)

gamma1830_ns <- gamma %>% 
  filter(year > 1829 & year < 1841) %>% 
  mutate(formula = ifelse(formula == "iamb_other", "iamb_free", formula))

gamma1830_ns %>% 
  select(index, corpus) %>% 
  distinct() %>% 
  count(corpus)

edges_1830_ns <- compute_edges(gamma1830_ns,
                           gamma_thresh = 0.05,
                           time_slice = 5)

head(edges_1830_ns)
```

```{r}

top_meters <- c("iamb_4", "iamb_free", "trochee_4", "iamb_6")


links_1830_ns <- edges_1830_ns %>% 
  mutate(meter = formula) %>%
  # filter out only 8 most interesting meters
  filter(meter %in% top_meters) %>% 
  # group and count edges
  group_by(meter, corpus) %>% 
  count(meter, edge_id, source, target, sort = T) %>% 
  # filter non-frequent edges
  filter(n > 2) %>% 
  ungroup() 

# quick check
head(links_1830_ns)
```

```{r}
edges_rnc <- links_1830_ns %>% 
    mutate(meter_edge = paste0(meter, "__", edge_id)) %>% 
    filter(corpus == "N") %>% 
    pull(meter_edge)

edges_m <- links_1830_ns %>% 
    mutate(meter_edge = paste0(meter, "__", edge_id)) %>% 
    filter(corpus == "M") %>% 
    pull(meter_edge)

head(edges_rnc)
head(edges_m)

edges_intersection <- intersect(edges_rnc, edges_m)
# print("Intersection between built edges:")
# head(edges_intersection)

edges_1830_ns %>% 
  ungroup() %>% 
  select(index, corpus) %>% 
  distinct() %>% 
  count(corpus)

print(paste("Number of edges in C-1835 (M):", length(edges_m)))
print(paste("Number of edges in RNC:", length(edges_rnc)))
print(paste("Number of intersections in edges:",length(edges_intersection) ))

edges_1830_ns %>% 
  filter(formula %in% top_meters) %>% 
  group_by(corpus, formula) %>% 
  count() %>% 
  arrange(desc(formula))
```

```{r}
edgelist_ns <- links_1830_ns %>% 
    mutate(meter_edge = paste0(meter, "__", edge_id),
           # create a column indicating if an edge is present in both corpora
          group = ifelse(meter_edge %in% edges_intersection, 
                         "Both corpora", 
                         "Unique edge")) %>% 
    select(source, target, n, meter, corpus, group) %>% 
    mutate(width = n/10,
          corpus_fullname = ifelse(corpus == "M", "Корпус-1835", "НКРЯ"))

nodelist_ns <- tibble(source = unique(c(links_1830_ns$target, links_1830_ns$source))) %>% 
  mutate(idn = as.numeric(str_replace(source, "^([0-9].*?)_.*", "\\1"))) 

# head(edgelist_ns)
# head(nodelist_ns) 
# nrow(nodelist_ns)
```

### graph

```{r}
net1830_ns <- graph_from_data_frame(d = edgelist_ns, vertices = nodelist_ns, directed = F)
net1830_ns
```

```{r}
network_compare(net1830_ns, "iamb_4", c(wes_palette("Darjeeling1")[2], wes_palette("Royal1")[1]))

# ggsave("plots/Fig_4-2-4_iamb4.png", plot = last_plot(), bg = "white",
#       dpi = 300, width = 8, height = 4)
```

```{r}
network_compare(net1830_ns, "iamb_6", c(wes_palette("Darjeeling1")[3], wes_palette("Royal1")[1]))

# ggsave("plots/Fig_4-2-4_iamb6.png", plot = last_plot(), bg = "white",
#       dpi = 300, width = 8, height = 4)
```

```{r}
network_compare(net1830_ns, "trochee_4", c(wes_palette("Darjeeling1")[1], wes_palette("Royal1")[1]))

# ggsave("plots/Fig_4-2-4_trochee4.png", plot = last_plot(), bg = "white",
#       dpi = 300, width = 8, height = 4)
```

## Density - corpus-1835

```{r}
# glimpse(edgelist_ns)

# filter only corpus-1835
x <- edgelist_ns %>% filter(corpus == "M")
meters <- c("iamb_4", "trochee_4", "iamb_6")  # take only i4, i6, t4 -- three meters in total


# return densities for each meter in a loop (corpus-35)
density_35 <- NULL

for (i in 1:length(meters)) {
  e_35 <- edgelist_ns %>% filter(meter == meters[i] & corpus == "M")
  net_test <- graph_from_data_frame(d = e_35, vertices = nodelist_ns, directed = F)
  density_35[i] <- edge_density(net_test, loops = F)
}

density_35

# return densities for each meter in a loop (RNC 30s)
density_rnc <- NULL

for (i in 1:length(meters)) {
  e_35 <- edgelist_ns %>% filter(meter == meters[i] & corpus == "N")
  net_test <- graph_from_data_frame(d = e_35, vertices = nodelist_ns, directed = F)
  density_rnc[i] <- edge_density(net_test, loops = F)
}

density_rnc

rm(e_35, net_test)
```

Compare network densities & n of edges in comparison to the sample size (n of poems)

```{r}
# glimpse(gamma1830_ns)

# calculate number of texts in each meter in each corpus
n_texts <- gamma1830_ns %>% 
  select(index, formula, corpus) %>% 
  distinct() %>% 
  filter(formula %in% meters) %>% 
  count(corpus, formula) %>% 
  mutate(id = paste0(corpus, "__", formula))

# calculate number of edges in each meter in each corpus
n_edges <- edgelist_ns %>% 
  count(corpus, meter) %>% 
  rename(n_edges = n) %>% 
  mutate(id = paste0(corpus, "__", meter))

# summarise results in a table
tibble(
  meter = meters,
  density_35 = density_35,
  density_rnc = density_rnc
) %>% 
  pivot_longer(!meter) %>% 
  rename(corpus = name,
         density = value) %>% 
  mutate(corpus = ifelse(corpus == "density_35", "M", "N"),
         id = paste0(corpus, "__", meter)) %>% 
  left_join(n_edges %>% select(id, n_edges), 
            by = "id") %>% 
  left_join(n_texts %>% select(id, n), 
            by = "id") %>% 
  select(-id) %>% 
  rename(n_texts = n) %>% 
  mutate(n_edges_texts_ratio = round(n_edges/n_texts, 3)) 
```

## Sampling & stable edges calculation

Outline:

-   problem 1: inequality in author-text ratio

-   problem 2: inequality in texts in two corpora

-   idea:

    -   take X random samples from each author in a corpus --------- say, max 20

    -   take Y texts from each corpus --------- say, 1000

    -   compute edges

    -   store edges

    -   summarise the most (?) stable edges and visualise them only --------- 50% of trials?

    -   use that for further vis & community search

```{r}
# get both corpora & sample overrepresented authors
glimpse(gamma)

# upd a variable for meters of interest
top_meters <- c("iamb_4", "trochee_4", "iamb_6")

# count authors
n_texts <- gamma %>% 
  filter(formula %in% top_meters) %>% # filter only the poems of selected meters
  select(index, author) %>% 
  distinct() %>% 
  count(author, sort = T) 

summary(n_texts$n) # median 4, mean 18

# var for unique texts & authors
texts_authors <- gamma %>% 
  filter(formula %in% top_meters) %>% # filter only the poems of selected meters
  select(index, author, formula) %>% 
  distinct() 

# get list of authors with more than 30 poems
large_authors <- n_texts %>% 
  filter(n > 40) # authors with at least double corpus from mean

head(large_authors$author)
tail(large_authors$author)
length(large_authors$author) 
```

Collect all texts by authors with small samples

```{r}
gamma_small <- gamma %>% 
  filter(formula %in% top_meters) %>%
  filter(!author %in% large_authors$author)
```

### Sampling - loop

```{r, eval=FALSE}

# empty variables to store the unique edges of each trial
m_edgeid_list <- NULL
rnc_edgeid_list <- NULL
m <- NULL

m_edgemeter_list <- NULL
rnc_edgemeter_list <- NULL

for (j in 1:length(top_meters)) {
  
  m <- top_meters[j]

  for (i in 1:100) {
    
    # SAMPLING I
    # sample texts by overrepresented authors
    large_sampled <- texts_authors %>% 
      # select only indexes of poems from overrepresented authors
      filter(author %in% large_authors$author) %>% 
      group_by(author) %>% 
      sample_n(20) %>% # sample 20 poems
      ungroup() %>% 
      select(index) %>% pull()
    
    # check
    # head(large_sampled)
    # length(large_sampled)
    
    # extract gamma values for sampled texts
    gamma_large <- gamma %>% 
      filter(index %in% large_sampled)
    
    # merge sampled & short data
    gamma_sampled <- rbind(gamma_small, gamma_large)
    
    # head(gamma_sampled)
    
    # ------------------------------------------------
    # SAMPLING II - 1000 random poems from both corpora
    # sample 1000 poems from each corpus & write id
    corpus_samples_id <- gamma_sampled %>% 
      select(index, corpus) %>% 
      distinct() %>%
      group_by(corpus) %>% 
      sample_n(1000) %>% 
      ungroup() %>% 
      select(index) %>% pull()
    
    # sample by id gamma values for 2k sampled poems
    gamma_double_sampled <- gamma_sampled %>% filter(index %in% corpus_samples_id)
    
    # create edges
    edges_sampled <- compute_edges(gamma_double_sampled,
                               gamma_thresh = 0.05,
                               time_slice = 5)
    
    head(edges_sampled)
    
    # retrieve & write in the list edges from Margianls corpus
    m_edgeid_list[[i]] <- edges_sampled %>% 
      ungroup() %>% 
      filter(corpus == "M" & formula == top_meters[j]) %>% 
      select(edge_id) %>% 
      distinct() %>% pull
    
    # retrieve & write in the list edges from RNC corpus
    rnc_edgeid_list[[i]] <- edges_sampled %>% 
      ungroup() %>% 
      filter(corpus == "N" & formula == top_meters[j]) %>% 
      select(edge_id) %>% 
      distinct() %>% pull
    
  
  }
  
  m_edgemeter_list[[j]] <- unlist(m_edgeid_list) # all edges in a selected meter
  rnc_edgemeter_list[[j]] <- unlist(rnc_edgeid_list)

}

# as.data.frame(table(unlist(x)))
```

```{r, eval=FALSE}
# m_edgeid <- as.data.frame(table(unlist(m_edgeid_list))) 
# rnc_edgeid <- as.data.frame(table(unlist(rnc_edgeid_list)))

m_edgeid_iamb4 <- as.data.frame(table(m_edgemeter_list[[1]]))
rnc_edgeid_iamb4 <- as.data.frame(table(rnc_edgemeter_list[[1]]))

m_edgeid_iamb4
rnc_edgeid_iamb4

# m_edgeid %>% 
#   rename(edge = Var1,
#          n = Freq) %>% 
#   arrange(desc(n))

summary(m_edgeid_iamb4$Freq)
# m_edgeid %>% 
#   ggplot(aes(x = Freq)) + geom_density() + 
#   geom_vline(xintercept = 90, colour = "darkgreen") + 
#   geom_vline(xintercept = 81.45, colour = "pink") + 
#   geom_vline(xintercept = c(71, 98), colour = "lightblue", lty = 2)

summary(rnc_edgeid_iamb4$Freq)

m_edgeid_iamb4 %>% 
  mutate(corpus = "M") %>% 
  rbind(rnc_edgeid_iamb4 %>% mutate(corpus = "RNC")) %>% 
  #ggplot(aes(y = Freq, group = corpus)) + geom_boxplot()
  ggplot(aes(x = Freq, group = corpus, colour = corpus)) + geom_density() + 
  
  geom_vline(xintercept = 78, colour = "green", lty = 4) + # median m
  geom_vline(xintercept = 71.13, colour = "green", lty = 2) + # mean m
  geom_vline(xintercept = c(56, 93), colour = "green", lty = 3) + # 1st to 3rd q

  geom_vline(xintercept = 68, colour = "blue", lty = 4) + # median
  geom_vline(xintercept = 62.43, colour = "blue", lty = 2) + # mean
  geom_vline(xintercept = c(43, 86), colour = "blue", lty = 3) +  # 1st to 3rd q
  scale_color_manual(values = c("green", "blue")) + 
  labs(title = "Iamb-4")



```

```{r, eval=FALSE}
m_edgeid_iamb6 <- as.data.frame(table(m_edgemeter_list[[3]]))
rnc_edgeid_iamb6 <- as.data.frame(table(rnc_edgemeter_list[[3]]))

m_edgeid_iamb6
rnc_edgeid_iamb6


summary(m_edgeid_iamb6$Freq)

summary(rnc_edgeid_iamb6$Freq)

m_edgeid_iamb6 %>% 
  mutate(corpus = "M") %>% 
  rbind(rnc_edgeid_iamb6 %>% mutate(corpus = "RNC")) %>% 
  #ggplot(aes(y = Freq, group = corpus)) + geom_boxplot()
  ggplot(aes(x = Freq, group = corpus, colour = corpus)) + geom_density() + 
  
  geom_vline(xintercept = 51, colour = "green", lty = 4) + # median m
  geom_vline(xintercept = 46.82, colour = "green", lty = 2) + # mean m
  geom_vline(xintercept = c(24, 64), colour = "green", lty = 3) + # 1st to 3rd q

  geom_vline(xintercept = 45, colour = "blue", lty = 4) + # median
  geom_vline(xintercept = 45.99, colour = "blue", lty = 2) + # mean
  geom_vline(xintercept = c(21, 67), colour = "blue", lty = 3) +  # 1st to 3rd q
  scale_color_manual(values = c("green", "blue")) + 
  labs(title = "Iamb-6")
```

```{r, eval=FALSE}
m_edgeid_tr4 <- as.data.frame(table(m_edgemeter_list[[2]]))
rnc_edgeid_tr4 <- as.data.frame(table(rnc_edgemeter_list[[2]]))

m_edgeid_tr4
rnc_edgeid_tr4


summary(m_edgeid_tr4$Freq)

summary(rnc_edgeid_tr4$Freq)

m_edgeid_tr4 %>% 
  mutate(corpus = "M") %>% 
  rbind(rnc_edgeid_tr4 %>% mutate(corpus = "RNC")) %>% 
  #ggplot(aes(y = Freq, group = corpus)) + geom_boxplot()
  ggplot(aes(x = Freq, group = corpus, colour = corpus)) + geom_density() + 
  
  geom_vline(xintercept = 58, colour = "green", lty = 4) + # median m
  geom_vline(xintercept = 56.89, colour = "green", lty = 2) + # mean m
  geom_vline(xintercept = c(41, 78), colour = "green", lty = 3) + # 1st to 3rd q

  geom_vline(xintercept = 37, colour = "blue", lty = 4) + # median
  geom_vline(xintercept = 36.35, colour = "blue", lty = 2) + # mean
  geom_vline(xintercept = c(13, 54), colour = "blue", lty = 3) +  # 1st to 3rd q
  scale_color_manual(values = c("green", "blue")) + 
  labs(title = "Trochee-4")
```

```{r, eval=F}
m_alledges <- m_edgeid_iamb4 %>% 
  mutate(meter = "Iamb_4") %>% 
  rbind(m_edgeid_iamb6 %>% mutate(meter = "Iamb_6")) %>% 
  rbind(m_edgeid_tr4 %>% mutate(meter = "Trochee_4"))

m_alledges %>% count(meter)

rnc_alledges <- rnc_edgeid_iamb4 %>% 
  mutate(meter = "Iamb_4") %>% 
  rbind(rnc_edgeid_iamb6 %>% mutate(meter = "Iamb_6")) %>% 
  rbind(rnc_edgeid_tr4 %>% mutate(meter = "Trochee_4"))

rnc_alledges %>% count(meter)

all_edges <- m_alledges %>% mutate(corpus = "M") %>% 
  rbind(rnc_alledges %>% mutate(corpus = "RNC"))


```

```{r, eval=FALSE}
saveRDS(all_edges, file = "../../data/ch4/edge_stability.Rds")
```

```{r}
all_edges <- readRDS(file = "../../data/ch4/edge_stability.Rds")

# create a variable for meters of interest
top_meters <- c("iamb_4", "trochee_4", "iamb_6")

all_edges %>% 
  ggplot(aes(x = meter, y = Freq, , fill = corpus)) + geom_boxplot()
```

## Summaries

### Iamb-4

```{r}
# summary for corpus-1835
all_edges %>% filter(meter == "Iamb_4" & corpus == "M") %>% summary()

# summary for RNC
all_edges %>% filter(meter == "Iamb_4" & corpus == "RNC") %>% summary()

# calculate number of edges to plot in case of selecting ones above mean
all_edges %>% 
  filter(meter == "Iamb_4" & corpus == "M") %>% 
  filter(Freq > 71) %>% nrow() # filter starting from mean?

all_edges %>% 
  filter(meter == "Iamb_4" & corpus == "RNC") %>% 
  filter(Freq > 62) %>% nrow()

# retrieve stable edges for both corpora 
stable_edges_i4_m <- all_edges %>% 
  filter(meter == "Iamb_4" & corpus == "M") %>% 
  filter(Freq > 71) %>% select(Var1) %>% pull()

stable_edges_i4_n <- all_edges %>% 
  filter(meter == "Iamb_4" & corpus == "RNC") %>% 
  filter(Freq > 62) %>% select(Var1) %>% pull()
```

Create edgelist from all corpus (no chronological or other limits)

```{r}
edges_all <- compute_edges(gamma, time_slice = 5)
head(edges_all)

```

Retrieve stable edges for both corpora

```{r}
links_all <- edges_all %>% 
  
  # select only 1830s 
  filter(slice %in% c(1830, 1835)) %>% 
  
  mutate(meter = formula) %>%
  # filter out only 8 most interesting meters
  filter(meter %in% top_meters) %>% 
  # group and count edges
  group_by(meter, corpus) %>% 
  count(meter, edge_id, source, target, sort = T) %>% 
  # filter non-frequent edges
  filter(n > 2) %>% 
  ungroup() 

head(links_all)

edges_rnc <- links_all %>% 
    filter(corpus == "N" & meter == "iamb_4") %>% 
    filter(edge_id %in% stable_edges_i4_n) 

edges_m <- links_all %>% 
    filter(corpus == "M" & meter == "iamb_4") %>% 
    filter(edge_id %in% stable_edges_i4_n) 

head(edges_rnc)

nrow(edges_rnc) # total number of edges in the rnc network
nrow(edges_m) # total number of edges in the corpus-1835 network
edges_intersection_i4 <- intersect(edges_rnc$edge_id, edges_m$edge_id)
length(edges_intersection) # number of intersected edges


links_i4 <- rbind(edges_rnc, edges_m)
head(links_i4)

edgelist_i4 <- links_i4 %>% 
    mutate(group = ifelse(edge_id %in% edges_intersection, 
                         "Both corpora", 
                         "Unique edge")) %>% 
    select(source, target, n, meter, corpus, group) %>% 
    mutate(width = n/10,
          corpus_fullname = ifelse(corpus == "M", "Корпус-1835", "НКРЯ"))

head(edgelist_i4)
```

```{r, eval=FALSE}
net_comp_i4 <- graph_from_data_frame(d = edgelist_i4, vertices = nodelist_ns, directed = F)
net_comp_i4

network_compare(net_comp_i4, "iamb_4", c(wes_palette("Darjeeling1")[2], wes_palette("Royal1")[1]))
```

### iamb-6

Select stable edges

```{r}
# summary for corpus-1835
all_edges %>% filter(meter == "Iamb_6" & corpus == "M") %>% summary()

# summary for RNC
all_edges %>% filter(meter == "Iamb_6" & corpus == "RNC") %>% summary()

# calculate number of edges to plot in case of selecting ones above mean
all_edges %>% 
  filter(meter == "Iamb_6" & corpus == "M") %>% 
  filter(Freq > 46) %>% nrow() # filter starting from mean

all_edges %>% 
  filter(meter == "Iamb_6" & corpus == "RNC") %>% 
  filter(Freq > 45) %>% nrow()

# retrieve stable edges for both corpora 
stable_edges_i6_m <- all_edges %>% 
  filter(meter == "Iamb_6" & corpus == "M") %>% 
  filter(Freq > 46) %>% select(Var1) %>% pull()

stable_edges_i6_n <- all_edges %>% 
  filter(meter == "Iamb_6" & corpus == "RNC") %>% 
  filter(Freq > 45) %>% select(Var1) %>% pull()
```

Create edgelists & filter only 1830s texts

```{r}
# head(links_all) # this variable is created for iamb-4 already

edges_rnc <- links_all %>% 
    filter(corpus == "N" & meter == "iamb_6") %>% 
    filter(edge_id %in% stable_edges_i6_n) 

edges_m <- links_all %>% 
    filter(corpus == "M" & meter == "iamb_6") %>% 
    filter(edge_id %in% stable_edges_i6_n) 

head(edges_rnc)

nrow(edges_rnc) # total number of edges in the rnc network
nrow(edges_m) # total number of edges in the corpus-1835 network
edges_intersection_i6 <- intersect(edges_rnc$edge_id, edges_m$edge_id)
length(edges_intersection) # number of intersected edges


links_i6 <- rbind(edges_rnc, edges_m)
head(links_i6)

edgelist_i6 <- links_i6 %>% 
    mutate(group = ifelse(edge_id %in% edges_intersection, 
                         "Both corpora", 
                         "Unique edge")) %>% 
    select(source, target, n, meter, corpus, group) %>% 
    mutate(width = n/10,
          corpus_fullname = ifelse(corpus == "M", "Корпус-1835", "НКРЯ"))

head(edgelist_i6)
```

Create network & viz

```{r, eval=FALSE}
net_comp_i6 <- graph_from_data_frame(d = edgelist_i6, vertices = nodelist_ns, directed = F)
#net_comp_i6

network_compare(net_comp_i6, "iamb_6", c(wes_palette("Darjeeling1")[3], wes_palette("Royal1")[1]))
```

### trochee-4

Calculate most stable edges

```{r}
# summary for corpus-1835
all_edges %>% filter(meter == "Trochee_4" & corpus == "M") %>% summary()

# summary for RNC
all_edges %>% filter(meter == "Trochee_4" & corpus == "RNC") %>% summary()

# calculate number of edges to plot in case of selecting ones above mean
all_edges %>% 
  filter(meter == "Trochee_4" & corpus == "M") %>% 
  filter(Freq > 56) %>% nrow() # filter starting from mean

all_edges %>% 
  filter(meter == "Trochee_4" & corpus == "RNC") %>% 
  filter(Freq > 36) %>% nrow()

# retrieve stable edges for both corpora 
stable_edges_t4_m <- all_edges %>% 
  filter(meter == "Trochee_4" & corpus == "M") %>% 
  filter(Freq > 56) %>% select(Var1) %>% pull()

stable_edges_t4_n <- all_edges %>% 
  filter(meter == "Trochee_4" & corpus == "RNC") %>% 
  filter(Freq > 36) %>% select(Var1) %>% pull()
```

Create edgelist & select only 1830s

```{r}
# head(links_all) # this variable is created for iamb-4 already

edges_rnc <- links_all %>% 
    filter(corpus == "N" & meter == "trochee_4") %>% 
    filter(edge_id %in% stable_edges_t4_n) 

edges_m <- links_all %>% 
    filter(corpus == "M" & meter == "trochee_4") %>% 
    filter(edge_id %in% stable_edges_t4_n) 

head(edges_rnc)

nrow(edges_rnc) # total number of edges in the rnc network
nrow(edges_m) # total number of edges in the corpus-1835 network
edges_intersection_t4 <- intersect(edges_rnc$edge_id, edges_m$edge_id)
length(edges_intersection) # number of intersected edges


links_t4 <- rbind(edges_rnc, edges_m)
head(links_t4)

edgelist_t4 <- links_t4 %>% 
    mutate(group = ifelse(edge_id %in% edges_intersection, 
                         "Both corpora", 
                         "Unique edge")) %>% 
    select(source, target, n, meter, corpus, group) %>% 
    mutate(width = n/10,
          corpus_fullname = ifelse(corpus == "M", "Корпус-1835", "НКРЯ"))

head(edgelist_t4)
```

Network viz

```{r, eval=FALSE}
net_comp_t4 <- graph_from_data_frame(d = edgelist_t4, vertices = nodelist_ns, directed = F)
#net_comp_i6

network_compare(net_comp_t4, "trochee_4", c(wes_palette("Darjeeling1")[1], wes_palette("Royal1")[1]))
```

## comparison network (all)

Create network

```{r}
# bind together all edgelists (for all 3 meters)
edgelist_all_1830 <- rbind(edgelist_i4, edgelist_i6, edgelist_t4)

# create a network
net_comp <- graph_from_data_frame(edgelist_all_1830, vertices = nodelist_ns, directed = F)
```

### meter stats (d, n_union)

Statistics for each meter (for labels)

```{r}
# ------------- Densities ----------------
# fn to calculate network densities
density_vector <- function(edgelist, formula) {
    densities <- vector()
    e1 <- NULL
    for (i in 1:length(unique(edgelist$corpus))) {
        e1 <- edgelist %>% 
            filter(meter == formula & corpus == unique(edgelist$corpus)[i])

            net_test <- graph_from_data_frame(d = e1, vertices = nodelist_ns, directed = F)

            densities[i] <- edge_density(net_test, loops = F)
    }
    densities
}

densities <- tibble(
      corpus = c("N", "M"),
      iamb_4 = round(density_vector(edgelist_all_1830, "iamb_4"), 3),
      iamb_6 = round(density_vector(edgelist_all_1830, "iamb_6"), 3),
      trochee_4 = round(density_vector(edgelist_all_1830, "trochee_4"), 3),
      ) 

# ------------- Edges intersection ----------------
# create a list of intersected edges

n_intersections <- tibble(
    # create a tibble out of vector edges intersection
    edge = c(edges_intersection_i4, edges_intersection_i6, edges_intersection_t4),
    meter = c(rep("iamb_4", length(edges_intersection_i4)),
            rep("iamb_6", length(edges_intersection_i6)),
            rep("trochee_4", length(edges_intersection_t4)))
    ) %>% 
    # count n intersections
    count(meter, sort = T) %>% 
    rename(n_intersections = n)



# get statistics for each meter from the edgelist
meters_stats <- edgelist_all_1830 %>% 
    # count total number of connections
    #filter(meter %in% c("iamb_4", "iamb_6", "trochee_4")) %>% 
    group_by(meter, corpus) %>% 
    count(sort = F) %>% 
    rename(n_edges_total = n) %>% 

    # add data on densities
    unite("corpus_meter", corpus:meter, sep = "__")  %>% 
    left_join(densities %>% 
              pivot_longer(!corpus, names_to = "meter", values_to = "density") %>% 
              unite("corpus_meter", corpus:meter,  sep = "__"), 
             by = "corpus_meter") %>% 
    separate(corpus_meter, into = c("corpus", "meter"), sep = "__") %>% 

    # add column on number of intersections
    left_join(n_intersections, by = "meter") %>% 
    mutate(perc_intersected = round((n_intersections/n_edges_total)*100, 1))

# transform to labels
meters_stats <- meters_stats %>% 
    mutate(corpus_fullname = ifelse(corpus == "N", "НКРЯ", "Корпус-1835")) %>% 
    mutate(
        label = paste0("N связей = ", n_edges_total, 
                       "\nd = ", density, 
                       "\n% общих связей = ", perc_intersected))

meters_stats
```

```{r}
network_labels <- function(network, meter_value, palette_v) {
  ggraph(network, layout = "kk") +
    # one layer for edges which are unique for each corpus (RNC or Periodicals)
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Unique edge", 
                      width = n), 
                      alpha = 0.5) +
    
    # second layer for intersected edges
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Both corpora", 
                      width = n), 
                      alpha = 0.8) +
    
    geom_node_point() +
    theme_void() + 
    facet_wrap(~corpus_fullname, 
               scales="free_x", 
               drop=T,
               ncol = 2,
               labeller = as_labeller(facet_labels)) + 
    scale_edge_color_manual(values = palette_v) + 
    theme(legend.position = "None",
         strip.text = element_text(size = 18, hjust = 0), 
         plot.title = element_text(size = 22, hjust = 0, face = "bold"))
}
     
```

```{r}
labels_df <- meters_stats %>% 
    filter(meter == "iamb_4") 

facet_labels <- setNames(as.character(labels_df$label), labels_df$corpus_fullname)
                         
p_i4 <- network_labels(network = net_comp, 
                       meter_value = "iamb_4", 
                       palette_v = c(wes_palette("Darjeeling1")[2], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("4-ст. ямб") 

network_labels(network = net_comp, 
                       meter_value = "iamb_4", 
                       palette_v = c(wes_palette("Darjeeling1")[2], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("4-ст. ямб") + 
  # added the topic numbers to look into the topics
  geom_node_text(aes(label=idn), 
                   hjust=0.1, 
                   vjust=-0.4, 
                   size=3, 
                   color="grey20") 
```

```{r}
labels_df <- meters_stats %>% 
    filter(meter == "iamb_6") 

facet_labels <- setNames(as.character(labels_df$label), labels_df$corpus_fullname)
                         
p_i6 <- network_labels(network = net_comp, 
                       meter_value = "iamb_6", 
                       palette_v = c(wes_palette("Darjeeling1")[4], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("6-ст. ямб")

network_labels(network = net_comp, 
                       meter_value = "iamb_6", 
                       palette_v = c(wes_palette("Darjeeling1")[4], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("6-ст. ямб") + 
  geom_node_text(aes(label=idn), 
                   hjust=0.1, 
                   vjust=-0.4, 
                   size=3, 
                   color="grey20") 
```

```{r}
labels_df <- meters_stats %>% 
    filter(meter == "trochee_4") 

facet_labels <- setNames(as.character(labels_df$label), labels_df$corpus_fullname)
                         
p_t4 <- network_labels(network = net_comp, 
                       meter_value = "trochee_4", 
                       palette_v = c(wes_palette("Darjeeling1")[1], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("4-ст. хорей")

network_labels(network = net_comp, 
                       meter_value = "trochee_4", 
                       palette_v = c(wes_palette("Darjeeling1")[1], 
                                     wes_palette("Royal1")[1])) + 
  ggtitle("4-ст. хорей") + 
  geom_node_text(aes(label=idn), 
                   hjust=0.1, 
                   vjust=-0.4, 
                   size=3, 
                   color="grey20") 
```

### figure

```{r}
p_i4 / p_i6 / p_t4 + plot_annotation(
  title = "Корпус-1835            vs              НКРЯ",
  theme = theme(plot.title = element_text(size = 26, 
                                          face = "bold")))
```

```{r, eval=FALSE}
ggsave(file = "plots/Fig_4-0-0.png", plot = last_plot(),
      dpi = 300, width = 8, height = 16, bg = "white")
```

## old code

Check distribution in number of texts

```{r, eval = F}
# number of texts by author in corpus-35
gamma %>% 
  select(author, year, corpus, index) %>% 
  distinct() %>% 
  count(author, corpus, sort = T) %>% 
  filter(author != "" & corpus == "M")

# summary
gamma %>% 
  select(author, year, corpus, index) %>% 
  distinct() %>% 
  count(author, corpus, sort = T) %>% 
  filter(author != "" & corpus == "M") %>% summary


# number of texts by author in RNC
gamma %>% 
  select(author, year, corpus, index) %>% 
  distinct() %>% 
  count(author, corpus, sort = T) %>% 
  filter(author != "" & corpus == "N")

# distribution
gamma %>% 
  select(author, year, corpus, index) %>% 
  distinct() %>% 
  count(author, corpus, sort = T) %>% 
  filter(author != "" & corpus == "N") %>% summary
```

Select top authors - rnc

```{r, eval=FALSE}
n_texts_rnc <- gamma %>% 
  filter(corpus == "N") %>% 
  mutate(decade = floor(as.numeric(year)/5)*5) %>% 
  filter(decade %in% c(1830, 1835)) %>% 
  select(index) %>% distinct() %>% nrow()

rnc_authors <- gamma %>% 
    filter(corpus == "N") %>% 
    mutate(decade = floor(as.numeric(year)/5)*5) %>% 
    filter(decade %in% c(1830, 1835)) %>% 
    group_by(author) %>% 
    summarise(n_gamma = sum(n()),
             n_texts = n_gamma/75) %>% 
    arrange(desc(n_texts))

rnc_authors %>% 
    ungroup() %>%
    summarise(total_texts = sum(n_texts))

rnc_authors <- rnc_authors %>% 
    mutate(percentage = (n_texts/n_texts_rnc) *100)

head(rnc_authors, 20)
summary(rnc_authors$n_texts)
```

```{r, eval=FALSE}
# filter overpresented authors
top_authors <- rnc_authors %>% 
    filter(n_texts > 30) %>% select(author) # 19 authors

top_authors

# randomly select 30 texts by each author
sampled_id <- gamma %>% 
    filter(corpus == "N") %>% 
    # select slice
    filter(year > 1829 & year < 1840) %>%
    select(index, author) %>% 
    distinct() %>% 
    filter(author %in% top_authors$author) %>% 
    group_by(author) %>% 
    sample_n(30) %>% 
    ungroup() %>%
    select(-author)

# retrieve gamma values for samples for these authors
gamma_top <- inner_join(sampled_id, gamma, by = "index", multiple = "all")
```

Select top authors - corpus_1830

```{r, eval=FALSE}

m_authors <- gamma %>% 
    filter(corpus == "M" & author != "") %>% 
    mutate(decade = floor(as.numeric(year)/5)*5) %>% 
    filter(decade %in% c(1830, 1835)) %>% 
    group_by(author) %>% 
    summarise(n_gamma = sum(n()),
             n_texts = n_gamma/75) %>% 
    arrange(desc(n_texts))

m_authors %>% 
    ungroup() %>%
    summarise(total_texts = sum(n_texts))

m_authors <- m_authors %>% 
    mutate(percentage = n_texts/3739*100)

head(m_authors, 20)
summary(m_authors$n_texts)

m_top_authors <- m_authors %>% 
  filter(n_texts > 30) %>% select(author) # 30 authors

sampled_id_m <- gamma %>% 
    filter(corpus == "M") %>% 
    # select slice
    filter(year > 1829 & year < 1840) %>%
    select(index, author) %>% 
    distinct() %>% 
    filter(author %in% m_top_authors$author) %>% 
    group_by(author) %>% 
    sample_n(30) %>% 
    ungroup() %>%
    select(-author)

m_gamma_top <- inner_join(sampled_id_m, gamma, by = "index", multiple = "all")
```

Merging

```{r, eval=FALSE}
# select texts from RNC by non-prevalent authors
gamma_nontop <- gamma %>% 
    filter(corpus == "N" & !author %in% top_authors$author) %>% 
    filter(year > 1829 & year < 1840)

# retrieve all the gamma values for texts from periodicals
m_gamma_nontop <- gamma %>%
    filter(corpus == "M" & !author %in% m_top_authors$author) %>%
    filter(year > 1829 & year < 1840)

# merge the three together
gamma1830 <- rbind(gamma_top, gamma_nontop, 
                   m_gamma_top, m_gamma_nontop)

head(gamma1830)

print("Number of texts in each corpus after sampling:")
gamma1830 %>% 
    select(index, corpus) %>% 
    distinct() %>% 
    group_by(corpus) %>% 
    count()
```

```{r, eval=FALSE}
# initial number of texts (before sampling)
gamma %>% 
  filter(year > 1829 & year < 1840) %>% 
  select(index, corpus) %>% 
  distinct() %>% 
  group_by(corpus) %>% 
  count()
```

```{r, eval = F}
saveRDS(gamma1830, file = "../../data/ch4/gamma_1830_sampled.Rds")
```

```{r, eval=FALSE}
# temporary make all iamb_other == iamb_free

counts_main <- gamma1830 %>% 
    select(index, corpus, formula) %>% 
    filter(formula %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
    distinct() %>% 
    group_by(corpus, formula) %>% 
    count(sort = T) %>% 
    pivot_wider(names_from = formula, values_from = n)

rnc_others <- gamma1830 %>% 
    select(index, corpus, formula) %>% 
    distinct() %>% 
    filter(corpus == "N" & !formula %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
    count() %>% 
    pull()

m_others <- gamma1830 %>% 
    select(index, corpus, formula) %>% 
    distinct() %>% 
    filter(corpus == "M" & !formula %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
    count() %>% 
    pull()

counts <- cbind(counts_main, other = c(rnc_others, m_others))

counts_fin <- counts %>% 
    ungroup() %>% 
    rowwise(corpus) %>% mutate(total = sum(across(where(is.numeric))))

counts_fin

counts_fin[2,7][[1]]

counts_fin %>% 
    pivot_longer(!corpus, names_to = "formula", values_to = "n") %>% 
    group_by(corpus, formula) %>% 
    mutate(perc = ifelse(corpus == "N",
               round(n/counts_fin[2,7][[1]]*100,1),
               round(n/counts_fin[1,7][[1]]*100,1)))

```

Network

topic labels & edges

```{r, eval=FALSE}
topic_labels <- get_topic_labels(beta, n_labels = 5)
head(topic_labels)

edges_1830 <- compute_edges(gamma1830,
                           gamma_thresh = 0.05,
                           time_slice = 5)

head(edges_1830)
```

```{r, eval=FALSE}
# select top meters
meter_counts_1830 <- gamma1830 %>% 
  rename("meter" = "formula") %>% 
  filter(!str_detect(meter, "other") & meter != "NA") %>% 
  group_by(meter, corpus) %>% 
  count(sort = T) %>% 
  mutate(n_texts = n/75) %>%
  ungroup() %>% 
  filter(n > 10)

top_meters_1830 <- meter_counts_1830 %>% 
  group_by(meter) %>%
  summarise(total = sum(n)) %>% 
  arrange(desc(total))

top_meters_1830$meter[1:8]
```

```{r, eval=FALSE}
links_1830 <- edges_1830 %>% 
  mutate(meter = formula) %>%
  # filter out only 8 most interesting meters
  filter(meter %in% top_meters_1830$meter[1:8]) %>% 
  # group and count edges
  group_by(meter, corpus) %>% 
  count(meter, edge_id, source, target, sort = T) %>% 
  # filter non-frequent edges
  filter(n > 2) %>% 
  ungroup() 

# quick check
head(links_1830)
```

```{r, eval=FALSE}
edges_rnc <- links_1830 %>% 
    mutate(meter_edge = paste0(meter, "__", edge_id)) %>% 
    filter(corpus == "N") %>% 
    pull(meter_edge)

edges_m <- links_1830 |> 
    mutate(meter_edge = paste0(meter, "__", edge_id)) %>% 
    filter(corpus == "M") %>% 
    pull(meter_edge)

head(edges_rnc)
head(edges_m)

edges_intersection <- intersect(edges_rnc, edges_m)
print("Intersection between built edges:")
head(edges_intersection)

length(edges_rnc)
length(edges_m)

length(edges_intersection)
```

edgelist & nodelist

```{r, eval=FALSE}

edgelist <- links_1830 %>% 
    mutate(meter_edge = paste0(meter, "__", edge_id),
           # create a column indicating if an edge is present in both corpora
          group = ifelse(meter_edge %in% edges_intersection, "Both corpora", "Unique edge")) %>% 
    select(source, target, n, meter, corpus, group) %>% 
    mutate(width = n/10,
          corpus_fullname = ifelse(corpus == "M", "corpus_1830", "RNC"))

nodelist <- tibble(source = unique(c(links_1830$target, links_1830$source))) %>% 
  mutate(idn = as.numeric(str_replace(source, "^([0-9].*?)_.*", "\\1"))) 

head(edgelist)
head(nodelist) 
nrow(nodelist)
```

network viz

```{r, eval=FALSE}
net1830 <- graph_from_data_frame(d = edgelist, vertices = nodelist, directed = F)
net1830
```

viz fn

```{r, eval=FALSE}
# function for network visualisation

# taken as input net, meter as a string & colour palette value

network <- function(network, meter_value, palette_v) {
  ggraph(network, layout = "kk") +
    # one layer for edges which are unique for each corpus (RNC or Periodicals)
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Unique edge", 
                      width = n), 
                      alpha = 0.4) +
    
    # second layer for intersected edges
    geom_edge_fan(aes(color = group,
                      filter = meter %in% c(meter_value) & group == "Both corpora", 
                      width = n), 
                      alpha = 1) +
    
    geom_node_point() +
    #geom_node_text(aes(label=idn), 
    #               hjust=0.1, 
    #               vjust=-0.4, 
    #               size=3, 
    #               color="grey50") +
    theme_void() + 
    theme(strip.text = element_text(size = 18)) +
    facet_wrap(~corpus_fullname, 
               scales="free_x", 
               drop=T,
               ncol = 2) + 
    scale_edge_color_manual(values = palette_v) + 
    #labs(title = meter_value) + 
    theme(legend.position = "None")
}
```

### 

iamb-4

```{r, eval=FALSE}
network(net1830, "iamb_4", c(wes_palette("Darjeeling1")[2], wes_palette("Royal1")[1]))
```

### 

iamb-6

```{r, eval=FALSE}
network(net1830, "iamb_6", c(wes_palette("Darjeeling1")[3], wes_palette("Royal1")[1]))
```

### 

trochee-4

```{r, eval=FALSE}
network(net1830, "trochee_4", c(wes_palette("Darjeeling1")[1], wes_palette("Royal1")[1]))
```

### 

comparison of connections

```{r, eval=FALSE}
links_n <- links_1830 %>% 
  filter(corpus == "N" & meter %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
  mutate(connection = paste0(meter, "__", edge_id)) %>% 
  select(connection) 

links_m <- links_1830 %>% 
  filter(corpus == "M" & meter %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
  mutate(connection = paste0(meter, "__", edge_id)) %>% 
  select(connection) 
  
t <- intersect(links_n$connection, links_m$connection)

head(t)
length(t)


```

```{r, eval=FALSE}
links_1830 %>% 
  filter(meter %in% c("iamb_4", "iamb_6", "iamb_free", "trochee_4")) %>% 
  mutate(connection = paste0(meter, "__", edge_id)) %>% 
  mutate(corpus_new = ifelse(connection %in% t, "Both corpora", corpus)) %>% 
  mutate(corpus_new = recode(corpus_new, 
                           "N" = "National corpus only", 
                           "M" = "Marginals only")) %>% 
  # first select unique connections and assign to both/P/N
  group_by(corpus_new, meter, edge_id) %>%
  count() %>% 
  select(-n) %>% 
  distinct() %>%
  # ungroup & count by large groups again
  ungroup() %>% 
  group_by(corpus_new, meter) %>% 
  count(sort = T) %>% 
  arrange(desc(meter)) %>% 
  ggplot(aes(x = meter,
           y = n,
           group = corpus_new,
           fill = corpus_new)) +
  geom_col(position = "dodge") +
  labs(x = "Meter",
       y = "", 
       fill = "Corpus",
       subtitle = "Number of unique connections found in RNC vs Periodicals") + 
  scale_fill_manual(values = c(wes_palette("Rushmore1")[3:5])) + 
  theme(axis.text = element_text(size = 11), 
        plot.subtitle = element_text(hjust = 0.5))
```

x
