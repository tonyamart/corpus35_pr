---
title: "04_4_communities"
format: html
editor: visual
---

This notebook is building the network visualizations with communities shown in Chapter 4.2.

## load pckg & data

```{r, warning=FALSE, message=FALSE}
library(tidyverse)

# networks
library(igraph)
library(tidygraph)
library(ggraph)
library(ggforce) # for geom_mark_hull annotation
library(concaveman)


# basic colouring and layout options
library(wesanderson)
# library(patchwork)
theme_set(theme_minimal())

library(MetBrewer)
```

```{r}
# palette
met.brewer(MetBrewer::colorblind_palettes[24])
# met.brewer(name = "Kandinsky")
# met.brewer(MetBrewer::colorblind_palettes[16]) # Kandinsky

plt <- c(met.brewer(name = "Veronese")[2],
         met.brewer(name = "Veronese")[3],
         met.brewer(name = "Veronese")[4],
         met.brewer(name = "Kandinsky")[3],
         met.brewer(name = "Kandinsky")[2],
         met.brewer(name = "Veronese")[5],
         met.brewer(name = "Pillement")
         )
```

```{r}
# load model output
load("../../data/ch4/lda75_output.Rda")

# load code for edges calculation
source("04_fn_calculate_edges.R")

# function to extract topic lables:
get_topic_labels = function(x, n_labels = 10) {
  
  #takes beta-matrix as an input
  top_terms = x %>%
    group_by(topic) %>%
    top_n(20, beta) %>%
    ungroup() %>%
    arrange(topic, -beta)
  
  topic_labels = top_terms %>%
    group_by(topic) %>%
    top_n(n_labels, beta) %>%
    summarise(label=paste(term, collapse=" ")) %>%
    mutate(label = paste(topic, label, sep="_"))
  
  return(topic_labels)
}

# prepare gamma data
gamma_rnc <- gamma %>% 
    # select ONLY RNC connections & topics
    filter(corpus == "N") 

glimpse(gamma)
glimpse(gamma_rnc)

```

```{r}
topic_labels <- get_topic_labels(beta, n_labels = 5)
head(topic_labels)
```

### export stable edges

Stable edges calculated via loop with excessive sampling from both corpora (see scr 03 ch4).

```{r}
stable_edges <- readRDS("../../data/ch4/edge_stability.Rds") %>% 
  mutate(meter = tolower(meter),
         meter_edge = paste0(meter, "__", Var1)) # create an id col to merge with data
glimpse(stable_edges)
```

Create edges for everything

```{r}
edges_raw <- compute_edges(gamma,
                           gamma_thresh = 0.05,
                           time_slice = 5)
```

### RNC edges & nodes

```{r}
# create links
links_rnc <- edges_raw %>% 
  filter(corpus == "N") %>% 
  mutate(meter = formula) %>%
  # group and count edges
  group_by(slice, meter) %>% 
  count(slice, meter, edge_id, source, target, sort = T) %>% 
  ungroup() %>% 
  
  # attach data about the edge stability
  mutate(meter_edge = paste0(meter, "__", edge_id)) %>%  # id column for merging
  inner_join(stable_edges %>% 
               filter(corpus == "RNC") %>% # filter only rnc data
               select(meter_edge, Freq), # leave only data about the edge_meter & freq
             by = "meter_edge")

# quick check
head(links_rnc)
nrow(links_rnc)
```

```{r}
edgelist_rnc <- links_rnc %>% 
  select(source, target, n, meter, slice, Freq) %>% 
  mutate(width = n/10) %>% 
  filter(slice != 1850) %>% 
  rename(N_connections = n) %>% 
  mutate(facet_title = slice)

nodelist_rnc <- tibble(source = unique(c(links_rnc$source, links_rnc$target))) %>% 
  mutate(idn = as.numeric(str_extract(source, "^\\d+"))) 

head(edgelist_rnc)
head(nodelist_rnc) 

summary(edgelist_rnc)
```

### corpus-1835 edges & nodes

```{r}
# create links
links_m <- edges_raw %>% 
  filter(corpus == "M") %>% 
  mutate(meter = formula) %>%
  # group and count edges
  group_by(slice, meter) %>% 
  count(slice, meter, edge_id, source, target, sort = T) %>% 
  ungroup() %>% 
  
  # attach data about the edge stability
  mutate(meter_edge = paste0(meter, "__", edge_id)) %>%  # id column for merging
  inner_join(stable_edges %>% 
               filter(corpus == "M") %>% # filter only rnc data
               select(meter_edge, Freq), # leave only data about the edge_meter & freq
             by = "meter_edge")

# quick check
head(links_m)
nrow(links_m)
```

```{r}
edgelist_m <- links_m %>% 
  select(source, target, n, meter, slice, Freq) %>% 
  mutate(width = n/10) %>% 
  filter(slice != 1850) %>% 
  rename(N_connections = n) %>% 
  mutate(facet_title = slice)

nodelist_m <- tibble(source = unique(c(links_m$source, links_m$target))) %>% 
  mutate(idn = as.numeric(str_extract(source, "^\\d+"))) 

head(edgelist_m)
head(nodelist_m) 

summary(edgelist_m)
```

## fn for custom edgelists

```{r}
custom_edgelist <- function(edgelist_input, meter_v, slices, #min_freq
                            min_connections
                            ) {
    edgelist_input %>% 
    #filter time slice 
    filter(slice %in% slices) %>% 
    # select meter and connection frequency threshold
    filter(meter == meter_v & #Freq > min_freq
             N_connections >= min_connections
           ) %>% 
    select(-slice) %>% 
    mutate(source_target = paste0(source, "__", target)) %>% 
    group_by(source_target) %>% 
    # sum number of connections for the whole period (if more than 1 time slice is chosen)
    summarise(sum_links = sum(N_connections)) %>% 
    separate(source_target, into = c("source", "target"), sep = "__")
}

custom_nodelist <- function(source_vec, target_vec) {
    x <- tibble(source = unique(c(source_vec,
                                 target_vec)),
               idn = as.numeric(str_replace(source, "^([0-9].*?)_.*", "\\1")))
    return(x)
}
```

### load data

```{r}
load("../../data/ch4/networks_data.Rda")
```

### iamb 4 - freq=100, q=0.95

#### rnc

```{r}

edgelist_rnc %>% 
  filter(meter == "iamb_4") %>% 
  summary()

edgelist_rnc %>% 
  filter(meter == "iamb_4") %>% 
  filter(slice %in% c(1800:1829)) %>% 
  filter(Freq == 100) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))


edgelist_i4 <- custom_edgelist(edgelist_rnc %>% filter(Freq == 100), 
                               meter_v = "iamb_4", 
                            # choices for the Fig. 2:
                               slices = c(1800:1829), 
                               #min_freq = 99
                                min_connections = 8 # from 95 percentile 
                            ) 
head(edgelist_i4)
nrow(edgelist_i4) # 20
nodelist_i4 <- custom_nodelist(edgelist_i4$source, edgelist_i4$target)
head(nodelist_i4)
```

```{r}
# create tidy graph
net_t <- tbl_graph(nodes = nodelist_i4,
                  edges = edgelist_i4,
                  directed = FALSE)

# detect communities with louvain method
t_community <- net_t %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

# check number of communities
t_community %>% 
  activate(nodes) %>% 
  select(community) %>% distinct() %>% pull()
```

Get communities labels

```{r}
t_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 3)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 4)
```

```{r}
# nodelist_i4[nodelist_i4$idn %in% c(44, 26, 72, 70, 10, 59, 73, 6, 57, 64),]

labels <- tibble(
  community = c(1, 2, 3, 4
                ),
  label = c('"Ода"', '"Стихия"',  '"Идиллия"', '"Религия"' 
            ), 
  descr = c("59_царь народ слава великий россия\n73_зреть дух сие свет коль\n6_мир вечный природа творец земля\n23_правда закон зло суд истина", 
            
            "10_гора скала лес стоять дикий\n70_враг бой меч герой брань\n41_гром страшный средь страх пасть", 
            
            "44_вода река струя бежать ручей\n26_лес тень лист луг роща\n72_луч небо заря солнце блистать\n52 уста око грудь кудри нега", 
            
            "57_бог святой молитва боже вера\n64_злой враг кровь смерть страшный" 
    
            )
  ) %>% 
  mutate(community = as.factor(community))

labels

# store in a separate variable with results
community_i4_rnc <- t_community
```

```{r}
community_i4_rnc %>% 
    activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(10, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 2),
                   label.buffer = unit(20, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 2
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 3),
                   label.buffer = unit(-1, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 4),
                   label.buffer = unit(20, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = rep(plt, 2)) + 
    scale_fill_manual(values = rep(plt, 2)) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 
```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-6-a.png", plot = last_plot(),
      bg = "white", width = 9, height = 7, dpi = 300)
```

#### marginals

```{r}
edgelist_m %>% filter(meter == "iamb_4") %>% summary()

edgelist_m %>% 
  filter(meter == "iamb_4") %>% 
  filter(Freq == 100) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))

m_edgelist_i4 <- custom_edgelist(edgelist_m %>% filter(Freq == 100), 
                               meter_v = "iamb_4", 
                            # choices for the Fig. 2:
                               slices = c(1830:1845), 
                               min_connections = 16) # 95 perc.
#head(m_edgelist_i4)
nrow(m_edgelist_i4) # 25
m_nodelist_i4 <- custom_nodelist(m_edgelist_i4$source, m_edgelist_i4$target)
head(m_nodelist_i4)
nrow(m_nodelist_i4)
```

Create network & detect communities

```{r}
# create tidy graph
net_m <- tbl_graph(nodes = m_nodelist_i4,
                  edges = m_edgelist_i4,
                  directed = FALSE)

# detect communities with louvain method
m_community <- net_m %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

m_community %>% 
  activate(nodes) %>% 
  select(community) %>% distinct() %>% pull()
```

Communities info

```{r}
m_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 3)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 4)
```

```{r}
 labels <- tibble(
  community = c(1, 2, 3, 4),
  label = c('"Поэзия и возвышенное"', '"Любовь"', '"Ночной пейзаж"', '"Ода"'), 
  descr = c("22_душа мечта поэт вдохновение восторг\n18_небо мир земля земной небесный\n4_душа чувство мысль сердце понимать\n9_звук струна внимать глас лира", 
            "56_мечта душа сон воспоминание пора\n63_любовь сердце надежда душа верить\n5_любовь огонь грудь сердце кровь\n25_душа страсть страдание мука тоска", 
            "10_гора скала лес стоять дикий\n24_ночь луна ночной темный тень\n32_волна море берег вода брег", 
            "59_царь народ слава великий россия\n60_слава народ век великий имя\n70 враг бой меч герой брань")
  ) %>% 
  mutate(community = as.factor(community))

labels

# store in a separate variable with results
community_i4_m <- m_community
```

```{r}
community_i4_m %>% 
  
    activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(1, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 2),
                   label.buffer = unit(15, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 3),
                   label.buffer = unit(-2, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 4),
                   label.buffer = unit(1, 'mm'),
                   label.minwidth = 80,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = plt) + 
    scale_fill_manual(values = plt) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 
```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-6-b.png", plot = last_plot(),
      bg = "white", width = 9, height = 7, dpi = 300)
```

### iamb-6 : freq\>90, q=80

#### rnc

```{r}
edgelist_rnc %>% 
  filter(meter == "iamb_6") %>% 
  summary()

edgelist_rnc %>% 
  filter(meter == "iamb_6") %>% 
  filter(slice %in% c(1800:1829)) %>% 
  filter(Freq > 90) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))

edgelist_i6 <- custom_edgelist(edgelist_rnc %>% filter(Freq > 90), 
                               meter_v = "iamb_6", 
                            # choices for the Fig. 2:
                               slices = c(1800:1829), 
                               #min_freq = 99
                                min_connections = 3 # from 80 percentile 
                            ) 
nrow(edgelist_i6) # 84 edges
head(edgelist_i6)

nodelist_i6 <- custom_nodelist(edgelist_i6$source, edgelist_i6$target)
head(nodelist_i6)
```

```{r}
# create tidy graph
net_t <- tbl_graph(nodes = nodelist_i6,
                  edges = edgelist_i6,
                  directed = FALSE)

# detect communities with louvain method
t_community <- net_t %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

t_community %>% 
  activate(nodes) %>% 
  select(community) %>% distinct() %>% pull


t_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 3)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 4)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 5)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 6)
```

```{r}
# save results
community_i6_rnc <- t_community

#nodelist_i6[nodelist_i6$idn %in% c(15, 22, 43),]

labels <- tibble(
  community = c(1, 2, 3, 4, 5, 6),
  label = c('"Возвышенное"', '"Дидактическое"', '"Элегия"', '"Басня"', '"Природа"', '"Ночь"'),
  descr = c("23_правда закон зло суд истина\n60_слава народ век великий имя\n61_храм рука глава венец священный",
            "30_муза певец слава лира хвала\n50_толпа ум свет пускай гордый\n22_душа мечта поэт вдохновение восторг", 
            "1_слеза плакать лить скорбь тоска\n37_могила гроб земля прах лежать\n75_милый сердце любовь нежный ах",
            "65_стих писать поэт читать перо\n34_лев становиться зверь волк говорить\n40_богатый нужда хлеб отдавать деньги",
            "26_лес тень лист луг роща\n44_вода река струя бежать ручей\n72_луч небо заря солнце блистать", 
            "13_небо звезда солнце луч свет\n14_сон спать покой ночь вставать\n24_ночь луна ночной темный тень")
) %>% 
  mutate(community = as.factor(community))
```

```{r}
community_i6_rnc %>% 
  activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  # vozvyshennoe
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(-10, 'mm'),
                   label.minwidth = 70,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  # didactic
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 2),
                   label.buffer = unit(40, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  
  # 5 nature
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 5),
                   label.buffer = unit(2, 'mm'),
                   label.minwidth = 50,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  
  # elegy
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 3),
                   label.buffer = unit(50, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  # basnja
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     #description = descr,
                     filter = community == 4),
                   label.buffer = unit(0, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(14,10),
                   con.cap = 1
                  ) +
  
  # night
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 6),
                   label.buffer = unit(-1, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  # 
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = plt) + 
    scale_fill_manual(values = plt) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 

```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-7-a.png", plot = last_plot(),
      bg = "white", width = 10, height = 8, dpi = 300)
```

#### marginals

```{r}
edgelist_m %>% filter(meter == "iamb_6") %>% summary()

edgelist_m %>% 
  filter(meter == "iamb_6") %>% 
  filter(Freq > 90) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))

m_edgelist_i6 <- custom_edgelist(edgelist_m %>% filter(Freq > 90), 
                               meter_v = "iamb_6", 
                            # choices for the Fig. 2:
                               slices = c(1830:1845), 
                               min_connections = 5) # 90 perc.
nrow(m_edgelist_i6) # 19
m_nodelist_i6 <- custom_nodelist(m_edgelist_i6$source, m_edgelist_i6$target)
head(m_nodelist_i6)
head(m_edgelist_i6)

nrow(m_nodelist_i6)
```

```{r}
# create tidy graph
net_m <- tbl_graph(nodes = m_nodelist_i6,
                  edges = m_edgelist_i6,
                  directed = FALSE)

# detect communities with louvain method
m_community <- net_m %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

m_community %>% 
  activate(nodes) %>% 
  #filter(community == 1)
  select(community) %>% distinct() %>% pull

m_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 3)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 4)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 5)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 6)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 7)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 8)

```

```{r}
community_i6_m <- m_community

labels <- tibble(
  community = c(1,2,3,4,5,6,7,8),
  label = c('"Возвышенное"',
            '"Романтический пейзаж"',
            '"Элегия"',
            '"Природа"',
            '"Любовь"',
            '"Религия"',
            '"Свет"',
            '"Меланхолия"'),
  descr = c("60_слава народ век великий имя\n6_мир вечный природа творец земля\n13_небо звезда солнце луч свет",
            "10_гора скала лес стоять дикий\n32_волна море берег вода брег\n19_ветер туча буря небо гроза\n24_ночь луна ночной темный тень",
            "1_слеза плакать лить скорбь тоска\n25_душа страсть страдание мука тоска",
            "26_лес тень лист луг роща\n36_цветок роза весна цвет цвести",
            "28_красота видеть природа вид прелесть\n75_милый сердце любовь нежный ах",
            "41_гром страшный средь страх пасть\n57_бог святой молитва боже вера",
            "42_взор око немой улыбка чей\n50_толпа ум свет пускай гордый",
            "46_сердце тоска душа грудь печаль\n56_мечта душа сон воспоминание пора")
) %>% 
  mutate(community = as.factor(community))
```

```{r}

plt2 <- sample(plt, 8)

community_i6_m %>% 
  activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  
  # green
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(0, 'mm'),
                   label.minwidth = 65,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  # elegy
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     #description = descr,
                     filter = community == 3),
                   label.buffer = unit(-30, 'mm'),
                   label.minwidth = 5,
                   label.fontsize = c(14,12),
                   con.cap = 0
                  ) + 
  # nature
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     #description = descr,
                     filter = community == 4),
                   label.buffer = unit(-40, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(14,12),
                   con.cap = 1
                  ) + 
  # love
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 5),
                   label.buffer = unit(1, 'mm'),
                   label.minwidth = 50,
                   label.fontsize = c(14,12),
                   con.cap = 1
                  ) + 
  
  # romantic landscape
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 2),
                   label.buffer = unit(1, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  # religion
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 6),
                   label.buffer = unit(-10, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(14,12),
                   con.cap = 1
                  ) + 
  # monde
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 7),
                   label.buffer = unit(2, 'mm'),
                   label.minwidth = 50,
                   label.fontsize = c(14,12),
                   con.cap = 1
                  ) + 
  # melancholy
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     #description = descr,
                     filter = community == 8),
                   label.buffer = unit(-20, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(14,12),
                   con.cap = 1
                  ) + 
  
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = plt2) + 
    scale_fill_manual(values = plt2) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 
```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-7-b.png", plot = last_plot(),
       bg = "white", width = 9, height = 7, dpi = 300)
```

### trochee 4

#### rnc

```{r}
edgelist_rnc %>% 
  filter(meter == "trochee_4") %>% 
  summary()

edgelist_rnc %>% 
  filter(meter == "trochee_4") %>% 
  filter(slice %in% c(1800:1829)) %>% 
  filter(Freq > 90) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))


edgelist_t4 <- custom_edgelist(edgelist_rnc %>% filter(Freq > 90), 
                               meter_v = "trochee_4", 
                            # choices for the Fig. 2:
                               slices = c(1800:1829), 
                               #min_freq = 99
                                min_connections = 3 # from 90 percentile 
                            ) 
head(edgelist_t4)
nrow(edgelist_t4) # 14
nodelist_t4 <- custom_nodelist(edgelist_t4$source, edgelist_t4$target)
head(nodelist_t4)
```

```{r}
# create tidy graph
net_t <- tbl_graph(nodes = nodelist_t4,
                  edges = edgelist_t4,
                  directed = FALSE)

# detect communities with louvain method
t_community <- net_t %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

t_community %>% 
  activate(nodes) %>% 
  select(community) %>% distinct() %>% pull

t_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

t_community %>% 
  activate(nodes) %>% 
  filter(community == 3)
```

```{r}
community_t4_rnc <- t_community

labels <- tibble(
  community = c(1,2,3),
  label = c('"Идиллическая\nприрода"', '"Любовь"', '"Женский портрет"'),
  descr = c("32_волна море берег вода брег\n72_луч небо заря солнце блистать\n44_вода река струя бежать ручей", 
            "1_слеза плакать лить скорбь тоска\n75_милый сердце любовь нежный ах\n36_цветок роза весна цвет цвести",
            "38_дева любовь прекрасный юный юноша\n52_уста око грудь кудри нега"
  )
  ) %>% 
  mutate(community = as.factor(community))
```

```{r}
t_community %>% 
  activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  
  
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 2),
                   label.buffer = unit(10, 'mm'),
                   label.minwidth = 60,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 3),
                   label.buffer = unit(0, 'mm'),
                   label.minwidth = 70,
                   label.fontsize = c(16,12),
                   con.cap = 1
                  ) + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(5, 'mm'),
                   label.minwidth = 55,
                   label.fontsize = c(16,12),
                   con.cap = 1
                  ) + 
  
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = plt) + 
    scale_fill_manual(values = plt) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 
```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-8-a.png", plot = last_plot(), 
       bg = "white", width = 9, height = 7, dpi = 300)
```

#### marginals

```{r}
edgelist_m %>% filter(meter == "trochee_4") %>% summary()

edgelist_m %>% 
  filter(meter == "trochee_4") %>% 
  filter(Freq > 90) %>% 
  select(N_connections) %>% pull %>% 
  quantile(probs = c(0.1, 0.25, 0.5, 0.75, 0.8, 0.9, 0.95, 0.97, 1))

m_edgelist_t4 <- custom_edgelist(edgelist_m %>% filter(Freq > 90), 
                               meter_v = "trochee_4", 
                            # choices for the Fig. 2:
                               slices = c(1830:1845), 
                               min_connections = 7) # 90 perc.
#head(m_edgelist_i4)
nrow(m_edgelist_t4) # 37
m_nodelist_t4 <- custom_nodelist(m_edgelist_t4$source, m_edgelist_t4$target)
head(m_nodelist_t4)
nrow(m_nodelist_t4)
```

```{r}
# create tidy graph
net_m <- tbl_graph(nodes = m_nodelist_t4,
                  edges = m_edgelist_t4,
                  directed = FALSE)

# detect communities with louvain method
m_community <- net_m %>% 
    activate(nodes) %>% 
    mutate(community = as.factor(group_louvain())) 

m_community %>% 
  activate(nodes) %>% 
  select(community) %>% distinct() %>% pull

m_community %>% 
  activate(nodes) %>% 
  filter(community == 1)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 2)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 3)

m_community %>% 
  activate(nodes) %>% 
  filter(community == 4)
```

```{r}
community_t4_m <- m_community

m_community %>% 
  activate(nodes) %>% 
  filter(community == 2 & idn == 72) 

labels <- tibble(
  community = c(1,2,3,4),
  label = c('"Пейзаж"', '"Природа"', '"Русская песня"', '"Любовь"'),
  descr = c("19_ветер туча буря небо гроза\n10_гора скала лес стоять дикий\n62_край страна родной чужой далекий", 
            "32_волна море берег вода брег\n72_луч небо заря солнце блистать\n24_ночь луна ночной темный тень", 
            "71_конь поле степь пыль скакать\n29_девица молодой красный старик белый", 
            "52_уста око грудь кудри нега\n5_любовь огонь грудь сердце кровь")
) %>% 
  mutate(community = as.factor(community))


```

```{r}

community_t4_m %>% 
  activate(nodes) %>% 
    left_join(labels, by = "community") %>% 
  ggraph('kk') + 
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 1),
                   label.buffer = unit(28, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) + 
  
  # pr
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     #label = label,
                     #description = descr,
                     filter = community == 2),
                   label.buffer = unit(0, 'mm'),
                   label.minwidth = 80,
                   label.fontsize = c(18,12),
                   con.cap = 1
                  ) +
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 3),
                   label.buffer = unit(2, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(18,12),
                   con.cap = 0
                  ) +
  
  geom_mark_hull(aes(x,y, fill = community,
                     color = community,
                     label = label,
                     description = descr,
                     filter = community == 4),
                   label.buffer = unit(10, 'mm'),
                   label.minwidth = 100,
                   label.fontsize = c(16,12),
                   con.cap = 1
                  ) +
  
  geom_edge_link(aes(width = sum_links), 
                   alpha = 0.5) + 
  geom_node_point(aes(colour = community
                       ), size = 10) + 
  geom_node_text(aes(label = idn), size = 5) + 
  # colouring
    scale_color_manual(values = plt) + 
    scale_fill_manual(values = plt) + 
    
    # text sizes
    theme(legend.position = "None",
         plot.title = element_text(size = 20, face = "bold"),
         plot.subtitle = element_text(size = 16)) 
```

```{r, eval=FALSE}
ggsave("plots/Fig_4-2-8-b.png", plot = last_plot(), 
      bg = "white", width = 9, height = 7, dpi = 300)
```

```{r, eval=FALSE}
# save(community_i4_rnc, community_i4_m, 
#      community_i6_rnc, community_i6_m,
#      community_t4_rnc, community_t4_m,
#      file = "networks_data.Rda"
#      )
```
