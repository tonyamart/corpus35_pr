---
title: "02_corpus_preparation"
format: md
editor: visual
---

## Corpus preparation for rhyme analysis

## Load pckg

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(tidytext)

# library(udpipe)
# ru_taiga <- udpipe_load_model("../../data/russian-taiga-ud-2.5-191206.udpipe")
```

## Load data

The data tables are resulting from the poem parced with `RhymeTagger`, see the code in: `00_1_rhymetagger_pos.ipynb`. The output is in three columns: `poem_id`, `rhyme_word`, `rhymes` (for the rhyme id/position).

### Corpus-1835 rhymes

```{r}
rhymes_1835 <- read.csv("../../data/ch5/corpus-35_rhymes.csv") %>% select(-X) %>% 
  mutate(id = str_remove(poem_id, "\\.txt$"), # remove .txt for cleaner ids
         id = paste0("M__", id)) # add a letter for "marginals" corpus

glimpse(rhymes_1835)
```

### RNC rhymes

```{r}
# dat <- read.csv("../../../../23_rhymes/parsed_rhymes.csv") # old parsed rhymes from ../23_rhymes (earlier experiment)
# glimpse(dat)
# 
# rnc <- dat %>% 
#   filter(str_detect(poem_id, "^RNC_")) %>% 
#   select(-X)
# 
# head(rnc)
# rnc$poem_id[1:10]
# 
# write.csv(rnc, file = "../../data/ch5/rnc_rhymes.csv")
```

```{r}
# load already parsed data
rnc_rhymes <- read.csv("../../data/ch5/rnc_rhymes.csv") %>% select(-X)

glimpse(rnc_rhymes)

# to separate year if needed:
# rnc_rhymes %>% 
#   mutate(poem_id = str_replace(poem_id, "RNC_", "RNC__")) %>% 
#   separate(poem_id, into = c("corpus", "id"), sep = "__") %>% 
#   separate(id, into = c("id", "year"), sep = "_") 
```

## Extract rhyme pairs

Create rhyme pairs from 'rhymes' column in annotation

```{r}
rhymes_1835_t <- rhymes_1835 %>% 
  group_by(id, rhymes) %>% 
  mutate(rhyme_pair = ifelse(!is.na(rhymes), # remove NA from collapsing
                             paste0(rhyme_words, collapse = " "), 
                             NA)) %>% 
  ungroup() %>% 
  select(-rhyme_words) %>% 
  distinct() %>% 
  filter(!is.na(rhyme_pair))

rhymes_1835_t %>% 
  sample_n(10)

# check for errors
rhymes_1835_t %>% 
  filter(is.na(rhyme_pair))
```

### long sequences

When rhyme seq is longer than 2 words, separate sequences into consequetive pairs

```{r}
sequencies_full <- rhymes_1835_t %>% 
    filter(str_detect(rhyme_pair, "^\\w+\\s\\w+\\s\\w+.*?")) 

# head(sequencies_full)
# nrow(sequencies_full)

sequencies <- sequencies_full %>% 
    select(rhyme_pair, poem_id) %>% 
    distinct()

head(sequencies) # example of sequencies
nrow(sequencies) # total number of unique sequencies - 7304
```

Statistics of pairs & sequences

```{r, eval=FALSE}
# total number of rhymed pairs
rhymes_1835_t %>% 
  filter(str_detect(rhyme_pair, "^\\w+ \\w+$")) %>% distinct() %>% nrow()


library(stringr)
# number of words in sequencies
sequencies %>% 
  distinct() %>% 
  mutate(n_words = str_count(rhyme_pair, " ") + 1) %>% 
  arrange(desc(n_words)) %>% head()
```

Loop for rewrite the seq into pairs

```{r}
x <- do.call(rbind,
        apply(sequencies, 1, function(i){
            x <- unlist(strsplit(i[1], " "))
            cbind.data.frame(
              from = x[1:length(x) - 1],
              to = x[2:(length(x))],
              id = i[2]
                )
          })
        )

head(as_tibble(x))
print(paste("Number of rhyme pairs (non-unique) from sequences:", nrow(x)))
```

Extract table with all unique words & their POS+features

```{r}
# glimpse(rhymes_1835)
# 
# pos_tags <- rhymes_1835 %>% 
#   select(rhyme_words, pos) %>% 
#   distinct() %>% 
#   rename(feats = pos) %>% 
#   mutate(pos = str_extract(feats, "^\\w+(,|=)"),
#          pos = str_remove(pos, ',|=')) 
# 
# head(pos_tags)
glimpse(x)
```

Add POS tags

```{r}
seq_fin <- as_tibble(x) %>% 
  # # attach POS tag to 'from' word
  # left_join(pos_tags %>% 
  #             rename(from = rhyme_words,
  #                    from_pos = pos,
  #                    from_feats = feats),
  #           by = "from") %>% 
  # # attach POS tag to 'to' word
  # left_join(pos_tags %>% 
  #             rename(to = rhyme_words, 
  #                    to_pos = pos,
  #                    to_feats = feats), 
  #           by = "to") %>% 
  # paste rhyme bigram in a separate column
  mutate(rhyme_pair = paste(from, to), 
         id = paste0("M__", id),
         id = str_remove(id, "\\.txt")) 

# head(seq_fin)
# nrow(seq_fin) # 19 594

rm(sequencies, sequencies_full, x)
```

### 

### true rhyme pairs

Select true rhyme pairs & add POS

```{r}
rhymes_1835_t <- rhymes_1835_t %>% 
    # remove sequencies
    filter(!str_detect(rhyme_pair, "^\\w+\\s\\w+\\s\\w+.*?")) %>% 
    # remove orphan rhymes
    filter(!str_detect(rhyme_pair, "^\\w+$")) %>%

    mutate(ft = rhyme_pair) %>% 
    separate(ft, c("from", "to"), sep = " ") %>% 
    
    # # attach POS tag to 'from' word
    # left_join(pos_tags %>% rename(from = rhyme_words,
    #                              from_pos = pos,
    #                              from_feats = feats),
    #          by = "from") %>% 
    # 
    # # attach POS tag to `to` word
    # left_join(pos_tags %>% rename(to = rhyme_words,
    #                              to_pos = pos,
    #                              to_feats = feats),
    #          by = "to") %>% 
    select(-rhymes, -poem_id, -pos) %>% 
    distinct()

glimpse(rhymes_1835_t)
head(rhymes_1835_t)
nrow(rhymes_1835_t) # 62 152 true pairs
```

Merge with pairs sequencies

```{r}
glimpse(seq_fin)

rhymes <- rbind(rhymes_1835_t, seq_fin)

rhymes <- rhymes %>% 
  # lowercase for all words
  mutate(from = tolower(from),
         to = tolower(to),
         rhyme_pair = tolower(rhyme_pair))

head(rhymes)
rhymes %>% sample_n(10)
nrow(rhymes) # total number of rhymes - 81 746
length(unique(rhymes$rhyme_pair)) # number of unique rhymes - 58 951

```

## Reorder rhyme words

```{r, eval = FALSE}
# toy example

v <- c("абрикос кокос", "громопад громад", "кокос абрикос")

# manual reverse of a pair
print("given pair:")
v[3]
# splitting in two
str_split_1(v[3], " ")

# sort
print("sorting result:")
str_sort(str_split_1(v[3], " ")) # this gives a vector of two

# save as list and paste (via sapply) as a rhyme pair:
print("result as a pasted rhyme pair")
sapply(list(str_sort(str_split_1(v[3], " "))), paste0, collapse = " ")


# in a loop:
true_order <- NULL
for (i in 1:length(v)) {
  true_order[i] <- sapply(list(str_sort(str_split_1(v[i], " "))), paste0, collapse = " ")
}

tibble(given = v,
       trues = true_order)
```

```{r}
raw_pairs <- rhymes %>% pull(rhyme_pair) %>% unique() # extract unique pairs

true_order <- NULL # empty var to store results

for (i in 1:length(raw_pairs)) {
  true_order[i] <- sapply(list(
    str_sort( # reorder
      str_split_1( # split by empty space
        raw_pairs[i], " "))),  
    paste0, collapse = " ") # paste reordered 
}

# create a tibble with ordered pairs
ordered <- tibble(rhyme_pair = raw_pairs,
                  true_pair = true_order)

head(ordered)
```

Attach reordered pairs to the main data table

```{r}
rhymes <- rhymes %>% 
  left_join(ordered, by = "rhyme_pair") %>% 
  rename(rhyme_alph = true_pair)

head(rhymes)
print(paste("Number of unique rhymes after reordering:", 
            length(unique(rhymes$rhyme_alph)) ))
```

## save data

```{r, eval=FALSE}
rhymes <- rhymes %>% select(-rhyme_pair)

write.csv(rhymes, "../../data/corpus1835/sql_db/rhyme_pairs.csv")
```

# Rhyme words

```{r}
# rhymes <- read.csv("../../data/corpus1835/sql_db/rhyme_pairs.csv") %>% select(-X)

# glimpse(rhymes)
```

### add accents

Extract data as a vector of unique rhyme words for accentuation

```{r, eval=FALSE}
vec <- NULL
vector <- NULL

glimpse(rhymes)

vector <- paste0(unique(c(rhymes$from, rhymes$to)), collapse = "\n")

write_file(vector, file = "../../data/ch5/corpus_1835_rhymewords.txt")
```

Use `scr/00_preprocessing/00_ru_accent_poent.ipynb` to annotate the data with stresses.

Load accented vector of unique rhyme words.

```{r}
vec_acc <- read_file("../../data/ch5/corpus_1835_rhymewords.accented.txt")

rw_acc <- tibble(accented = vec_acc) %>% # create one-cell tibble
  # separate one word = one row
  separate_rows(accented, sep = "\n") %>% 
  
  # create word-id column with no stress 
  mutate(word = str_remove_all(accented, "'")) 
  
rw_acc <- rw_acc %>% 
  # add id columns
   mutate(doc_id = row_number(), 
         row_id = row_number())

head(rw_acc)
```

### binarisation

Upload function to rewrite letters & ' stress annotation to binary

```{r}
to_binary <- function(df,document="doc_id",text="acc_text") {
  
  vowels <-  c("а", "е","ё", "у", "о", "ю", "я", "и", "ы", "э")
  #cons <- c("б", "в", "г", "д", "ж", "з", "й", "к", "л", "м", "н", "п", "р", "с", "т", "ф", "х", "ц", "ч", "ш", "щ")
  
  syl_pattern = paste(vowels, collapse="|")
  #cons_pattern <- paste(cons, collapse="|")
  
  ## send to lower case, split by lines, add row ids
  unnested <- df %>% mutate(acc_text = str_to_lower(!! sym(text)),
                            acc_text = str_replace_all(acc_text,"ё", "ё'"),
                            acc_text = str_split(acc_text, "\n")) %>%
    unnest(acc_text) %>% 
    mutate(row_id=row_number())
  
  
  binarized <- unnested %>%
    # replace all vowels with 0 and extract only 0 and 0' patterns
    mutate(stress_pattern = str_replace_all(acc_text, syl_pattern,"0"),
           stress_pattern = str_extract_all(stress_pattern, "0|'")) %>% 
    # unnest extracted lists
    unnest(stress_pattern) %>% 
    group_by(row_id, !! sym(document)) %>% 
    # join back by row
    summarise(stress_pattern=paste(stress_pattern, collapse="")) %>% 
    mutate(stress_pattern = str_replace_all(stress_pattern, "0'", "1"))
  
  return(binarized)
}
```

```{r}
b <- to_binary(rw_acc, text = "accented")

# head(b)
# glimpse(rw_acc)

words <- rw_acc %>% 
  select(-doc_id) %>% 
  left_join(b %>% select(-doc_id), by = "row_id") %>% 
  select(-row_id) %>% 
  mutate(accented = tolower(accented),
         word = tolower(word))

words %>% sample_n(10)
```

Fix words with no stress - ru_accent_poet doesn't stress one-syllable words

```{r}
words %>% 
  filter(!str_detect(accented, "'")) %>% distinct()
```

#### add ë stress

```{r}
words <- words %>% 
  mutate(word_acc = ifelse(str_detect(word, "ё"),
                           str_replace(accented, "ё", "ё'"),
                           accented))

words %>% 
  filter(str_detect(word, "ё")) %>% head()

words %>% 
  filter(!str_detect(word, "ё")) %>% head()
```

#### one-syl words

```{r}
words %>% 
  filter(!str_detect(word_acc, "'") & stress_pattern != "0") # non-one-syl words without stress

# number of one-syllable words without a stress
words %>% 
  filter(!str_detect(word_acc, "'") & stress_pattern == "0") %>% nrow()

# example of these words
words %>% 
  filter(!str_detect(word_acc, "'")) %>% sample_n(10)
```

```{r}
# extract and pull words without stresses
test_words <- words %>% 
  filter(!str_detect(word_acc, "'") & stress_pattern == "0") %>% 
  pull(word_acc) 

head(test_words)
test_words <- tolower(test_words)

# create vowels vector 
vowels <-  c("а", "е","ё", "у", "о", "ю", "я", "и", "ы", "э")
vowels_vec <- paste0(vowels, collapse = "|")



# create empty variables for a stres marking loop
w <- NULL
x <- NULL
word <- NULL
word_acc <- NULL

# place a stress near every vowel
for (j in 1:length(test_words)) {
  # take one word
  word <- test_words[j]
  
  for (i in 1:length(unlist(str_split(word, ""))) ) {
    # split into characters
    x <- str_split(word, "")[[1]][i]
    # add stress if a vowel
    if (str_detect(x, vowels_vec)) {
      x <- paste0(x, "'")
    } 
    # attach with previous letters 
    w <- append(w, x)
  }
  #w
  w1 <- paste0(w, collapse = "") # merge into one string
  w <- NULL # clean temporary variable
  word_acc[j] <- w1 # write the word into a word vec
  
}

head(word_acc)

one_syl <- tibble(word = test_words,
       word_acc_new = word_acc) 

one_syl %>% sample_n(10)
```

Return stressed words to the main `words` table

```{r}
glimpse(words)

words_acc <- words %>% 
  left_join(one_syl, by = "word") %>% 
  mutate(word_acc = ifelse(!is.na(word_acc_new),
                           word_acc_new,
                           word_acc)) %>% 
  select(-accented, -word_acc_new) %>% 
  # fix some typos
  mutate(word_acc = str_replace(word_acc, "е'я", "ея'"),
         stress_pattern = ifelse(word == "ея", "01", stress_pattern),
         
         word_acc = str_replace(word_acc, "ха'рит", "хари'т"),
         stress_pattern = ifelse(word == "харит", "01", stress_pattern),
         
         word = str_replace(word, "искуства", "искусства"),
         word_acc = str_replace(word_acc, "иску'ства", "иску'сства"),
         
         # fix ë
         word_acc = str_replace(word_acc, "е'\"", "ё'"),
         
         # make everything lowercase AGAIN
         word = tolower(word),
         word_acc = tolower(word_acc),
         
         # add stress to two two-syll unstressed words
         word_acc = str_replace(word_acc, "^нибудь$", "нибу'дь"),
         stress_pattern = ifelse(word == "нибудь", "01", stress_pattern),
         
         word_acc = str_replace(word_acc, "^cтены$", "cтены'"),
         stress_pattern = ifelse(word == "cтены", "01", stress_pattern),
         
         # fix one-syl stress pattern
         stress_pattern = ifelse(stress_pattern == "0",
                                 "1",
                                 stress_pattern)
         ) %>% 
  select(word, word_acc, stress_pattern)
```

```{r}
sample_n(words_acc, 10)
```

#### add closure type

```{r}
words_acc <- words_acc %>% 
  mutate(closure_pattern = str_replace_all(stress_pattern, "^.*?(1)(0)?(0)?$", "\\1\\2\\3"),
         closure_pattern = ifelse(closure_pattern == 0, 1, closure_pattern),
         closure = ifelse(closure_pattern == "10", "fem", ""),
         closure = ifelse(closure_pattern == "1", "masc", closure),
         closure = ifelse(closure_pattern == "100", "dactylic", closure),
         closure = ifelse(closure == "", "other", closure)) 

sample_n(words_acc, 10)
```

Remove typos

```{r}
words_acc %>% filter(is.na(closure))

words_acc <- words_acc %>% 
  filter(!is.na(closure))
```

### add pos & feats

Retrieve pos & grammar from the initial file `rhymes_1835`

```{r}
glimpse(rhymes_1835) 

words_pos <- rhymes_1835 %>% 
  select(rhyme_words, pos) %>% 
  distinct() %>% 
  mutate(feats = pos,
         pos = str_extract(feats, "^\\w+(,|=)"),
         pos = str_remove(pos, ',|=')
         ) 
  
sample_n(words_pos, 10)

# list of typos, foreign words, etc.
words_pos %>% 
  filter(is.na(pos)) %>% sample_n(20)

words_pos <- words_pos %>% 
  filter(!is.na(pos))
```

#### attach pos to main table

```{r}
# glimpse(words_acc)
# glimpse(words_pos)

words_acc <- words_acc %>% 
  left_join(words_pos %>% rename(word = rhyme_words), by = "word")
```

```{r}
# test if all words have accents
words_acc %>% 
  filter(!str_detect(word_acc, "'"))
```

## ending

Extract ending

```{r}
endings <- words_acc %>% 
   # extract the ending with the stress
  mutate(ending_st = str_extract(word_acc, "\\w'.*?$"),
         # add a letter if the ending is only one vowel (masc endings)
         ending_st = ifelse(
           str_detect(ending_st, "^\\w'$") & nchar(word_acc) > 2,
           str_extract(word_acc, "\\w\\w'$"),
           ending_st
         ),
         # column with the ending without the stress
         ending = str_remove(ending_st, "'")) %>% 
  select(word_acc, ending, ending_st)

glimpse(endings)
```

Merge to the table

```{r}
glimpse(words_acc)

# quick test if no ending is missed
words_acc %>% 
  left_join(endings, by = "word_acc") %>% 
  filter(is.na(ending))

# join
words_acc <- words_acc %>% 
  left_join(endings %>% select(-ending), by = "word_acc")
```

```{r}
glimpse(words_acc)

words_acc <- words_acc %>% 
  mutate(id = row_number())
```

### save

```{r}
write.csv(words_acc, "../../data/corpus1835/sql_db/rhyme_words.csv")
```
