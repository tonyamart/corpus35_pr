---
title: "05_3_rhyme_bigrams"
format: md
editor: visual
---

# Chapter 5.1

This notebook displays the analysis of rhyme words described in Chapter 5.1. The main focus is on the rhyme pairs lexical frequencies and how it relates to the overall word bigrams frequencies in the corpus.

### load pckg

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(tidytext)

library(MetBrewer)
# library(patchwork)
library(cowplot)
theme_set(theme_minimal())
```

### load data

#### Corpus-1835

```{r}
rhymes_1835 <- read_csv("../../data/corpus1835/sql_db/rhyme_pairs.csv") %>% 
  rename(text_id = poem_id) %>% 
  # remove Kulman texts
  filter(!str_detect(text_id, "C_264"))

glimpse(rhymes_1835)
```

#### C-35 metadata

```{r}
corpus_1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")

# attach year to rhyme data
rhymes_1835 <- rhymes_1835 %>% 
  left_join(corpus_1835 %>% 
              select(text_id, year), by = "text_id") %>% 
  mutate(corpus = "M")
```

Number of lines to the number of rhymes (% of rhymed lines detected)

```{r}
rhymes_t <- rhymes_1835 %>% 
  left_join(corpus_1835 %>% select(text_id, n_lines), by = "text_id")

glimpse(rhymes_t)

rhymes_t %>% 
  mutate(n_line_pairs = n_lines / 2) %>% 
  group_by(text_id, n_line_pairs) %>% 
  count() %>% 
  ungroup() %>% 
  mutate(perc_rhymed = round((n / n_line_pairs)*100, 2),
         perc_rhymed = ifelse(perc_rhymed > 100, 100, perc_rhymed)) %>% 
  
  summary()
  # ggplot(aes(x = perc_rhymed)) + geom_boxplot() + 
  # scale_x_continuous(breaks = seq(1, 100, 5))

# 1st qu. ~83% rhymed lines, avg 87% of pairs as rhymed 

# likely unrhymed texts:
rhymes_t %>% 
  mutate(n_line_pairs = n_lines / 2) %>% 
  group_by(text_id, n_line_pairs) %>% 
  count() %>% 
  ungroup() %>% 
  mutate(perc_rhymed = round((n / n_line_pairs)*100, 2),
         perc_rhymed = ifelse(perc_rhymed > 100, 100, perc_rhymed)) %>% 
  filter(perc_rhymed < 50) %>% count() # approx. number -- less than 50% of lines detected as rhymed

print(paste("Approx. number of rhymed texts:", length(unique(rhymes_t$text_id)) - 263,
  "\nPercentage of rhymed texts out of total:",
  (round( (length(unique(rhymes_t$text_id)) - 313) / 
            length(unique(corpus_1835$text_id))*100, 2))
  ))

rm(rhymes_t)
```

#### RNC

Load RNC rhymes data

```{r}
# load already parsed data
rnc_rhymes <- read.csv("../../data/ch5/rnc_rhymes.csv") %>% select(-X)

rnc_rhymes <- rnc_rhymes %>% 
  mutate(poem_id = str_replace(poem_id, "RNC_", "RNC__")) %>% 
  separate(poem_id, into = c("corpus", "id"), sep = "__") %>% 
  separate(id, into = c("text_id", "year"), sep = "_") 

glimpse(rnc_rhymes)

rnc_rhymes <- rnc_rhymes %>% 
  # select & reorder columns for merge
  select(text_id, from, to, rhyme_alph, year, corpus)
```

Merge two corpora

```{r}
rhymes <- rbind(rhymes_1835, rnc_rhymes)

glimpse(rhymes)

table(rhymes$corpus) # quick check in the number of rhymes found
```

### Overview

#### most frequent rhymes

```{r}
rhymes_1835 %>% 
  count(rhyme_alph, sort = T) %>% 
  mutate(perc = round((n / nrow(rhymes_1835)) * 100, 3 )) %>% 
  head(10)
```

#### top 5 rhymes in each year

```{r}
total_year <- rhymes_1835 %>% 
  count(year)

total_year

rhymes_1835 %>% 
  group_by(year) %>% 
  count(rhyme_alph, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  top_n(n, n = 10) %>% 
  arrange(-desc(year)) %>% 
  ungroup() %>% 
  left_join(total_year %>% rename(total = n), by = "year") %>% 
  mutate(perc = round((n / total) * 100, 2)) 


rhymes_1835 %>% 
  group_by(year) %>% 
  count(rhyme_alph, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  top_n(n, n = 5) %>% 
  arrange(-desc(year)) %>% 
  ungroup() %>% 
  left_join(total_year %>% rename(total = n), by = "year") %>% 
  mutate(perc = round((n / total) * 100, 2)) %>% 
  group_by(year) %>%
  summarise(
    sum_perc = sum(perc))
```

## 5.1. stats

Number of hapax legomena in C-35

```{r}
rhymes_1835 %>% 
  count(rhyme_alph, sort = T) %>% 
  filter(n == 1) %>% 
  count() %>% 
  mutate(perc_total = n/nrow(rhymes_1835)*100)
```

Number of rhyme pairs repeated \>=10 times

```{r}
rhymes_1835 %>% 
  count(rhyme_alph, sort = T) %>% 
  filter(n >= 10) %>% nrow()
```

### Number of only masc / only fem rhymes poems

Separate words from pairs

```{r}
w1 <- rhymes_1835 %>% 
  select(text_id, from) %>% 
  rename(word = from)

w2 <- rhymes_1835 %>% 
  select(text_id, to) %>% 
  rename(word = to)

rhyme_words <- rbind(w1, w2)
```

Attach data about rhyme words endings

```{r}
rhyme_words_meta <- read_csv("../../data/corpus1835/sql_db/rhyme_words.csv")

rhyme_words <- rhyme_words %>% 
  left_join(rhyme_words_meta %>% select(word, closure), by = "word") 

rm(rhyme_words_meta, w1, w2)
```

Count percent of pairs in each poem

```{r, eval=FALSE}
# calculate total number of FOUND rhymes in each poem

total_id <- rhyme_words %>% 
  group_by(text_id) %>% 
  count() %>% ungroup() %>% rename(n_lines = n)

rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  #filter(perc_closure < 100) %>% 
  ggplot(aes(x = perc_closure, fill = closure)) + geom_boxplot()


# find statistics for the most of the mass 
rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  
  filter(closure == "masc" & perc_rhymed > 50) %>% 
  summary()

rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  
  filter(closure == "fem" & perc_rhymed > 50) %>% 
  summary()
```

Text ids for mostly feminine rhymes

```{r, eval=FALSE}
rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  filter(closure == "fem" & perc_closure > 85) %>% 
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  filter(perc_rhymed > 50) %>% 
  select(text_id) %>% distinct() %>% 
  nrow() # number of potentionally only-fem rhyme poems?

# sample
s <- rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  filter(closure == "fem" & perc_closure > 85) %>% 
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  filter(perc_rhymed > 50) %>% 
  select(text_id, text_raw) %>% distinct() #%>% 
  #sample_n(20)

write.csv(s, file = "mostly_fem_clausula.csv")
```

Mostly masculine rhymes

```{r, eval=FALSE}
rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  filter(closure == "masc" & perc_closure > 85) %>% 
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  filter(perc_rhymed > 50) %>%  # select only at least halfly rhyme-detected texts
  select(text_id) %>% distinct() %>% 
  nrow() # number of potentionally only-masc rhyme poems?

# sample
s <- rhyme_words %>% 
  filter(!is.na(closure) & closure != "other") %>% 
  # attach total number of lines in the poem
  left_join(total_id, by = "text_id") %>% 
  group_by(text_id) %>% 
  count(closure, n_lines) %>% 
  ungroup() %>% 
  mutate(perc_closure = round((n/n_lines)*100, 1)) %>% 
  filter(closure == "masc" & perc_closure > 85) %>% 
  # control for non-rhymed texts:
  left_join(corpus_1835 %>% 
              select(text_id, text_raw, n_lines) %>% 
              rename(n_lines_total = n_lines), by = "text_id") %>% 
  mutate(perc_rhymed = round((n_lines / n_lines_total) * 100, 1)) %>%
  filter(perc_rhymed > 50) %>% 
  select(text_id, text_raw) %>% distinct() #%>% 
  #sample_n(20)

write.csv(s, file = "mostly_masc_clausula.csv")
```

## Fig. 5-1-1. Bigram freq

Count frequencies in Corpus-1835 in general

```{r, warning=FALSE}
# count unigram frequencies
unigram_freq_full <- corpus_1835 %>% 
  unnest_tokens(input = text_raw, output = word, token = "words") %>% 
  group_by(word) %>% 
  count(sort = T) %>% 
  mutate(group = "Корпус-1835: отд. слова (все)")

# count bigram frequencies
bigram_freq_full <- corpus_1835 %>% 
  unnest_tokens(input = text_raw, output = bigram, token = "ngrams", n = 2) %>% 
  group_by(bigram) %>% 
  count(sort = T) %>% 
  mutate(group = "Корпус-1835: словосочетания (все)")
```

Count unigram & bigram freq in rhyme data

```{r}
unigram_freq_rhymes <- rhymes_1835 %>% 
  unnest_tokens(input = rhyme_alph, output = word, token = "words") %>% 
  group_by(word) %>% 
  count(sort = T) %>% 
  mutate(group = "Рифмы: отд. слова")

bigram_freq_rhymes <- rhymes_1835 %>% 
  group_by(rhyme_alph) %>% 
  count(sort = T) %>% 
  rename(bigram = rhyme_alph) %>% 
  mutate(group = "Рифмы: рифмопары")
```

Plot

```{r}
w_freq <- rbind(unigram_freq_full, unigram_freq_rhymes,
      bigram_freq_full, bigram_freq_rhymes) %>% 
  group_by(group) %>% 
  mutate(rank = row_number()) %>% 
  #slice_head(n = 1000) %>% 
  ggplot(aes(x = log(rank), y = log(n), group = group, color = group)) + 
  geom_line(linewidth = 1) + 
  facet_wrap(~group, scales = "free") + 
  theme(legend.position = "None") + 
  labs(x = "Ранг (log)", y = "Частотность (log)", 
       title = "A. Распределение абсолютных частот") + 
  #scale_x_continuous(breaks = c(1, seq(250, 1000, 250))) + 
  scale_color_manual(values = c(met.brewer(name = "Veronese")[1],
                                met.brewer(name = "Veronese")[2],
                                met.brewer(name = "Veronese")[4],
                                met.brewer(name = "Veronese")[6])) + 
  
  # # fill the area under the curve with colour
  # geom_area(aes(fill = group, group = group), alpha = 0.3) + 
  # scale_fill_manual(values = c(met.brewer(name = "Veronese")[1],
  #                               met.brewer(name = "Veronese")[2],
  #                               met.brewer(name = "Veronese")[4],
  #                               met.brewer(name = "Veronese")[6])) + 
  theme(text = element_text(size = 12))

w_freq
```

### Coefficient of variation

Rhyme words

```{r, warning=FALSE}
all_ranks <- rhyme_words %>% 
  count(word, sort = T) %>% 
  mutate(rel_freq_total = n / nrow(rhyme_words))

all_ranks

v <- NULL

for (i in 1:100) {
  sample_rhymes <- rhyme_words %>% 
    sample_n(20000) %>% 
    count(word, sort = T) %>% 
    mutate(rel_freq = n / 20000) %>% 
    select(-n) 
  
  x <- all_ranks %>% 
    left_join(sample_rhymes, by = "word") %>% 
    mutate(rel_freq = ifelse(is.na(rel_freq), 0, rel_freq)) %>% 
    pull(rel_freq)
  
  v[[i]] <- x
  
}

res <- as.data.frame(do.call(cbind, v)) %>% 
  cbind(all_ranks$word) %>% 
  rename(word = `all_ranks$word`) %>% 
  head(4000) %>% # top 1000 ranked words
  rowwise() %>% 
  mutate(Mean = mean(c_across(V1:V10)),
         SD = sd(c_across(V1:V10)),
         CV = SD/Mean)  %>% 
  ungroup() %>% 
  mutate(rank = row_number())

res %>% 
  select(V1:V5, word, Mean, SD, CV) %>% head()

# subset for plot
cv_rhymes <- res %>% 
  select(rank, CV) %>% 
  mutate(corpus = "Рифмы: отд. слова")
```

Inline words

```{r, warning=FALSE}
total_ranks <- corpus_1835 %>% 
  unnest_tokens(input = text_raw, output = word, token = "words") %>% 
  group_by(word) %>% 
  count(sort = T)

head(total_ranks)

v <- NULL

for (i in 1:100) {
  sample_words <- corpus_1835 %>% 
    unnest_tokens(input = text_raw, output = word, token = "words") %>% 
    sample_n(20000) %>% 
    count(word) %>% 
    mutate(rel_freq = n / 20000) %>% 
    select(-n) 
  
  x <- total_ranks %>% 
    left_join(sample_words, by = "word") %>% 
    mutate(rel_freq = ifelse(is.na(rel_freq), 0, rel_freq)) %>% 
    pull(rel_freq)
  
  v[[i]] <- x
  
}

res_all <- as.data.frame(do.call(cbind, v)) %>% 
  cbind(total_ranks$word) %>% 
  rename(word = `total_ranks$word`) %>% 
  head(4000) %>% # top 1000 ranked words
  rowwise() %>% 
  mutate(Mean = mean(c_across(V1:V10)),
         SD = sd(c_across(V1:V10)),
         CV = SD/Mean)  %>% 
  ungroup() %>% 
  mutate(rank = row_number())

res_all %>%  
  select(V1:V5, word, Mean, SD, CV) %>% head()

# subset for plot & merge with rhymes CV data
cv_all <- res_all %>% 
  select(rank, CV) %>% 
  mutate(corpus = "Корпус-1835: отд. слова (все)") 
  
  
cv_plt <- rbind(cv_rhymes, cv_all) %>% 
  ggplot(aes(x = rank, y = CV, color = corpus)) + 
  geom_point(shape = 1, alpha = 0.6) + 
  geom_vline(xintercept = 300, lty = 3) + 
  geom_smooth(color = met.brewer("Veronese")[3], lty = 2) + 
  labs(x = "Ранг", y = "Коэффициент вариации",
       title = "Б. Коэффициент вариации") + 
  facet_wrap(~corpus, scales = "free", ncol = 1) + 
  scale_x_continuous(breaks = c(1, seq(1000, 4000, 1000))) + 
  scale_color_manual(values = c(met.brewer("Veronese")[1],
                                met.brewer("Veronese")[5])) + 
  theme(axis.line.x.bottom = element_line(colour = "black"),
        axis.line.y.left = element_line(colour = "black"), 
        text = element_text(size = 12), 
        legend.position = "None")

cv_plt
```

```{r, warning=FALSE}
# layout <- "
# AAAAAAA#BBBB
# AAAAAAA#BBBB
# AAAAAAA#BBBB
# AAAAAAA#BBBB
# "
# 
# w_freq + cv_plt + plot_layout(design = layout)

plot_grid(w_freq, cv_plt, 
          labels = NULL,
          rel_widths = c(2,1),
          ncol=2)
```

```{r, eval=FALSE}
ggsave("plots/fig_5-1-1.png", plot = last_plot(), dpi = 300,
       width = 10, height = 6, bg = "white")
```

#### bw version

```{r, warning=FALSE, eval=FALSE}
w_freq <- rbind(unigram_freq_full, unigram_freq_rhymes,
      bigram_freq_full, bigram_freq_rhymes) %>% 
  group_by(group) %>% 
  mutate(rank = row_number()) %>% 
  #slice_head(n = 1000) %>% 
  ggplot(aes(x = log(rank), y = log(n), group = group, color = group)) + 
  geom_line(linewidth = 1) + 
  facet_wrap(~group, scales = "free") + 
  theme(legend.position = "None") + 
  labs(x = "Ранг (log)", y = "Частотность (log)", 
       title = "A. Распределение абсолютных частот") + 
  #scale_x_continuous(breaks = c(1, seq(250, 1000, 250))) + 
  scale_color_manual(values = c("grey10", "grey10", "grey30", "grey30")) + 
  
  theme(text = element_text(size = 12))


cv_plt <- rbind(cv_rhymes, cv_all) %>% 
  ggplot(aes(x = rank, y = CV, color = corpus)) + 
  geom_point(shape = 1, alpha = 0.6) + 
  geom_vline(xintercept = 300, lty = 3) + 
  geom_smooth(color = "grey80", lty = 2) + 
  labs(x = "Ранг", y = "Коэффициент вариации",
       title = "Б. Коэффициент вариации") + 
  facet_wrap(~corpus, scales = "free", ncol = 1) + 
  scale_x_continuous(breaks = c(1, seq(1000, 4000, 1000))) + 
  scale_color_manual(values = c("grey10", "grey20")) + 
  theme(# axis.line.x.bottom = element_line(colour = "black"),
        # axis.line.y.left = element_line(colour = "black"), 
        text = element_text(size = 12), 
        legend.position = "None")

plot_grid(w_freq, cv_plt, 
          labels = NULL,
          rel_widths = c(2,1),
          ncol=2)

ggsave("plots/bw/fig_5-1-1.png", plot = last_plot(), dpi = 300,
       width = 10, height = 6, bg = "white")
```

### C-1835 vs RNC comparison

Number of rhymes found in the RNC & Corpus-1835 is very different (considerbly more texts in corpus-1835 for the respective years)

```{r}
rhymes %>% 
  filter(year %in% c("1835", "1836", "1837", "1838", "1839", "1840")) %>% 
  count(year, corpus) %>% 
  ggplot(aes(x = year, y = n, fill = corpus)) + 
  geom_col(position = "dodge") + 
  scale_fill_manual(values = c(met.brewer(name = "Veronese")[4],
                               met.brewer(name = "Veronese")[7]))
```

## Hapax richness

Percentage of hapax legomena overall - \~52%

```{r}
rhymes %>% 
  group_by(corpus, rhyme_alph) %>% 
  count(sort = T) %>% 
  filter(n == 1) %>% 
  ungroup() %>% 
  count(corpus) %>% 
  mutate(perc_rnc = round((n / nrow(rnc_rhymes)) * 100, 2),
         perc_1835 = round((n / nrow(rhymes_1835)) * 100, 2))
```

Number of hapax legomena in each 5-year period in RNC

```{r, message=FALSE, warning=FALSE, eval=FALSE, include=FALSE}
library(wesanderson)

total_count <- rnc_rhymes %>% 
  mutate(decade = floor( as.numeric(year) / 5) * 5) %>% 
  count(decade) %>% 
  rename(Total = n)

rnc_rhymes %>% 
  mutate(decade = floor( as.numeric(year) / 5) * 5) %>% 
  select(rhyme_alph, decade) %>% 
  distinct() %>%
  count(decade) %>% 
  rename(`Unique rhymes` = n) %>% 
  left_join(total_count, by = "decade") %>% 
  pivot_longer(!decade, names_to = "group") %>% 
  ggplot(aes(x = decade, y = value, fill = group)) +
    geom_col(width = 3, position = "dodge") +
    scale_fill_manual(values = c(wes_palette("Royal1")[1],
                                 wes_palette("Royal1")[2])) + 
    scale_x_continuous(breaks = seq(1775, 1845, 10)) +
    labs(
         y = "Number of rhymes detected",
         fill = "",
         title = "Number of rhymes per period",
         subtitle = "Canonical corpus") + 
  theme(legend.position = "bottom",
        axis.title.x = element_blank(),
        legend.text = element_text(size = 14))
```

Hapax richness in each year in corpus-1835

```{r}
# count number of hapaxes only
hapax_per_year <- rhymes_1835 %>% 
  group_by(year) %>% 
  count(rhyme_alph) %>% 
  ungroup() %>% 
  filter(n == 1) %>% 
  count(year) %>% 
  rename(hapax = n)

head(hapax_per_year)

# total number of rhymes
total <- rhymes_1835 %>% 
  group_by(year) %>% 
  count(rhyme_alph) %>% 
  ungroup() %>% 
  count(year) %>% 
  rename(total = n)

# % of hapaxes
hapax_archive <- hapax_per_year %>% 
  left_join(total, by = "year") %>% 
  mutate(perc_archive = round( (hapax / total)*100, 1 ),
         year = as.character(year))

hapax_archive
```

```{r, warning=FALSE, include=FALSE}
# Discard unused vars
rm(bigram_freq_full, bigram_freq_rhymes, hapax_archive, hapax_per_year,
   total, total_count, unigram_freq_full, unigram_freq_rhymes, s)
```

## Fig. 5-1-2. RNC / C1835 - Random samples rhyme intersection

Select only rhymes before year 1830 from canonic corpus

```{r}
rnc_rhymes_before1830 <- rnc_rhymes %>% 
  filter(as.numeric(year) < 1830)
```

Run loop that will take 100 random samples from each year of Corpus-1835 and compare it with the full set of rhymes from RNC

```{r, eval=FALSE}
x_1 <- NULL
x_2 <- NULL
year_count <- NULL
perc_intersect <- NULL

random <- NULL
df <- NULL


for (j in 1:100) { # take 100 random samples for each year
  
  for (i in 1:length(unique(rhymes_1835$year))) {
  
    y <- unique(rhymes_1835$year)[i]
    year_count[i] <- y
  
    # select all unique rhymes from canonic corpus before 1830
    x_1 <- rnc_rhymes_before1830 %>% 
      #filter(as.numeric(year) < as.numeric(y)) %>% 
      select(rhyme_alph) %>% 
      distinct() %>% 
      pull(rhyme_alph)
    
    # take 100 random rhymes from corpus-1835
    x_2 <- rhymes_1835 %>% 
      filter(as.numeric(year) %in% as.numeric(y)) %>% 
      select(rhyme_alph) %>% 
      distinct() %>% 
      sample_n(100) %>% 
      pull(rhyme_alph)
    
    # length(x_1) # all rhymes before year x
    # length(x_2) # 100 random unique rhymes
    
    # count number of intersections
    test <- length(intersect(x_1, x_2))
    # length(test)
  
    perc_intersect[i] <- test
  }
  
  random <- tibble(
      a = j,
      year_count = unlist(year_count),
      n = unlist(perc_intersect))
  
    df <- rbind(df, random)
}

head(df)
glimpse(df)
```

```{r, eval=FALSE}
df %>% 
  ggplot(aes(x = as.numeric(year_count), 
             y = n, group = year_count)) + 
  geom_boxplot() + 
  geom_jitter(alpha = 0.3, color = met.brewer(name = "Veronese")[5]) + 
  scale_y_continuous(limits = c(0,100)) + 
  scale_x_continuous(breaks = c(1835:1840)) + 
  labs(x = "Год",
       y = "Число пересечений (из 100 возможных)" #,
       #title = "Количество пересечений", 
       #subtitle = "между случайной выборкой рифм из Корпуса-1835 (100 рифм, 100 итераций)\nи всеми известными рифмами из НКРЯ, датированными до соответствующего года"
       )
```

```{r, eval=FALSE}
ggsave(filename = "plots/fig_5-1-2.png", plot = last_plot(), dpi = 300,
       width = 6, height = 4, bg = "white")
```

Some more analysis for 1835 rhymes? why the mean is so different?

```{r}
glimpse(rhymes_1835)
glimpse(corpus_1835)

rhymes_1835 %>%
  filter(year == "1835") %>% 
  left_join(corpus_1835 %>% select(text_id, author_text),
            by = "text_id") %>% 
  count(author_text, sort = T) %>% 
  filter(author_text != "" & n > 50)
```

There is definitely a bias because of dates incompatibility in RNC & Corpus-1835 (e.g. reprints of Zhukovsky's poems included in C-1835 but also found in RNC before 1830). Perform the same loop without four canonical most frequent authors.

We can also take into account if the intersected rhyme was in the list of the most frequent rhymes in general. That would mean that these rhymes are stable & redundant.

To count which of the top rhymes are repeated: change \s to \_, paste rhymes & then count.

```{r}
# filter out authors
rhymes_test <- rhymes_1835 %>%
  left_join(corpus_1835 %>% select(text_id, author_text),
            by = "text_id") %>% 
  filter(!author_text %in% c("Жуковский В.А.", "Крылов И.А.", "Баратынский Е.А.",
                             "Пушкин А.С.")) %>% 
  mutate(rhyme_alph = str_replace(rhyme_alph, " ", "_"))



rnc_rhymes_before1830 <- rnc_rhymes_before1830 %>% 
  mutate(rhyme_alph = str_replace(rhyme_alph, " ", "_"))

# count most freq rhymes
top_rnc <- rnc_rhymes_before1830 %>% 
  count(rhyme_alph, sort = T) 

head(top_rnc)

top_rnc %>% pull(n) %>% quantile(c(0.5, 0.9, 0.95, 0.98, 0.99, 0.991, 1))

top_rnc_rhymes <- top_rnc %>% 
  filter(n > 9) %>% 
  pull(rhyme_alph)

print(paste("Length of the vector of rhymes appearing more than 10 times:", 
            length(top_rnc_rhymes))) 
```

```{r}
# loop

x_1 <- NULL
x_2 <- NULL
year_count <- NULL
perc_intersect <- NULL
perc_top <- NULL
top_counter <- NULL

t <- NULL
random <- NULL
df <- NULL


for (j in 1:100) { # take 100 random samples for each year
  
  for (i in 1:length(unique(rhymes_test$year))) {
  
    y <- unique(rhymes_test$year)[i]
    year_count[i] <- y
  
    # select all unique rhymes from canonic corpus before 1830
    x_1 <- rnc_rhymes_before1830 %>% 
      #filter(as.numeric(year) < as.numeric(y)) %>% 
      select(rhyme_alph) %>% 
      distinct() %>% 
      pull(rhyme_alph)
    
    # take 100 random rhymes from corpus-1835
    x_2 <- rhymes_test %>% 
      filter(as.numeric(year) %in% as.numeric(y)) %>% 
      select(rhyme_alph) %>% 
      distinct() %>% 
      sample_n(100) %>% 
      pull(rhyme_alph)
    
    # length(x_1) # all rhymes before year x
    # length(x_2) # 100 random unique rhymes
    
    # count number of intersections
    test <- length(intersect(x_1, x_2))
    # length(test)
  
    perc_intersect[i] <- test
    
    t <- intersect(x_1, x_2)
    perc_top[i] <- length(intersect(t, top_rnc_rhymes))
    top_counter[i] <- paste(intersect(t, top_rnc_rhymes), collapse = " ")
    
  }
  
  random <- tibble(
      a = j,
      year_count = unlist(year_count),
      n = unlist(perc_intersect),
      perc_top = unlist(perc_top),
      rhymes_top = unlist(top_counter))
  
    df <- rbind(df, random)
}

head(df)
glimpse(df)
```

Look into the top-freq RNC pairs which were found in trials most frequently

```{r}
# top rhymes
df %>% 
  select(rhymes_top) %>% 
  separate_rows(rhymes_top, sep = " ") %>% 
  count(rhymes_top, sort = T) %>% 
  head(20)

# distribution
df %>% 
  select(rhymes_top) %>% 
  separate_rows(rhymes_top, sep = " ") %>% 
  count(rhymes_top, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  ggplot(aes(x = rank, y = n)) + geom_col() + theme(axis.text.x = element_blank())
```

Create a boxplot for percentage of intersections

```{r}
glimpse(df)
df %>% 
  select(-rhymes_top, -a) %>% 
  pivot_longer(!year_count) %>% 
  mutate(name = ifelse(name == "n", "Всего пересечений", "Пересечений среди частотных рифм НКРЯ")) %>% 
  ggplot(aes(x = as.factor(year_count), 
             y = value, color = name)) + 
  
  geom_boxplot(position = "dodge") + 
  
  geom_point(position = position_jitterdodge(), alpha = 0.2) + 
  
  scale_color_manual(values = c(met.brewer("Veronese")[5],
                                met.brewer("Veronese")[3])) + 
  expand_limits(y = c(0, 100)) + 
  labs(x = "Год", 
       y = "Число пересечений (из 100 возможных)",
       color = "") +
  theme(legend.position = "bottom", 
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.text = element_text(size = 12))


```

```{r, eval=FALSE}
ggsave(filename = "plots/fig_5-1-2.png", plot = last_plot(), dpi = 300,
       width = 8, height = 6, bg = "white")
```

#### bw

```{r, eval=FALSE}
df %>% 
  select(-rhymes_top, -a) %>% 
  pivot_longer(!year_count) %>% 
  mutate(name = ifelse(name == "n", "Всего пересечений", "Пересечений среди частотных рифм НКРЯ")) %>% 
  ggplot(aes(x = as.factor(year_count), 
             y = value, color = name)) + 
  
  geom_boxplot(position = "dodge") + 
  
  geom_point(position = position_jitterdodge(), alpha = 0.2) + 
  
  scale_color_manual(values = c("grey5", "grey70")) + 
  expand_limits(y = c(0, 100)) + 
  labs(x = "Год", 
       y = "Число пересечений (из 100 возможных)",
       color = "") +
  theme(legend.position = "bottom", 
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.text = element_text(size = 12))

ggsave(filename = "plots/bw/fig_5-1-2.png", plot = last_plot(), dpi = 300,
       width = 8, height = 6, bg = "white")
```

## Kendall rank cor

sHow much rankings within language are similar to those in rhyme freq

### inline freq

Calculate frequency of words which are not in rhyme position

```{r}
inline_freq <- corpus_1835 %>% 
  select(text_raw) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_inline = row_number())

head(inline_freq)
```

### rhyme words freq

```{r}
rhyme_freq <- rhymes_1835 %>% 
  unnest_tokens(input = rhyme_alph, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_rhyme = row_number())

head(rhyme_freq)
```

### ranks cor test

Comparison of ranked lists demonstration (tau max = 1, tau min = -1):

```{r}
cor.test(c(1,2,3,4,5), c(1,2,3,4,5), method = "kendall")
cor.test(c(1,2,3,4,5), c(3,2,5,1,4), method = "kendall")
cor.test(c(1,2,3,4,5), c(5,4,3,2,1), method = "kendall")
```

#### mfw 100

```{r}
mfw_100_rhyme <- rhyme_freq %>% 
  head(100) %>% 
  select(-n) %>% 
  left_join(inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_100_rhyme$rank_rhyme, mfw_100_rhyme$rank_inline, method = "kendall")

mfw_100_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  head(25)

nrow(mfw_100_rhyme)
```

#### mfw 1000

```{r}
mfw_1000_rhyme <- rhyme_freq %>% 
  head(1000) %>% 
  select(-n) %>% 
  left_join(inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

head(mfw_1000_rhyme)

cor.test(mfw_1000_rhyme$rank_rhyme, mfw_1000_rhyme$rank_inline, method = "kendall")
```

#### mfw 10000

```{r}
mfw_10000_rhyme <- rhyme_freq %>% 
  head(10000) %>% 
  select(-n) %>% 
  left_join(inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_10000_rhyme$rank_rhyme, mfw_10000_rhyme$rank_inline, method = "kendall")
```

### iamb & trochee cor test separately

#### iamb freq

Calculate inline & rhyme freqs in iambic poems

```{r}
iamb_inline_freq <- corpus_1835 %>% 
  filter(meter == "Iamb") %>% 
  select(text_raw) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_inline = row_number())

head(iamb_inline_freq)

iamb_rhyme_freq <- rhymes_1835 %>% 
  # filter only iambic poems
  left_join(corpus_1835 %>% select(text_id, meter),
            by = "text_id") %>% 
  filter(meter == "Iamb") %>% 
  # count words
  unnest_tokens(input = rhyme_alph, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_rhyme = row_number())

head(iamb_rhyme_freq)
```

#### cor texts

```{r}
mfw_100_rhyme <- iamb_rhyme_freq %>% 
  head(100) %>% 
  select(-n) %>% 
  left_join(iamb_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_100_rhyme$rank_rhyme, mfw_100_rhyme$rank_inline, method = "kendall")

mfw_100_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  head(50)

nrow(mfw_100_rhyme)

### --- tests for 1000 and 10 000 MFW --- 
mfw_1000_rhyme <- iamb_rhyme_freq %>% 
  head(1000) %>% 
  select(-n) %>% 
  left_join(iamb_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_1000_rhyme$rank_rhyme, mfw_1000_rhyme$rank_inline, method = "kendall")

mfw_1000_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  tail(25)

# 10 000 

mfw_10000_rhyme <- iamb_rhyme_freq %>% 
  head(10000) %>% 
  select(-n) %>% 
  left_join(iamb_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_10000_rhyme$rank_rhyme, mfw_10000_rhyme$rank_inline, method = "kendall")

mfw_10000_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  tail(25)
```

#### trochee freqs

```{r}
tr_inline_freq <- corpus_1835 %>% 
  filter(meter == "Trochee") %>% 
  select(text_raw) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_inline = row_number())

head(tr_inline_freq)

tr_rhyme_freq <- rhymes_1835 %>% 
  # filter only iambic poems
  left_join(corpus_1835 %>% select(text_id, meter),
            by = "text_id") %>% 
  filter(meter == "Trochee") %>% 
  # count words
  unnest_tokens(input = rhyme_alph, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_rhyme = row_number())

head(tr_rhyme_freq)
```

Cor tests

```{r}
mfw_100_rhyme <- tr_rhyme_freq %>% 
  head(100) %>% 
  select(-n) %>% 
  left_join(tr_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_100_rhyme$rank_rhyme, mfw_100_rhyme$rank_inline, method = "kendall")

mfw_100_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  head(50)

nrow(mfw_100_rhyme)

### --- tests for 1000 and 10 000 MFW --- 
mfw_1000_rhyme <- tr_rhyme_freq %>% 
  head(1000) %>% 
  select(-n) %>% 
  left_join(tr_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_1000_rhyme$rank_rhyme, mfw_1000_rhyme$rank_inline, method = "kendall")

mfw_1000_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  tail(25)

# 10 000 

mfw_10000_rhyme <- tr_rhyme_freq %>% 
  head(10000) %>% 
  select(-n) %>% 
  left_join(tr_inline_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_10000_rhyme$rank_rhyme, mfw_10000_rhyme$rank_inline, method = "kendall")

mfw_10000_rhyme %>% 
  arrange(-desc(rank_rhyme)) %>% 
  tail(25)
```
