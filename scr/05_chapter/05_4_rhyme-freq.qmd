---
title: "05_3_rhymes_freq"
format: md
editor: visual
---

### load pckg

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

library(igraph)
library(tidygraph)
library(ggraph)

library(MetBrewer)
library(patchwork)
theme_set(theme_minimal())
```

### load data

```{r}
rhymes <- read.csv("../../data/ch5/rhymes_parsed_closure.csv") %>% 
  select(-X) %>% 
  distinct() %>%  # if redubplicated for some reason
  mutate(rhyme_alph = tolower(rhyme_alph),
         rhyme_pair = tolower(rhyme_pair),
         from = tolower(from),
         to = tolower(to)) %>% 
  # fix typo
  mutate(from = ifelse(from == "искуства", "искусства", from),
         to = ifelse(to == "искуства", "искусства", to))

glimpse(rhymes)


print(paste("Total number of rhymed texts:", 
            rhymes %>% 
              select(id) %>% distinct() %>% nrow(),
            "\nTotal number of rhymes:", nrow(rhymes)
  ))
```

Check rhyme detection

```{r}
rhymes %>% 
  filter(id == "M__P_1938")
```

Metadata

```{r}
corpus_1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")

```

Import rhymer data

```{r}
rhymer <- read_file("../../data/ch5/rhymer.txt")

rhymer <- tibble(word = rhymer) %>% 
  separate_rows(word, sep = "\n") %>% 
  filter(word != "") %>% 
  mutate(word = tolower(word)) 
```

# bigrams

## basic stats

```{r}
#glimpse(rhymes)

print(paste("Total number of found rhymes in corpus-1835:", nrow(rhymes)))

print(paste("Number of unique (alph. reordered) rhymes:", length(unique(rhymes$rhyme_alph))))

# Percent of rhymes with FREQ = 1
n_hapax_legomenas <- rhymes %>% 
  count(rhyme_alph) %>% filter(n == 1) %>% nrow()

print( paste( "Percent of rhymes encountered only once in Corpus-1835:", 
              round((n_hapax_legomenas / nrow(rhymes)) * 100, 2) ))


# total distribution features
print("Distribution of the rhyme bigramm frequencies")
rhymes %>% 
  count(rhyme_alph) %>% summary()

rhymes %>% 
  count(rhyme_alph) %>% pull(n) %>% quantile(c(0.90, 0.95, 0.97, 0.99, 0.991, 1))

print("Number of rhymes enountered more than 9 times (99% percentile)")
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  filter(n > 9) %>% 
  nrow()
```

### 

```{r}

```

Examples of top rhymes in Corpus-1835

```{r}
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  head(30)
```

# words

## freq distribution of rhyme words

```{r}
# summary statistics of rhyme word counts
rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% summary()

# most frequent rhyme words
rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(50)
```

### MFW in rhymes vs all

Frequency of inline words

```{r}
inline_freq <- corpus_1835 %>% 
  select(text_raw) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_inline = row_number())

head(inline_freq)
```

```{r}

# glimpse(rhymes)

rhyme_freq <- rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_rhyme = row_number())

head(rhyme_freq, 100)

rhymes %>% 
  filter(str_detect(from, "варшав") | str_detect(to, "варшав"))
```

Comparison of ranked lists demonstration (tau max = 1, tau min = -1):

```{r}
cor.test(c(1,2,3,4,5), c(1,2,3,4,5), method = "kendall")
cor.test(c(1,2,3,4,5), c(3,2,5,1,4), method = "kendall")
cor.test(c(1,2,3,4,5), c(5,4,3,2,1), method = "kendall")
```

Tests for correlation between ranks in rhyme vs in inline words

MFW-100

```{r}
mfw_100_rhyme <- inline_freq %>% 
  head(100) %>% 
  select(-n) %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_100_rhyme$rank_inline, mfw_100_rhyme$rank_rhyme, method = "kendall")

mfw_100_rhyme %>% 
  arrange(-desc(rank_rhyme))
```

MFW-1000

```{r}
mfw_1000 <- inline_freq[1:1000,] %>% select(-n)

mfw_1000_rhyme <- mfw_1000 %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

head(mfw_1000_rhyme)

cor.test(mfw_1000_rhyme$rank_inline, mfw_1000_rhyme$rank_rhyme, method = "kendall")
```

MFW-10000

```{r}
mfw_10000_rhyme <- inline_freq %>% 
  head(10000) %>% 
  select(-n) %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_10000_rhyme$rank_inline, mfw_10000_rhyme$rank_rhyme, method = "kendall")
```

```{r}
rm(inline_freq, mfw_100_rhyme, mfw_1000, mfw_1000_rhyme, mfw_10000_rhyme,
   rhyme_freq, n_hapax_legomenas)
```

### One-word network test

```{r}

# glimpse(rhymes)

rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T)

# select the words that rhyme with a particular word and look into it
word <- rhymes %>% 
  filter(str_detect(from, "любви") | str_detect(to, "любви")) %>% 
  filter(str_detect(from, "и$") & str_detect(to, "и$"))

print(paste("Number of rhyme pairs including the word 'любви':", nrow(word)))
```

Fastly create a network out of these words and look at the frequency of words & pairs

```{r}

node_freq <- word %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word)

nodelist <- tibble(source = unique(c(word$from, word$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source")
nodelist


edges_freq <- word %>% 
  count(rhyme_alph)

edgelist <- word %>% 
  left_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos)

word_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

word_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = 20), color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source) , 
                 hjust = 0.5, vjust = -0.8,
                 size = 6
                 )


```

Same net but without non-frequent edges

```{r}
edges_freq <- word %>% 
  count(rhyme_alph) %>% 
  filter(n > 1)

edgelist <- word %>% 
  inner_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos)

node_freq <- word %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word) 

nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source")
nodelist



word_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

# same with no edges with freq 1
word_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = 20), color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source) , 
                 hjust = 1.1, vjust = -.05,
                 size = 10
                 )
```

### mfw net

```{r}
# top 10-20 masc / fem / dactyllic rhymewords & the net of words rhyming with them
# how connected is this net? how it looks like? which words are in the very centre?
```

## Endings

### todo Freq of char 2grams

```{r}

```

### todo Freq of char 3grams

```{r}

```

#### net fn

Function to create a custom net from selected df (see columns for 'ending' above)

```{r}
ending_net <- function(ending, edges_min) {
  
  # count frequency of edges
  edges_freq <- ending %>% 
    count(rhyme_alph)
  
  # create edgelist
  edgelist <- ending %>% 
    left_join(edges_freq, by = "rhyme_alph") %>% 
    select(from, to, n, from_pos, to_pos) %>% 
    filter(n > edges_min) # filter edges with freq lower than edges_min
  
  # count nodes frequency
  node_freq <- ending %>% 
    unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
    count(word, sort = T) %>% 
    rename(source = word) 
  
  # create nodelist
  nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
    #mutate(idn = row_number()) %>% 
    left_join(node_freq, by = "source") %>% 
    # create a column about a word's / node's presence in rhymer
    mutate(rhymer_pr = ifelse(source %in% rhymer$word, "present", "not_present"))
    #filter(n > 10)
  
  # nodelist
  
  # create graph
  ending_net <- tbl_graph(nodes = nodelist,
                         edges = edgelist, 
                         directed = FALSE)
}

```

#### -va rhyme

Select rhyme pairs with a particular ending

```{r}
ending <- rhymes %>% 
  filter(str_detect(from, "ва$") & str_detect(to, "ва$"))

print(paste("Number of rhyme pairs ending with '-ва':", nrow(ending)))

glimpse(ending)
```

Ending net without filtering

```{r}
# create the full network with no restriction on the edge frequency
va_full <- ending_net(ending, edges_min = 0)

va_full %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n , alpha = n
                     ), color = met.brewer("Veronese")[7]) + 
  geom_node_point(aes(size = n , 
                      color = rhymer_pr
                      ), alpha = 0.95 #, color = met.brewer("Veronese")[7]
                  ) + 
  geom_node_text(aes(label = source,
                     alpha = n
                     ) #, hjust = 1, vjust = -1
                 ) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[5]))

# ggsave("plots/net_ending_test.png", plot = last_plot(), 
#        width = 12, height = 9, 
#        dpi = 300, bg = "white")
```

The same network with filtering out the edges appeared only once

```{r}
va_freq1 <- ending_net(ending, edges_min = 1)

va_freq1 %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[5]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source #, alpha = n
                     ) , hjust = 0.5, vjust = -1
                 )

# ggsave("plots/net_ending_test_MF.png", plot = last_plot(), 
#        width = 12, height = 9, 
#        dpi = 300, bg = "white")
```

Separate graphs for masculine / feminine endings

```{r}
masc <- ending %>% 
  filter(from_closure == "masc" & to_closure == "masc") 

nrow(masc)

va_masc <- ending_net(masc, edges_min = 0)


va_m_net <- va_masc %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[4]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source , #alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Мужские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))


va_m_net
```

Feminine

```{r}
fem <- ending %>% 
  filter(from_closure == "fem" & to_closure == "fem") 

nrow(fem)

va_fem <- ending_net(fem, edges_min = 1)


va_f_net <- va_fem %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[3]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source , #alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Женские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

va_f_net
```

```{r}
layout <- "
AAA#BBBB
AAA#BBBB
"

va_m_net  + va_f_net + plot_layout(design = layout)

ggsave(filename = "plots/va_masc_fem_net.png", plot = last_plot(), dpi = 300,
       width = 12, heigh = 9, bg = "white")
```

#### -ba rhymes

Less frequent ending -ba

```{r}
ba_ending <- rhymes %>% 
  filter(str_detect(from, "ба$") & str_detect(to, "ба$")) 

print(paste("Number of rhyme pairs ending with '-ба':", nrow(ba_ending)))

# glimpse(ba_ending)
```

Full network

```{r}
ba_full <- ending_net(ba_ending, edges_min = 0)

ba_full %>% activate(nodes)

ba_full %>%
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = n, alpha = n)) + 
  geom_node_text(aes(label = source, 
                     color = rhymer_pr) , hjust = 0, vjust = 1.5
                 ) + 
  scale_color_manual(values = c(met.brewer("Veronese")[3],
                                met.brewer("Veronese")[7]))
```

Masculine & feminine devision

```{r}
ba_masc <- ba_ending %>% 
  filter(from_closure == "masc" & to_closure == "masc")

nrow(ba_masc)

ba_masc <- ending_net(ba_masc, edges_min = 0)


ba_m_net <- ba_masc %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[4]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source, #, alpha = n
                     color = rhymer_pr) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Мужские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

ba_m_net
```

```{r}
ba_fem <- ba_ending %>% 
  filter(from_closure == "fem" & to_closure == "fem")

ba_fem <- ending_net(ba_fem, edges_min = 0)

ba_f_net <- ba_fem %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[3]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source, #, alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Женские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

ba_f_net
```

Merge feminine & masc nets

```{r}
layout <- "
AAAA#BBBBB
AAAA#BBBBB
"

ba_m_net  + ba_f_net + plot_layout(design = layout)

ggsave(filename = "plots/ba_masc_fem_net.png", plot = last_plot(), dpi = 300,
       width = 12, heigh = 9, bg = "white")
```

#### todo -oi rhymes

to do

-   percentage of -oi lines vs all lines

-   \% of words on -oi in lines vs in rhyme

-   distribution on POS / POS features in -oi rhyming words

-   see if there's these processes that gasparov-skulacheva found & connected to the rhyme destabilisation processes

```{r}

```

To do rest:

-   add lemmas to words

-   add POS-feats & lemmas to all words

-   add abstract / concrete coeffs to nouns/adj in rhymes

## grammatical features frequency

Prepare data for POS & features tagging in pymystem (see 00_1_rhymetagger_pos)

```{r, eval=FALSE}
corpus <- readRDS("../../data/corpus1835/corpus_1835_metrics.Rds")

unique_words <- corpus %>% 
  select(text_id, text_cln) %>% 
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  pull(word)

head(unique_words)

writeLines(unique_words, "../../data/ch5/corpus_1835_unique_words.txt")
```

Next step: look into grammatical features of the MFW in the two corpora - for that ling annotation for the whole corpus-1835 is needed!

mb later compare the MFW ranked lists for nouns, verbs & adjectives (probably pronouns as well)

```{r}
# MF features in rhyme

total_items_rhyme <- length(c(rhymes$from_feats, rhymes$to_feats))

tibble(feature = c(rhymes$from_feats, rhymes$to_feats)) %>% 
  count(feature, sort = T) %>% 
  mutate(perc = round( (n / total_items_rhyme) * 100, 2 ))
```

#### masc rhymes

```{r}
from_masc <- rhymes %>% 
  filter(from_closure == "masc") %>% pull(from_feats)

to_masc <- rhymes %>% 
  filter(to_closure == "masc") %>% pull(to_feats)

total_masc <- length(c(from_masc, to_masc))

tibble(feats = c(from_masc, to_masc)) %>% 
  count(feats, sort = T) %>% 
  mutate(perc = round(n / total_masc * 100 , 1))
```
