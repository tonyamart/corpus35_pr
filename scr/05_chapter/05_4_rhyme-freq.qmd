---
title: "05_3_rhymes_freq"
format: md
editor: visual
---

### load pckg

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

# library(igraph)
library(tidygraph)
library(ggraph)

library(MetBrewer)
library(patchwork)
theme_set(theme_minimal())
```

### load data

```{r}
rhymes <- read.csv("../../data/ch5/rhymes_parsed_closure.csv") %>% 
  select(-X) %>% 
  distinct() %>%  # if redubplicated for some reason
  mutate(rhyme_alph = tolower(rhyme_alph),
         rhyme_pair = tolower(rhyme_pair),
         from = tolower(from),
         to = tolower(to)) %>% 
  # fix typo
  mutate(from = ifelse(from == "искуства", "искусства", from),
         to = ifelse(to == "искуства", "искусства", to))

glimpse(rhymes)


print(paste("Total number of rhymed texts:", 
            rhymes %>% 
              select(id) %>% distinct() %>% nrow(),
            "\nTotal number of rhymes:", nrow(rhymes)
  ))
```

Check rhyme detection

```{r}
rhymes %>% 
  filter(id == "M__P_1938")
```

Translate POS tags

```{r}
unique(c(rhymes$from_pos, rhymes$to_pos))

rhymes %>% 
  filter(from_pos == "INTJ") %>% 
  select(from, from_pos, from_feats) %>% 
  sample_n(5)

# translation based on this descr: https://ruscorpora.ru/page/instruction-morph/ 
pos_transl <- tibble(old_tag = c("S", "V", "APRO", "SPRO", 
                   "A", "ADV", "NUM", "ADVPRO",
                   "INTJ", "PART", "PR", "ANUM", "CONJ"),
       pos = c("NOUN", "VERB", "aPRON", "nPRON", 
               "ADJ", "ADV", "NUM", "advPRON",
               "INTJ", "PART", "ADP", "adjNUM", "CONJ"),
       upos = c("NOUN", "VERB", "PRON", "PRON", 
               "ADJ", "ADV", "NUM", "PRON",
               "INTJ", "PART", "ADP", "NUM", "CONJ"))
```

Metadata

```{r}
corpus_1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")

# attach meter & formula data to rhymes data
rhymes <- rhymes %>% 
  mutate(text_id = str_remove(id, "M__")) %>% 
  left_join(corpus_1835 %>% select(text_id, meter, formula), by = "text_id")
```

Import rhymer data

```{r}
rhymer <- read_file("../../data/ch5/rhymer.txt")

rhymer <- tibble(word = rhymer) %>% 
  separate_rows(word, sep = "\n") %>% 
  filter(word != "") %>% 
  mutate(word = tolower(word)) 
```

Add ending stress annotation

```{r}
vec_acc <- read_file("../../data/ch5/corpus_1835_rhymewords.accented.txt")

rw_acc <- tibble(accented = vec_acc) %>% # create one-cell tibble
  # separate one word = one row
  separate_rows(accented, sep = "\n") %>% 
  
  # create word-id column with no stress 
  mutate(word = str_remove_all(accented, "'")) 

head(rw_acc)

endings <- rw_acc %>% 
  # words with ё has no stress, stransform
  mutate(accented = str_replace_all(accented, "ё", "ё'")) %>% 
  
  # extract the ending with the stress
  mutate(ending_st = str_extract(accented, "\\w'.*?$"),
         # deal with short one-syllable words
         ending_st = ifelse(is.na(ending_st), accented, ending_st),
         # column with the ending without the stress
         ending = str_remove(ending_st, "'")) 
```

Attach endings to main data table

```{r}
rhymes <- rhymes %>% 
  left_join(endings %>% select(-accented) %>% rename(from = word, 
                                                     from_ending = ending,
                                                     from_ending_st = ending_st),
            by = "from") %>% 
  left_join(endings %>% select(-accented) %>% rename(to = word,
                                                     to_ending = ending,
                                                     to_ending_st = ending_st),
            by = "to") %>% 
  distinct()

glimpse(rhymes)

rm(vec_acc, rw_acc, endings)
```

```{r}
# bag to fix
rhymes %>% 
  filter(is.na(from_closure)) %>% 
  select(from, from_closure, from_closure_pattern, from_ending, from_ending_st) %>% 
  sample_n(15)
```

# words

## basic stats

```{r}
#glimpse(rhymes)

print(paste("Total number of found rhymes in corpus-1835:", nrow(rhymes)))

print(paste("Number of unique (alph. reordered) rhymes:", length(unique(rhymes$rhyme_alph))))

# Percent of rhymes with FREQ = 1
n_hapax_legomenas <- rhymes %>% 
  count(rhyme_alph) %>% filter(n == 1) %>% nrow()

print( paste( "Percent of rhymes encountered only once in Corpus-1835:", 
              round((n_hapax_legomenas / nrow(rhymes)) * 100, 2) ))


# total distribution features
print("Distribution of the rhyme bigramm frequencies")
rhymes %>% 
  count(rhyme_alph) %>% summary()

rhymes %>% 
  count(rhyme_alph) %>% pull(n) %>% quantile(c(0.90, 0.95, 0.97, 0.99, 0.991, 1))

print("Number of rhymes enountered more than 9 times (99% percentile)")
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  filter(n > 9) %>% 
  nrow()
```

Examples of top rhymes in Corpus-1835

```{r}
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  head(30)
```

Example of rhymes with Warsaw

```{r}

# glimpse(rhymes)

rhymes %>% 
  filter(str_detect(from, "варшав") | str_detect(to, "варшав"))
```

### one-word network test

```{r}

# glimpse(rhymes)

rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T)

# select the words that rhyme with a particular word and look into it
word <- rhymes %>% 
  filter(str_detect(from, "любви") | str_detect(to, "любви")) %>% 
  filter(str_detect(from, "и$") & str_detect(to, "и$"))

print(paste("Number of rhyme pairs including the word 'любви':", nrow(word)))
```

Fastly create a network out of these words and look at the frequency of words & pairs

```{r}

node_freq <- word %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word)

nodelist <- tibble(source = unique(c(word$from, word$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source")
nodelist


edges_freq <- word %>% 
  count(rhyme_alph)

edgelist <- word %>% 
  left_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos)

word_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

word_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = 20), color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source) , 
                 hjust = 0.5, vjust = -0.8,
                 size = 6
                 )


```

Same net but without non-frequent edges

```{r}
edges_freq <- word %>% 
  count(rhyme_alph) %>% 
  filter(n > 1)

edgelist <- word %>% 
  inner_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos)

node_freq <- word %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word) 

nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source")
nodelist



word_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

# same with no edges with freq 1
word_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = 20), color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source) , 
                 hjust = 1.1, vjust = -.05,
                 size = 10
                 )
```

```{r}
rm(edgelist, edges_freq, node_freq, nodelist, word, word_net, n_hapax_legomenas)
```

# Meters division

```{r}
# glimpse(rhymes)
# glimpse(corpus_1835)

# Number of rhymes by meter
rhymes %>% 
  count(meter, sort = T)

# extract only iambs
iamb_rhymes <- rhymes %>% 
  filter(meter == "Iamb")

# extract only trochees
tr_rhymes <- rhymes %>% 
  filter(meter == "Trochee")

# number of rhyme pairs in iamb and in trochee
nrow(iamb_rhymes)
nrow(tr_rhymes)
```

Attach upos tags to metadata

```{r}
iamb_rhymes <- iamb_rhymes %>% 
  left_join(pos_transl %>% 
              select(old_tag, upos) %>% 
              rename(from_pos = old_tag,
                     from_upos = upos),
            by = "from_pos") %>% 
  left_join(pos_transl %>% 
              select(old_tag, upos) %>% 
              rename(to_pos = old_tag,
                     to_upos = upos),
            by = "to_pos") 

tr_rhymes <- tr_rhymes %>% 
  left_join(pos_transl %>% 
              select(old_tag, upos) %>% 
              rename(from_pos = old_tag,
                     from_upos = upos),
            by = "from_pos") %>% 
  left_join(pos_transl %>% 
              select(old_tag, upos) %>% 
              rename(to_pos = old_tag,
                     to_upos = upos),
            by = "to_pos") 
```

### closures in meters

```{r}
# types of closures in meters (percentage)
# table(iamb_rhymes$from_closure)/nrow(iamb_rhymes)*100
# table(tr_rhymes$from_closure)/nrow(tr_rhymes)*100
# table(tr_rhymes$to_closure)/nrow(tr_rhymes)*100

closures <- rhymes %>% 
  select(id, from_closure, to_closure, meter, formula) 

total_meters <- closures %>% count(meter) %>% rename(total = n)

# count only matching closure types
closures %>% 
  filter(from_closure == to_closure) %>% 
  count(from_closure, meter, sort = T) %>% 
  left_join(total_meters, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2)) %>% 
  arrange(-desc(meter))


total_formula <- closures %>% 
  count(formula, sort = T) %>% 
  rename(total = n) 
  
# same for formulas
# count only matching closure types
closures %>% 
  filter(from_closure == to_closure) %>% 
  count(from_closure, formula, sort = T) %>% 
  left_join(total_formula, by = "formula") %>% 
  mutate(perc = round((n / total) * 100, 2)) %>% 
  arrange(-desc(formula))
```

not only matching pairs but all words as they are annotated

```{r}
# meters
closures %>% 
  select(-id, -formula) %>% 
  pivot_longer(!meter) %>% 
  count(meter, value) %>% 
  left_join(closures %>% 
    select(-id, -formula) %>% 
    pivot_longer(!meter) %>% 
    count(meter) %>% 
    rename(total = n), by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2)) %>% 
  arrange(-desc(meter)) 


# formulas
closures %>% 
  select(-id, -meter) %>% 
  pivot_longer(!formula) %>% 
  count(formula, value) %>% 
  left_join(closures %>% 
    select(-id, -meter) %>% 
    pivot_longer(!formula) %>% 
    count(formula) %>% 
    rename(total = n), by = "formula") %>% 
  mutate(perc = round((n / total) * 100, 2)) %>% 
  filter(str_detect(formula, "Iamb|Trochee") & value != "" & !is.na(value)) %>% 
  arrange(-desc(formula)) 
```

### fn

Functions to count and print different metrics

```{r}
top_pairs <- function(rhymes_df, clausula, n = 20) {
  rhymes_df %>% 
    filter(from_closure == clausula & to_closure == clausula) %>% 
    count(rhyme_alph, sort = T) %>% 
    head(n)
}

# NB create upos columns for this fn
pos_pairs <- function(rhymes_df, clausula, n = 20) {
  rhymes_df %>% 
  filter(from_closure == clausula & to_closure == clausula) %>% 
  mutate(pos_pair = paste(from_upos, "-", to_upos)) %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round((n / nrow(rhymes_df %>% 
                                  filter(from_closure == clausula & 
                                           to_closure == clausula))
                       ) * 100, 2)) %>% 
  head(n)
}
```

### top rhyme pairs

```{r}
# masc
print("Top pairs in iamb w/ masculine clausula:")
top_pairs(iamb_rhymes, "masc", 20)

print("Top pairs in trochee w/ masculine clausula:")
top_pairs(tr_rhymes, "masc", 20)

# fem
print("Top pairs in iamb w/ feminine clausula:")
top_pairs(iamb_rhymes, "fem", 20)

print("Top pairs in trochee w/ feminine clausula:")
top_pairs(tr_rhymes, "fem", 20)

# dactyllic
print("Top pairs in iamb w/ dactyllic clausula:")
top_pairs(iamb_rhymes, "dactylic", 20)

print("Top pairs in trochee w/ dactyllic clausula:")
top_pairs(tr_rhymes, "dactylic", 20)
```

### Top POS in pairs

```{r}
# masc
print("Top POS pairs in iamb w/ masculine clausula:")
pos_pairs(iamb_rhymes, "masc", 20)

print("Top POS pairs in trochee w/ masculine clausula:")
pos_pairs(tr_rhymes, "masc", 20)

# fem
print("Top POS pairs in iamb w/ feminine clausula:")
pos_pairs(iamb_rhymes, "fem", 20)

print("Top POS pairs in trochee w/ feminine clausula:")
pos_pairs(tr_rhymes, "fem", 20)

print("Top POS pairs in trochee w/ dactyllic clausula:")
pos_pairs(tr_rhymes, "dactylic", 20)
```

### perc of POS

POS freq in rhymes

```{r}
iamb_rhymes %>% 
  select(id, from_upos, to_upos) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% 
  mutate(perc = round( n / (iamb_rhymes %>% 
              select(id, from_upos, to_upos) %>% 
              pivot_longer(!id) %>% 
              nrow()) 
              * 100, 2)
         )

tr_rhymes %>% 
  select(id, from_upos, to_upos) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% 
  mutate(perc = round( n / (tr_rhymes %>% 
              select(id, from_upos, to_upos) %>% 
              pivot_longer(!id) %>% 
              nrow()) 
              * 100, 2)
         )
```

Inline pos

```{r}
all_pos <- read.csv("../../data/ch5/corpus_1835_pos.csv") %>% 
  select(-X) %>% 
  mutate(pos_feats = pos,
         pos = str_extract(pos, "^\\w+="),
         pos = str_remove(pos, "="),
         pos = ifelse(is.na(pos), str_extract(pos_feats, "^\\w+,"), pos),
         pos = str_remove(pos, ",")) %>% 
  left_join(pos_transl %>% rename(pos_plus = pos, 
                                  pos = old_tag), 
            by = "pos")

glimpse(all_pos)

head(all_pos, 250)
```

Extract freqs of inline words and add pos tags

```{r}
inline_freq <- corpus_1835 %>% 
  select(text_raw, meter) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln, meter) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, meter, sort = T) 

head(inline_freq, 20)

total_meters <- inline_freq %>% 
  count(meter) %>% rename(total = n)

inline_freq %>% 
  left_join(all_pos %>% rename(word = word_from), by = "word") %>% 
  count(upos, meter, sort = TRUE) %>% 
  left_join(total_meters, by = "meter") %>% 
  mutate(perc = round((n / total) * 100 , 2)) %>% 
  arrange(-desc(meter))

```

Top words in iamb masc / fem rhymes

```{r}
iamb_rhymes %>% 
  filter(from_closure == "masc" & to_closure == "masc") %>% 
  select(id, from, to) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% head(20)

iamb_rhymes %>% 
  filter(from_closure == "fem" & to_closure == "fem") %>% 
  select(id, from, to) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% head(20)

tr_rhymes %>% 
  filter(from_closure == "masc" & to_closure == "masc") %>% 
  select(id, from, to) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% head(20)

tr_rhymes %>% 
  filter(from_closure == "fem" & to_closure == "fem") %>% 
  select(id, from, to) %>% 
  pivot_longer(!id) %>% 
  count(value, sort = T) %>% head(20)
```

## Endings

### Freq of char 2grams

#### IAMB - extract endings

```{r}
glimpse(iamb_rhymes)

# iamb_rhymes %>% 
#   filter(is.na(from_ending_st) | is.na(to_ending_st)) %>% #nrow() 
#   sample_n(10)

iamb_endings <- iamb_rhymes %>% 

  # add char if ending is too short
  mutate(from = ifelse(nchar(from_ending) < 2 & nchar(from) >= 2, 
                       str_extract(from, "\\w{2}$"), 
                       from_ending),
         to = ifelse(nchar(to_ending) < 2 & nchar(to) >= 2, 
                     str_extract(to, "\\w{2}$"), 
                     to_ending)) %>%

  # create paired vars
  mutate(ending = paste0("-", from, 
                         " -", to),
         upos_pair = paste(from_upos, to_upos),
         feats_pair = paste0(from_feats, " ---- ", to_feats),
         closure_pair = paste(from_closure, to_closure),
         
         ending_pair_st = paste0(from_ending_st, " ---- ", to_ending_st)
         ) %>% 
  select(meter, rhyme_alph, ending, upos_pair, closure_pair, feats_pair, 
         ending_pair_st) %>% 
  
  # major data drop -----------> 
  # fix this later !!!
  filter(!str_detect(ending, "NA"))

glimpse(iamb_endings)

iamb_endings %>% 
  sample_n(10)
```

####  all bigram endings stats

```{r}
iamb_endings %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n / nrow(iamb_endings)) * 100, 2)) %>% 
  head(30)

# masculine endings
iamb_endings %>% 
  filter(str_detect(closure_pair, "masc")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round(n / nrow(iamb_endings %>% 
                                  filter(str_detect(closure_pair, "masc"))) * 100, 2)) %>% 
  head(20)


# fem endings
iamb_endings %>% 
  filter(str_detect(closure_pair, "fem")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round(n / nrow(iamb_endings %>% 
                                  filter(str_detect(closure_pair, "fem"))) * 100, 2)) %>% 
  head(20)
```

#### oi-oi analysis

```{r}

iamb_endings %>% 
  count(ending, closure_pair, sort = T) %>% 
  mutate(perc = round((n / nrow(iamb_endings)) * 100, 2)) %>% 
  filter(ending == "-ой -ой")

# test wrongly tagged endings
iamb_endings %>% 
  filter(ending == "-ой -ой" & closure_pair == "fem fem") %>% head()

iamb_endings %>% 
  filter(ending == "-ой -ой") %>% 
  count(upos_pair, sort = T) 

iamb_endings %>% 
  filter(ending == "-ой -ой") %>% 
  count(feats_pair, sort = T) %>% 
  head(25)
```

### -oi inline freq

```{r}

glimpse(corpus_1835)

# extract inline words with stresses
inline_freq_st <- corpus_1835 %>% 
  select(text_acc, meter) %>% 
  separate_rows(text_acc, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_acc != "" & !str_detect(text_acc, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_acc, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+?'?\\w+$", "_ENDWORD_")) %>% 
  
  select(text_cln, meter) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # replace ' to ST 
  mutate(text_cln = str_replace_all(text_cln, "'", "ST")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, meter, sort = T) %>% 
  
  # paste stresses back
  mutate(word = str_replace_all(word, "st", "'"))




meters_total <- inline_freq_st %>% 
  group_by(meter) %>% 
  summarise(meter = meter,
              total = sum(n)) %>% distinct()

inline_freq_st %>% sample_n(15)

inline_freq_st %>% 
  mutate(ending = str_extract(word, "\\w'.*?$"),
         ending = ifelse(is.na(ending), word, ending)) %>% 
  count(meter, ending, sort = T) %>% 
  left_join(meters_total, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2) ) %>% 
  group_by(meter) %>% 
  slice_max(order_by = perc, n = 5)

inline_freq_st %>% 
  mutate(ending = str_extract(word, "\\w'.*?$"),
         ending = ifelse(is.na(ending), word, ending)) %>% 
  count(meter, ending, sort = T) %>% 
  left_join(meters_total, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2) ) %>% 
  group_by(meter) %>% 
  filter(ending == "о'й")
```

-oi rhyme freq

```{r}
meters_total <- rhymes %>% 
  select(meter, from, to) %>% 
  count(meter, sort = T) %>% 
  rename(total = n)

glimpse(rhymes)

rhymes %>% 
  select(meter, from_ending, to_ending) %>% 
  pivot_longer(!meter, values_to = "word") %>% 
  
  # data drop
  filter(!is.na(word)) %>% # <------------------- FIX THIS
  
  
  
  
  
  # mutate(word = ifelse(nchar(word) < 2, paste0("_", word), word),
  #        ending = str_extract(word, "\\w{2}$")) %>% 
  count(word, meter) %>% 
  left_join(meters_total, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2) ) %>% 
  group_by(meter) %>% 
  slice_max(order_by = perc, n = 5)


# freq in only masculine rhymes
all_masc_words <- rhymes %>% 
  select(meter, from_ending_st, to_ending_st, from_closure, to_closure) %>% 
  mutate(from = paste0(from_ending_st, "__", from_closure),
         to = paste0(to_ending_st, "__", to_closure)) %>% 
  select(-from_closure, -to_closure) %>% 
  pivot_longer(!meter, values_to = "word") %>% 
  filter(str_detect(word, "__masc")) %>% 
  select(-name) %>% 
  mutate(word = str_remove(word, "__masc"))
  

meters_total <- all_masc_words %>% count(meter) %>% rename(total = n)

all_masc_words %>% 
  # mutate(word = ifelse(nchar(word) < 2, paste0("_", word), word),
  #        ending = str_extract(word, "\\w{2}$")) %>% 
  count(word, meter) %>% 
  left_join(meters_total, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2) ) %>% 
  group_by(meter) %>% 
  slice_max(order_by = perc, n = 5)
```

### TROCHEE

```{r}
tr_endings <- tr_rhymes %>% 

  # add char if ending is too short
  mutate(from = ifelse(nchar(from_ending) < 2 & nchar(from) >= 2, 
                       str_extract(from, "\\w{2}$"), 
                       from_ending),
         to = ifelse(nchar(to_ending) < 2 & nchar(to) >= 2, 
                     str_extract(to, "\\w{2}$"), 
                     to_ending)) %>%

  # create paired vars
  mutate(ending = paste0("-", from, 
                         " -", to),
         upos_pair = paste(from_upos, to_upos),
         feats_pair = paste(from_feats, " ---- ", to_feats),
         closure_pair = paste(from_closure, to_closure)) %>% 
  select(meter, rhyme_alph, ending, upos_pair, closure_pair, feats_pair) %>% 
  
  # -----------------------------
  # to be fixed
  # -----------------------------
  filter(!str_detect(ending, "NA"))

glimpse(tr_endings)
```

#### all endings stats

```{r}
tr_endings %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n / nrow(tr_endings)) * 100, 2)) %>% 
  head(30)

# masculine endings
tr_endings %>% 
  filter(str_detect(closure_pair, "masc")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round(n / nrow(tr_endings %>% 
                                  filter(str_detect(closure_pair, "masc"))) * 100, 2)) %>% 
  head(20)


# fem endings
tr_endings %>% 
  filter(str_detect(closure_pair, "fem")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round(n / nrow(tr_endings %>% 
                                  filter(str_detect(closure_pair, "fem"))) * 100, 2)) %>% 
  head(20)

# dactyllic
tr_endings %>% 
  filter(str_detect(closure_pair, "dactylic")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round(n / nrow(tr_endings %>% 
                                  filter(str_detect(closure_pair, "dactylic"))) * 100, 2)) %>% 
  head(20)

```

#### oi oi analysis

```{r}
tr_endings %>% 
  count(ending, closure_pair, sort = T) %>% 
  mutate(perc = round((n / nrow(tr_endings)) * 100, 2)) %>% 
  filter(ending == "-ой -ой")

tr_endings %>% 
  filter(ending == "-ой -ой" & closure_pair == "fem fem") %>% head()

tr_endings %>% 
  filter(ending == "-ой -ой") %>% 
  count(upos_pair, sort = T) 

tr_endings %>% 
  filter(ending == "-ой -ой") %>% 
  count(feats_pair, sort = T) %>% 
  head(25)
```

## N feats / ending rank

-   look into iamb masculine endings & their ranks / frequency

-   count number of POS / grammar combinations inside each ending

-   plot ending freq/rank against number of feats

```{r}
glimpse(iamb_endings)
```

```{r}
iamb_endings %>% 
  count(closure_pair, sort = T)

iamb_masc <- iamb_endings %>% 
  filter(closure_pair == "masc masc")

iamb_masc %>% 
  count(ending, sort = T) %>% head()

print(paste("Total number of masc endings (characters, not sounds) in iambs:",
            nrow(iamb_masc %>% count(ending))))

iamb_masc %>% 
  count(ending, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  ggplot(aes(x = rank, y = n)) + geom_col()

iamb_masc %>% 
  count(ending, sort = T) %>% 
  mutate(rank = row_number()) %>% 
  filter(rank < 101) %>% 
  ggplot(aes(x = rank, y = n)) + geom_col()
```

Count number of pos combinations

```{r}
glimpse(iamb_masc)

ranks <- iamb_masc %>% 
  count(ending, sort = T) %>% 
  mutate(rank = row_number()) %>% select(-n)

head(ranks)

iamb_masc %>% 
  filter(!str_detect(upos_pair, "NA")) %>% 
  group_by(ending) %>% 
  count(upos_pair, sort = F) %>% 
  count(ending, sort = T) %>% 
  left_join(ranks, by = "ending") %>% 
  filter(rank < 1000) %>% 
  ggplot(aes(x = rank, y = n)) + geom_line(linewidht = 0.1) + geom_col(alpha = 0.2)
```

```{r}

im_upos <- iamb_masc %>% 
  filter(!str_detect(upos_pair, "NA")) %>% 
  group_by(ending) %>% 
  count(upos_pair, sort = F) %>% 
  count(ending, sort = T) %>% 
  left_join(ranks, by = "ending") %>% 
  filter(rank < 51) %>% 
  mutate(label = paste0(rank, ending),
         group = ifelse(n < 5, "less variation", "more variation"))

im_upos %>% 
  ggplot(aes(x = rank, y = n, fill = group)) + geom_col(alpha = 0.5) + 
  coord_flip() + scale_x_reverse(breaks = im_upos$rank,
                                 labels = im_upos$label) 
```

```{r}
iamb_masc %>% 
  filter(str_detect(ending, "-ал"))

# lexical variation in these rhymes are also smaller, as they combine less words, but more of "signaling" ones: e.g. -ок - рок, венок, челонок, поток, цветок, лесок; -ца : отца, певца, творца, венца; -са: небеса, краса, паруса, роса
```

```{r}
iamb_masc %>% 
  filter(!str_detect(feats_pair, "NA")) %>% 
  group_by(ending) %>% 
  count(feats_pair, sort = F) %>% 
  count(ending, sort = T) %>% 
  left_join(ranks, by = "ending") %>% 
  filter(rank < 1000) %>% 
  ggplot(aes(x = rank, y = n)) + geom_line() + geom_col(alpha = 0.2)

iamb_masc %>% 
  filter(!str_detect(feats_pair, "NA")) %>% 
  group_by(ending) %>% 
  count(feats_pair, sort = F) %>% 
  count(ending, sort = T) %>% 
  left_join(ranks, by = "ending") %>% 
  filter(rank < 101) %>% 
  ggplot(aes(x = rank, y = n)) + geom_line() + geom_col(alpha = 0.2)

im_rank_feat <- iamb_masc %>% 
  filter(!str_detect(feats_pair, "NA")) %>% 
  group_by(ending) %>% 
  count(feats_pair, sort = F) %>% 
  count(ending, sort = T) %>% 
  left_join(ranks, by = "ending") %>% 
  filter(rank < 41) %>% 
  mutate(label = paste0(rank, " ", ending)) 


im_rank_feat %>% 
  ggplot(aes(x = rank, y = n)) + geom_col() + 
  #scale_x_continuous(breaks = im_rank_feat$rank, labels = im_rank_feat$label) + 
  #theme(axis.text.x = element_text(angle = 270)) + 
  coord_flip() + scale_x_reverse(breaks = im_rank_feat$rank,
                                 labels = im_rank_feat$label) 
```

## Network viz

#### net fn

Function to create a custom net from selected df (see columns for 'ending' above)

```{r}
ending_net <- function(ending, edges_min) {
  
  # count frequency of edges
  edges_freq <- ending %>% 
    count(rhyme_alph)
  
  # create edgelist
  edgelist <- ending %>% 
    left_join(edges_freq, by = "rhyme_alph") %>% 
    select(from, to, n, from_pos, to_pos) %>% 
    filter(n > edges_min) # filter edges with freq lower than edges_min
  
  # count nodes frequency
  node_freq <- ending %>% 
    unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
    count(word, sort = T) %>% 
    rename(source = word) 
  
  # create nodelist
  nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
    #mutate(idn = row_number()) %>% 
    left_join(node_freq, by = "source") %>% 
    # create a column about a word's / node's presence in rhymer
    mutate(rhymer_pr = ifelse(source %in% rhymer$word, "present", "not_present"))
    #filter(n > 10)
  
  # nodelist
  
  # create graph
  ending_net <- tbl_graph(nodes = nodelist,
                         edges = edgelist, 
                         directed = FALSE)
}

```

#### -va rhyme

Select rhyme pairs with a particular ending

```{r}
ending <- rhymes %>% 
  filter(str_detect(from, "ва$") & str_detect(to, "ва$"))

print(paste("Number of rhyme pairs ending with '-ва':", nrow(ending)))

glimpse(ending)
```

Ending net without filtering

```{r}
# create the full network with no restriction on the edge frequency
va_full <- ending_net(ending, edges_min = 0)

va_full %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n , alpha = n
                     ), color = met.brewer("Veronese")[7]) + 
  geom_node_point(aes(size = n , 
                      color = rhymer_pr
                      ), alpha = 0.95 #, color = met.brewer("Veronese")[7]
                  ) + 
  geom_node_text(aes(label = source,
                     alpha = n
                     ) #, hjust = 1, vjust = -1
                 ) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[5]))

# ggsave("plots/net_ending_test.png", plot = last_plot(), 
#        width = 12, height = 9, 
#        dpi = 300, bg = "white")
```

The same network with filtering out the edges appeared only once

```{r}
va_freq1 <- ending_net(ending, edges_min = 1)

va_freq1 %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[5]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source #, alpha = n
                     ) , hjust = 0.5, vjust = -1
                 )

# ggsave("plots/net_ending_test_MF.png", plot = last_plot(), 
#        width = 12, height = 9, 
#        dpi = 300, bg = "white")
```

Separate graphs for masculine / feminine endings

```{r}
masc <- ending %>% 
  filter(from_closure == "masc" & to_closure == "masc") 

nrow(masc)

va_masc <- ending_net(masc, edges_min = 0)


va_m_net <- va_masc %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[4]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source , #alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Мужские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))


va_m_net
```

Feminine

```{r}
fem <- ending %>% 
  filter(from_closure == "fem" & to_closure == "fem") 

nrow(fem)

va_fem <- ending_net(fem, edges_min = 1)


va_f_net <- va_fem %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[3]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source , #alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Женские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

va_f_net
```

```{r}
layout <- "
AAA#BBBB
AAA#BBBB
"

va_m_net  + va_f_net + plot_layout(design = layout)

ggsave(filename = "plots/va_masc_fem_net.png", plot = last_plot(), dpi = 300,
       width = 12, heigh = 9, bg = "white")
```

#### -ba rhymes

Less frequent ending -ba

```{r}
ba_ending <- rhymes %>% 
  filter(str_detect(from, "ба$") & str_detect(to, "ба$")) 

print(paste("Number of rhyme pairs ending with '-ба':", nrow(ba_ending)))

# glimpse(ba_ending)
```

Full network

```{r}
ba_full <- ending_net(ba_ending, edges_min = 0)

ba_full %>% activate(nodes)

ba_full %>%
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[6]) + 
  geom_node_point(aes(size = n, alpha = n)) + 
  geom_node_text(aes(label = source, 
                     color = rhymer_pr) , hjust = 0, vjust = 1.5
                 ) + 
  scale_color_manual(values = c(met.brewer("Veronese")[3],
                                met.brewer("Veronese")[7]))
```

Masculine & feminine devision

```{r}
ba_masc <- ba_ending %>% 
  filter(from_closure == "masc" & to_closure == "masc")

nrow(ba_masc)

ba_masc <- ending_net(ba_masc, edges_min = 0)


ba_m_net <- ba_masc %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[4]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source, #, alpha = n
                     color = rhymer_pr) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Мужские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

ba_m_net
```

```{r}
ba_fem <- ba_ending %>% 
  filter(from_closure == "fem" & to_closure == "fem")

ba_fem <- ending_net(ba_fem, edges_min = 0)

ba_f_net <- ba_fem %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[3]) + 
  geom_node_point(aes(size = n), alpha = 0.95, color = met.brewer("Veronese")[7]) + 
  geom_node_text(aes(label = source, #, alpha = n
                     color = rhymer_pr
                     ) , 
                 hjust = 0.5, vjust = -1,
                 size = 6
                 ) + 
  labs(title = "Женские рифмы") +
  theme(legend.position = "None",
        plot.title = element_text(size = 20)) + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[7]))

ba_f_net
```

Merge feminine & masc nets

```{r}
layout <- "
AAAA#BBBBB
AAAA#BBBBB
"

ba_m_net  + ba_f_net + plot_layout(design = layout)

ggsave(filename = "plots/ba_masc_fem_net.png", plot = last_plot(), dpi = 300,
       width = 12, heigh = 9, bg = "white")
```

#### todo -oi rhymes

to do

-   percentage of -oi lines vs all lines

-   \% of words on -oi in lines vs in rhyme

-   distribution on POS / POS features in -oi rhyming words

-   see if there's these processes that gasparov-skulacheva found & connected to the rhyme destabilisation processes

```{r}

```

To do rest:

-   add lemmas to words

-   add POS-feats & lemmas to all words

-   add abstract / concrete coeffs to nouns/adj in rhymes

## grammatical features frequency

Prepare data for POS & features tagging in pymystem (see 00_1_rhymetagger_pos)

```{r, eval=FALSE}
corpus <- readRDS("../../data/corpus1835/corpus_1835_metrics.Rds")

unique_words <- corpus %>% 
  select(text_id, text_cln) %>% 
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  pull(word)

head(unique_words)

writeLines(unique_words, "../../data/ch5/corpus_1835_unique_words.txt")
```

## \-\-\-\-- old

### Freq of char 3grams

```{r}
iamb_endings_3 <- iamb_rhymes %>% 

  # add char if word is too short
  mutate(from = ifelse(nchar(from) < 2, paste0("_", from), from),
         to = ifelse(nchar(to) < 2, paste0("_", to), to)) %>% 
  mutate(from = ifelse(nchar(from) < 3, paste0("_", from), from),
         to = ifelse(nchar(to) < 3, paste0("_", to), to)) %>% 
  
  # create paired vars
  mutate(ending = paste0("-",str_extract(from, "\\w{3}$"), 
                         " -", str_extract(to, "\\w{3}$")),
         upos_pair = paste(from_upos, to_upos),
         feats_pair = paste(from_feats, " ---- ", to_feats),
         closure_pair = paste(from_closure, to_closure)) %>% 
  select(meter, rhyme_pair, ending, upos_pair, closure_pair, feats_pair)

tr_endings_3 <- tr_rhymes %>% 

  # add char if word is too short
  mutate(from = ifelse(nchar(from) < 2, paste0("_", from), from),
         to = ifelse(nchar(to) < 2, paste0("_", to), to)) %>% 
  mutate(from = ifelse(nchar(from) < 3, paste0("_", from), from),
         to = ifelse(nchar(to) < 3, paste0("_", to), to)) %>% 
  
  # create paired vars
  mutate(ending = paste0("-",str_extract(from, "\\w{3}$"), 
                         " -", str_extract(to, "\\w{3}$")),
         upos_pair = paste(from_upos, to_upos),
         feats_pair = paste(from_feats, " ---- ", to_feats),
         closure_pair = paste(from_closure, to_closure)) %>% 
  select(meter, rhyme_pair, ending, upos_pair, closure_pair, feats_pair)

glimpse(iamb_endings_3)
glimpse(tr_endings_3)
```

```{r}
iamb_endings_3 %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(iamb_endings_3)) * 100, 2))

iamb_endings_3 %>% 
  filter(str_detect(closure_pair, "masc")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(iamb_endings_3 %>% filter(str_detect(closure_pair, "masc")))) * 100, 2))

iamb_endings_3 %>% 
  filter(str_detect(closure_pair, "fem")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(iamb_endings_3 %>% filter(str_detect(closure_pair, "fem")))) * 100, 2))
```

```{r}
tr_endings_3 %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(tr_endings_3)) * 100, 2))

tr_endings_3 %>% 
  filter(str_detect(closure_pair, "masc")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(tr_endings_3 %>% filter(str_detect(closure_pair, "masc")))) * 100, 2))

tr_endings_3 %>% 
  filter(str_detect(closure_pair, "fem")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(tr_endings_3 %>% filter(str_detect(closure_pair, "fem")))) * 100, 2))

tr_endings_3 %>% 
  filter(str_detect(closure_pair, "dactylic")) %>% 
  count(ending, sort = T) %>% 
  mutate(perc = round((n/nrow(tr_endings_3 %>% filter(str_detect(closure_pair, "dactylic")))) * 100, 2))
```
