---
title: "05_3_rhymes_freq"
format: md
editor: visual
---

### load pckg

```{r}
library(tidyverse)
library(tidytext)

library(igraph)
library(tidygraph)
library(ggraph)

library(MetBrewer)
theme_set(theme_minimal())
```

### load data

```{r}
rhymes <- read.csv("../../data/ch5/rhymes_parsed_closure.csv") %>% 
  select(-X) %>% 
  distinct() %>%  # if redubplicated for some reason
  mutate(rhyme_alph = tolower(rhyme_alph),
         rhyme_pair = tolower(rhyme_pair),
         from = tolower(from),
         to = tolower(to))
glimpse(rhymes)
```

Check rhyme detection

```{r}
rhymes %>% 
  filter(id == "M__P_1938")
```

Metadata

```{r}
corpus_1835 <- readRDS("../../data/corpus1835/corpus_1835.Rds")
```

# bigrams

## basic stats

```{r}
#glimpse(rhymes)

print(paste("Total number of found rhymes in corpus-1835:", nrow(rhymes)))

print(paste("Number of unique (alph. reordered) rhymes:", length(unique(rhymes$rhyme_alph))))

# Percent of rhymes with FREQ = 1
n_hapax_legomenas <- rhymes %>% 
  count(rhyme_alph) %>% filter(n == 1) %>% nrow()

print( paste( "Percent of rhymes encountered only once in Corpus-1835:", 
              round((n_hapax_legomenas / nrow(rhymes)) * 100, 2) ))


# total distribution features
print("Distribution of the rhyme bigramm frequencies")
rhymes %>% 
  count(rhyme_alph) %>% summary()

rhymes %>% 
  count(rhyme_alph) %>% pull(n) %>% quantile(c(0.90, 0.95, 0.97, 0.99, 1))

print("Number of rhymes enountered more than 9 times (99% percentile)")
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  filter(n >= 9) %>% 
  nrow()
```

Pull top 500 rhymes: the ones which are encountered 10 or more times

```{r}
print(paste("Number of rhyme pairs encountered 10 and more times:", 
            rhymes %>% 
              count(rhyme_alph, sort = T) %>% 
              filter(n > 9) %>% 
              #head(500) %>% 
              pull(rhyme_alph) %>% 
              length()
            ))
```

Examples of top rhymes in Corpus-1835

```{r}
rhymes %>% 
  count(rhyme_alph, sort = T) %>% 
  head(30)
```

# words

## freq distribution of rhyme words

```{r}
# summary statistics of rhyme word counts
rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% summary()

# most frequent rhyme words
rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  head(50)
```

### MFW in rhymes vs all

Frequency of inline words

```{r}
inline_freq <- corpus_1835 %>% 
  select(text_raw) %>% 
  separate_rows(text_raw, sep = "\n") %>% 
  
  # remove last word in a line
  
  # remove lines with no words
  filter(text_raw != "" & !str_detect(text_raw, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove spaced & punctuation in the end of the line
  mutate(text_cln = str_remove_all(text_raw, "\\W+$|\\s+$"),
         # replace the last word as endword tag
         text_cln = str_replace_all(text_cln, "\\w+$", "_ENDWORD_")) %>% 
  select(text_cln) %>% 
  # remove endword tags
  mutate(text_cln = str_remove_all(text_cln, "_ENDWORD_")) %>% 
  
  # count remaining words
  unnest_tokens(input = text_cln, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_inline = row_number())

head(inline_freq)
```

```{r}

# glimpse(rhymes)

rhyme_freq <- rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  mutate(rank_rhyme = row_number())

head(rhyme_freq, 100)
```

Comparison of ranked lists demonstration (tau max = 1, tau min = -1):

```{r}
cor.test(c(1,2,3,4,5), c(1,2,3,4,5), method = "kendall")
cor.test(c(1,2,3,4,5), c(3,2,5,1,4), method = "kendall")
cor.test(c(1,2,3,4,5), c(5,4,3,2,1), method = "kendall")
```

Tests for correlation between ranks in rhyme vs in inline words

MFW-100

```{r}
mfw_100_rhyme <- inline_freq %>% 
  head(100) %>% 
  select(-n) %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_100_rhyme$rank_inline, mfw_100_rhyme$rank_rhyme, method = "kendall")

mfw_100_rhyme %>% 
  arrange(-desc(rank_rhyme))
```

MFW-1000

```{r}
mfw_1000 <- inline_freq[1:1000,] %>% select(-n)

mfw_1000_rhyme <- mfw_1000 %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

head(mfw_1000_rhyme)

cor.test(mfw_1000_rhyme$rank_inline, mfw_1000_rhyme$rank_rhyme, method = "kendall")
```

MFW-10000

```{r}
mfw_10000_rhyme <- inline_freq %>% 
  head(10000) %>% 
  select(-n) %>% 
  left_join(rhyme_freq %>% select(-n), by = "word") %>% 
  drop_na()

cor.test(mfw_10000_rhyme$rank_inline, mfw_10000_rhyme$rank_rhyme, method = "kendall")
```

```{r}
rm(inline_freq, mfw_100_rhyme, mfw_1000, mfw_1000_rhyme, mfw_10000_rhyme,
   rhyme_freq, n_hapax_legomenas)
```

### One-word network test

```{r}

# glimpse(rhymes)

rhymes %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T)

# select the words that rhyme with a particular word and look into it
word <- rhymes %>% 
  filter(str_detect(from, "любви") | str_detect(to, "любви")) %>% 
  filter(str_detect(from, "и$") & str_detect(to, "и$"))

print(paste("Number of rhyme pairs including the word 'мечты':", nrow(word)))
```

Fastly create a network out of these words and look at the frequency of words & pairs

```{r}

node_freq <- word %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word)

nodelist <- tibble(source = unique(c(word$from, word$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source")
nodelist


edges_freq <- word %>% 
  count(rhyme_alph)

edgelist <- word %>% 
  left_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos)

word_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

word_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n), alpha = 0.5) + 
  geom_node_point(aes(size = n), alpha = 0.5, color = "blue") + 
  geom_node_text(aes(label = source) #, hjust = 1, vjust = -1
                 )
```

### mfw net

```{r}
# top 10-20 masc / fem / dactyllic rhymewords & the net of words rhyming with them
# how connected is this net? how it looks like? which words are in the very centre?
```

### ending net

```{r}
ending <- rhymes %>% 
  filter(str_detect(from, "ва$") & str_detect(to, "ва$"))

print(paste("Number of rhyme pairs ending with '-ва':", nrow(ending)))
```

```{r}

edges_freq <- ending %>% 
  count(rhyme_alph)

edgelist <- ending %>% 
  left_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos) #%>% 
  #filter(n > 1)

node_freq <- ending %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word) 

nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source") #%>% 
  #filter(n > 1)

nodelist


ending_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

ending_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  # activate(nodes) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[5]) + 
  geom_node_point(aes(size = n), alpha = 0.5, color = "blue") + 
  geom_node_text(aes(label = source, alpha = n) #, hjust = 1, vjust = -1
                 )

ggsave("plots/net_ending_test.png", plot = last_plot(), 
       width = 12, height = 9, 
       dpi = 300, bg = "white")
```

```{r}
edges_freq <- ending %>% 
  count(rhyme_alph)

edgelist <- ending %>% 
  left_join(edges_freq, by = "rhyme_alph") %>% 
  select(from, to, n, from_pos, to_pos) %>% 
  filter(n > 2)

node_freq <- ending %>% 
  unnest_tokens(input = rhyme_pair, output = word, token = "words") %>% 
  count(word, sort = T) %>% 
  rename(source = word) 

nodelist <- tibble(source = unique(c(edgelist$from, edgelist$to))) %>% 
  #mutate(idn = row_number()) %>% 
  left_join(node_freq, by = "source") #%>% 
  #filter(n > 10)

nodelist


ending_net <- tbl_graph(nodes = nodelist,
                       edges = edgelist, 
                       directed = FALSE)

ending_net %>% 
  # activate(edges) %>% 
  # filter(n > 1) %>% 
  # activate(nodes) %>% 
  # filter(n > 1) %>% 
  ggraph('kk') + 
  geom_edge_link(aes(width = n, alpha = n), color = met.brewer("Veronese")[5]) + 
  geom_node_point(aes(size = n), alpha = 0.5, color = "blue") + 
  geom_node_text(aes(label = source, alpha = n) #, hjust = 1, vjust = -1
                 )

ggsave("plots/net_ending_test_MF.png", plot = last_plot(), 
       width = 12, height = 9, 
       dpi = 300, bg = "white")
```

## grammatical features frequency

Next step: look into grammatical features of the MFW in the two corpora - for that ling annotation for the whole corpus-1835 is needed!

mb later compare the MFW ranked lists for nouns, verbs & adjectives (probably pronouns as well)

```{r}
# MF features in rhyme

total_items_rhyme <- length(c(rhymes$from_feats, rhymes$to_feats))

tibble(feature = c(rhymes$from_feats, rhymes$to_feats)) %>% 
  count(feature, sort = T) %>% 
  mutate(perc = round( (n / total_items_rhyme) * 100, 2 ))
```

#### masc rhymes

```{r}
from_masc <- rhymes %>% 
  filter(from_closure == "masc") %>% pull(from_feats)

to_masc <- rhymes %>% 
  filter(to_closure == "masc") %>% pull(to_feats)

total_masc <- length(c(from_masc, to_masc))

tibble(feats = c(from_masc, to_masc)) %>% 
  count(feats, sort = T) %>% 
  mutate(perc = round(n / total_masc * 100 , 1))
```
