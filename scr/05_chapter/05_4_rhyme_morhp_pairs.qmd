---
title: "5.2. Rhymes: POS pairs & endings"
format: md
editor: visual
---

## 5.2.2. Rhyme grammatical contrast & endings variability

Load pckg

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

library(MetBrewer)
library(patchwork)
theme_set(theme_minimal())
```

Load data

Metadata

```{r}
meta <- read.csv("../../data/corpus1835/sql_db/texts_metadata.csv")
# glimpse(meta)

# Meter lables

table(meta$meter)

meter_lables <- meta %>% 
  select(text_id, meter, feet) %>% distinct()

head(meter_lables)
```

Rhyme pairs

```{r}
rhyme_pairs <- read.csv("../../data/corpus1835/sql_db/rhyme_pairs.csv") %>% 
  rename(text_id = poem_id) %>% 
  # remove Kulman texts
  filter(!str_detect(text_id, "C_264"))

glimpse(rhyme_pairs)
```

Attach meter data

```{r}
nrow(rhyme_pairs)

rhyme_pairs <- rhyme_pairs %>% 
  left_join(meter_lables, by = "text_id") 

glimpse(rhyme_pairs)
```

Rhyme words

```{r}
rhyme_words <- read.csv("../../data/corpus1835/sql_db/rhyme_words_upd.csv", 
                        
                        # DON'T LET R EAT IAMBS AND DO INTEGER 01 => 1
                        colClasses = c("stress_pattern" = "character",
                                       "closure_pattern" = "character")) 

# check if all words are unique
length(unique(rhyme_words$word)) == nrow(rhyme_words)

# rewrite POS tags
pos_transl <- tibble(old_tag = c("S", "V", "APRO", "SPRO", 
                   "A", "ADV", "NUM", "ADVPRO",
                   "INTJ", "PART", "PR", "ANUM", "CONJ"),
       # pos = c("NOUN", "VERB", "aPRON", "nPRON", 
       #         "ADJ", "ADV", "NUM", "advPRON",
       #         "INTJ", "PART", "ADP", "adjNUM", "CONJ"),
       pos = c("NOUN", "VERB", "PRON", "PRON", 
               "ADJ", "ADV", "NUM", "PRON",
               "INTJ", "PART", "ADP", "NUM", "CONJ")) # upos

# attach to the table with all words
rhyme_words <- rhyme_words %>% 
  rename(old_tag = pos) %>% 
  left_join(pos_transl, by = "old_tag")

# extract inf, imp, etc.
rhyme_words <- rhyme_words %>% 
  mutate(pos = ifelse(str_detect(feats, "инф"),
                      "VERB_inf",
                      pos),
         pos = ifelse(str_detect(feats, "пов"),
                      "VERB_imp",
                      pos),
         pos = ifelse(str_detect(feats, "деепр"),
                      "VERB_deeprich",
                      pos),
         pos = ifelse(str_detect(feats, "прич"),
                      "VERB_prich",
                      pos))

glimpse(rhyme_words)
```

Attach word's features to rhyme pairs data

```{r}
rhyme_pairs <- rhyme_pairs %>% 
  left_join(rhyme_words %>% 
              select(word, closure, pos, ending_st, feats, stress_pattern) %>% 
              rename(from = word,
                     from_closure = closure,
                     from_pos = pos,
                     from_ending = ending_st, 
                     from_feats = feats,
                     from_sp = stress_pattern),
            by = "from") %>% 
  left_join(rhyme_words %>% 
              select(word, closure, pos, ending_st, feats, stress_pattern) %>% 
              rename(to = word,
                     to_closure = closure,
                     to_pos = pos,
                     to_ending = ending_st, 
                     to_feats = feats,
                     to_sp = stress_pattern),
            by = "to") 

nrow(rhyme_pairs)
glimpse(rhyme_pairs)
```

## POS pairs & syl variation

### masc

Extract only pairs where both words were detected as masculine endings

```{r}
masc_pairs <- rhyme_pairs %>% 
  filter(from_closure == "masc" & to_closure == "masc")

print(paste( "Number of (true) masc pairs:", nrow(masc_pairs), 
             "out of total", nrow(rhyme_pairs) ))

# check number of one masc and one other clausula type ending (most probably annotation mistakes)
rhyme_pairs %>% 
  filter(from_closure == "masc" & to_closure != "masc") %>% nrow() 
rhyme_pairs %>% 
  filter(from_closure != "masc" & to_closure == "masc") %>% nrow() 
```

Iamb

```{r}
iamb_masc <- masc_pairs %>% 
  filter(meter == "Iamb")

t <- nrow(iamb_masc)
t
```

```{r}
iamb_count <- iamb_masc %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos, to_pos)), collapse = " -- ")) %>% 
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_iamb = n,
         perc_iamb = perc)

head(iamb_count, 20)
```

Syllable variation

```{r}
iamb_count_syl <- iamb_masc %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_iamb = n,
         perc_iamb = perc) %>% 
  mutate(rank_iamb = row_number())

iamb_count_syl %>% 
  head(10)
```

Trochee

```{r}
tr_masc <- masc_pairs %>% 
  filter(meter == "Trochee")

t <- nrow(tr_masc)
t
```

```{r}
tr_masc %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos, to_pos)), collapse = " -- ")) %>% 
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_tr = n,
         perc_tr = perc) %>% 
  left_join(iamb_count, by = "pos_pair") %>% 
  select(pos_pair, perc_iamb, perc_tr, n_iamb, n_tr) %>% 
  head(20)
```

```{r}
tr_count_syl <- tr_masc %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_tr = n,
         perc_tr = perc) %>% 
  mutate(rank_tr = row_number())

tr_count_syl %>% 
  head(10)
```

```{r}
iamb_count_syl %>% 
  left_join(tr_count_syl, by = "pos_pair") %>%  
  select(pos_pair, rank_iamb, rank_tr, perc_iamb, perc_tr, n_iamb, n_tr) %>% 
  head(20)

ranks_masc <- iamb_count_syl %>% 
  left_join(tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rank_iamb, rank_tr, perc_iamb, perc_tr, n_iamb, n_tr) %>%
  drop_na() 

cor(ranks_masc$rank_iamb[1:100], ranks_masc$rank_tr[1:100], method = "kendall")
```

### fem

```{r}
fem_pairs <- rhyme_pairs %>% 
  filter(from_closure == "fem" & to_closure == "fem")

print(paste( "Number of (true) fem pairs:", nrow(fem_pairs), 
             "out of total", nrow(rhyme_pairs) ))

# check number of one masc and one other clausula type ending (most probably annotation mistakes)
rhyme_pairs %>% 
  filter(from_closure == "fem" & to_closure != "fem") %>% nrow() 
rhyme_pairs %>% 
  filter(from_closure != "fem" & to_closure == "fem") %>% nrow() 
```

Separate iambs & trochees

```{r}
iamb_fem <- fem_pairs %>% 
  filter(meter == "Iamb")

tr_fem <- fem_pairs %>% 
  filter(meter == "Trochee")
```

```{r}
t <- nrow(iamb_fem)

iamb_count <- iamb_fem %>% rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos, to_pos)), collapse = " -- ")) %>% 
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_iamb = n,
         perc_iamb = perc)

head(iamb_count, 20)
```

```{r}
f_iamb_count_syl <- iamb_fem %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_iamb = n,
         perc_iamb = perc) %>% 
  mutate(rank_iamb = row_number())

f_iamb_count_syl %>% 
  head(10)
```

```{r}
t <- nrow(tr_fem)

tr_fem %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos, to_pos)), collapse = " -- ")) %>% 
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_tr = n,
         perc_tr = perc) %>% 
  left_join(iamb_count, by = "pos_pair") %>% 
  select(pos_pair, perc_iamb, perc_tr, n_iamb, n_tr) %>% 
  head(20)

```

```{r}
f_tr_count_syl <- tr_fem %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(n_tr = n,
         perc_tr = perc) %>% 
  mutate(rank_tr = row_number())

f_tr_count_syl %>% 
  head(10)
```

Syllable variation

```{r}
f_iamb_count_syl %>% 
  left_join(f_tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rank_iamb, rank_tr, perc_iamb, perc_tr, n_iamb, n_tr) %>% 
  head(20)

fem_ranks <- f_iamb_count_syl %>% 
  left_join(f_tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rank_iamb, rank_tr, perc_iamb, perc_tr, n_iamb, n_tr) %>% 
  drop_na()

cor(fem_ranks$rank_iamb[1:100], fem_ranks$rank_tr[1:100], method = "kendall")
```

## RNC

### Load RNC data

```{r}
rnc_rhymes <- read.csv("../../data/ch5/nkrja_rhyme_pairs.csv") %>% select(-X)

# attach meters to extract only iambs
# load metadata to extract meters
load("../../data/nkrja_19th_lem.Rda")
rnc_ids <- c19 %>% 
  filter(meter %in% c("Я", "Х")) %>% 
  mutate(poem_id = paste0("RNC_", Unnamed..0, "_", year), 
         meter = meter) %>% 
  select(poem_id, meter)
  

# attach meters to rhyme data
rnc_rhymes <- rnc_rhymes %>% 
  inner_join(rnc_ids, by = "poem_id")

rm(c19, rnc_ids) # remove large c19 file & iamb-id vector

# look at the resulting data
# glimpse(rnc_rhymes)
```

Distribution of data over time - filter out rhymes after 1810

```{r}
ids_before_1830 <- rnc_rhymes %>% 
  select(poem_id) %>% 
  separate(poem_id, into = c("corpus", "id", "year"), sep = "_") %>% 
  filter(as.numeric(year) < 1811) %>% 
  mutate(poem_id = paste0("RNC_", id, "_", year)) %>% 
  pull(poem_id)

# filter only rhymes before 1830
rnc_rhymes <- rnc_rhymes %>% 
  filter(poem_id %in% ids_before_1830)

rm(ids_before_1830) # remove large character vector

# add verb_inf & verb_imp categories
rnc_rhymes <- rnc_rhymes %>% 
  mutate(from_pos = ifelse(str_detect(from_feats, "VerbForm=Inf"), 
                      "VERB_inf", from_pos),
         from_pos = ifelse(str_detect(from_feats, "Mood=Imp"), 
                      "VERB_imp", from_pos)) %>% 
  mutate(to_pos = ifelse(str_detect(to_feats, "VerbForm=Inf"), 
                      "VERB_inf", to_pos),
         to_pos = ifelse(str_detect(to_feats, "Mood=Imp"), 
                      "VERB_imp", to_pos))

rnc_rhymes %>% 
  select(poem_id) %>% 
  separate(poem_id, into = c("corpus", "id", "year"), sep = "_") %>% 
  count(year) %>% 
  ggplot(aes(x = year, y = n)) + geom_col() + 
  theme(axis.text.x = element_text(angle = 90))
```

### masc

Filter only masculine rhymes

```{r}
rnc_masc <- rnc_rhymes %>% 
  filter(from_closure == "masc" & to_closure == "masc")

nrow(rnc_masc)
```

Iamb

```{r}
rnc_iamb_masc <- rnc_masc %>% 
  filter(meter == "Я")

t <- nrow(rnc_iamb_masc)
t
```

Syllable variation

```{r}
rnc_iamb_count_syl <- rnc_iamb_masc %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(rnc_n_iamb = n,
         rnc_perc_iamb = perc) %>% 
  mutate(rnc_rank_iamb = row_number())

rnc_iamb_count_syl %>% 
  head(10)
```

trochee

```{r}
rnc_tr_masc <- rnc_masc %>% 
  filter(meter == "Х")

t <- nrow(rnc_tr_masc)
t
```

```{r}
rnc_tr_count_syl <- rnc_tr_masc %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(rnc_n_tr = n,
         rnc_perc_tr = perc) %>% 
  mutate(rnc_rank_tr = row_number())

rnc_tr_count_syl %>% 
  head(10)
```

Comparison

```{r}
rnc_iamb_count_syl %>% 
  left_join(rnc_tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rnc_rank_iamb, rnc_rank_tr, rnc_perc_iamb, 
         rnc_perc_tr, rnc_n_iamb, rnc_n_tr) %>% 
  head(20)

rnc_masc_ranks <- rnc_iamb_count_syl %>% 
  left_join(rnc_tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rnc_rank_iamb, rnc_rank_tr, rnc_perc_iamb, 
         rnc_perc_tr, rnc_n_iamb, rnc_n_tr) %>%
  drop_na() 

cor(rnc_masc_ranks$rnc_rank_iamb[1:100], rnc_masc_ranks$rnc_rank_tr[1:100], method = "kendall")
```

### fem rhymes

Same steps for feminine rhymes

```{r}
rnc_fem <- rnc_rhymes %>% 
  filter(from_closure == "fem" & to_closure == "fem")

nrow(rnc_fem)
```

Iamb

```{r}
rnc_iamb_fem <- rnc_fem %>% 
  filter(meter == "Я")

t <- nrow(rnc_iamb_fem)
t

rnc_fem_iamb_count_syl <- rnc_iamb_fem %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(rnc_n_iamb = n,
         rnc_perc_iamb = perc) %>% 
  mutate(rnc_rank_iamb = row_number())

rnc_fem_iamb_count_syl %>% 
  head(10)
```

Trochee

```{r}
rnc_tr_fem <- rnc_fem %>% 
  filter(meter == "Х")

t <- nrow(rnc_tr_fem)
t # very small number of trochee feminine examples!

rnc_fem_tr_count_syl <- rnc_tr_fem %>% 
  mutate(# calculate number of syllables in each word
         from_n_syl = nchar(from_sp),
         to_n_syl = nchar(to_sp),
         
         # attach n_syl to pos
         from_pos_syl = paste0(from_pos, "_", from_n_syl),
         to_pos_syl = paste0(to_pos, "_", to_n_syl)) %>% 
  rowwise() %>% 
  mutate(pos_pair = paste0(sort(c(from_pos_syl, to_pos_syl)), collapse = " -- ")
         ) %>%
  ungroup() %>% 
  count(pos_pair, sort = T) %>% 
  mutate(perc = round( (n/t)*100, 2 )) %>% 
  rename(rnc_n_tr = n,
         rnc_perc_tr = perc) %>% 
  mutate(rnc_rank_tr = row_number())

rnc_tr_count_syl %>% 
  head(10)
```

Comparison

```{r}
rnc_fem_iamb_count_syl %>% 
  left_join(rnc_fem_tr_count_syl, by = "pos_pair") %>%
  select(pos_pair, rnc_rank_iamb, rnc_rank_tr, rnc_perc_iamb, 
         rnc_perc_tr, rnc_n_iamb, rnc_n_tr) %>% 
  head(20)

rnc_fem_ranks <- rnc_fem_iamb_count_syl %>% 
  left_join(rnc_fem_tr_count_syl, by = "pos_pair") %>% 
  select(pos_pair, rnc_rank_iamb, rnc_rank_tr, rnc_perc_iamb, 
         rnc_perc_tr, rnc_n_iamb, rnc_n_tr) %>%
  drop_na() 

cor(rnc_fem_ranks$rnc_rank_iamb[1:100], rnc_fem_ranks$rnc_rank_tr[1:100], method = "kendall")
```

## compare C35 & RNC

Masc rhymes

```{r}
glimpse(ranks_masc) # corpus-1835 
glimpse(rnc_masc_ranks) # rnc
```

```{r}
all_masc_ranks <- ranks_masc %>% 
  left_join(rnc_masc_ranks, by = "pos_pair") %>% 
  select(pos_pair, 
         rank_iamb, rnc_rank_iamb, rank_tr, rnc_rank_tr,
         perc_iamb, rnc_perc_iamb, perc_tr, rnc_perc_tr,
         n_iamb, rnc_n_iamb, n_tr, rnc_n_tr
         )

head(all_masc_ranks, 20)

# drop na for cor test
r <- all_masc_ranks %>% drop_na()

cor(r$rank_iamb[1:90], r$rnc_rank_iamb[1:90],
    method = "kendall")

cor(r$rank_tr[1:90], r$rnc_rank_tr[1:90], method = "kendall")
```

Fem rhymes

```{r}
all_fem_ranks <- fem_ranks %>% 
  left_join(rnc_fem_ranks, by = "pos_pair") %>% 
  select(pos_pair, 
         rank_iamb, rnc_rank_iamb, rank_tr, rnc_rank_tr,
         perc_iamb, rnc_perc_iamb, perc_tr, rnc_perc_tr,
         n_iamb, rnc_n_iamb, n_tr, rnc_n_tr
         )

head(all_fem_ranks, 20)

# drop na for cor test
r <- all_fem_ranks %>% drop_na()

cor(r$rank_iamb[1:90], r$rnc_rank_iamb[1:90],
    method = "kendall")

cor(r$rank_tr[1:90], r$rnc_rank_tr[1:90], method = "kendall")
```

### network viz

Network:

from, to, corpus, meter, clausula(?)

NOUN_2 - NOUN_3 , filter n = 1

different network for different meters & periods =\> see which pos do not meet each other in rhyme & which syl numbers are more freq

mb facet wrap for nkrja / c1835 + diff edges/colours for trochee/iamb

```{r}
library(tidygraph)
library(ggraph)

glimpse(all_masc_ranks)
summary(all_masc_ranks)
```

Rename nodes

```{r, eval=FALSE}
all_fem_ranks %>% 
  select(pos_pair) %>% 
  mutate(pos_pair = ifelse(str_detect(pos_pair, "NOUN"), 
                           str_replace_all(pos_pair, "NOUN", "СУЩ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "VERB"), 
                           str_replace_all(pos_pair, "VERB", "ГЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "ADJ"), 
                           str_replace_all(pos_pair, "ADJ", "ПРИЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "PRON"), 
                           str_replace_all(pos_pair, "PRON", "МЕСТ"),
                           pos_pair), 
         pos_pair = ifelse(str_detect(pos_pair, "ADV"), 
                           str_replace_all(pos_pair, "ADV", "НАР"),
                           pos_pair))
```

```{r}
t <- all_masc_ranks %>% 
  # filter(n_iamb > 5,
  #        n_tr > 5,
  #        rnc_n_iamb > 5,
  #        rnc_n_tr > 5) %>%
  
  # rewrite labels
  
  mutate(pos_pair = ifelse(str_detect(pos_pair, "NOUN"), 
                           str_replace_all(pos_pair, "NOUN", "СУЩ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "VERB_inf"), 
                           str_replace_all(pos_pair, "VERB_inf", "ИНФ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "VERB"), 
                           str_replace_all(pos_pair, "VERB", "ГЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "ADJ"), 
                           str_replace_all(pos_pair, "ADJ", "ПРИЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "PRON"), 
                           str_replace_all(pos_pair, "PRON", "МЕСТ"),
                           pos_pair), 
         pos_pair = ifelse(str_detect(pos_pair, "ADV"), 
                           str_replace_all(pos_pair, "ADV", "НАР"),
                           pos_pair)) %>% 
  
  filter(rank_iamb < 50,
         rnc_rank_iamb < 50,
         rank_tr < 50,
         rnc_rank_tr < 50) %>% 
  select(pos_pair, perc_iamb, perc_tr, rnc_perc_iamb, rnc_perc_tr) %>% 
  pivot_longer(!pos_pair, names_to = "corpus", values_to = "value") %>% 
  #filter(value > 0.3) %>% # avg freq
  separate(pos_pair, into = c("from", "to"), sep = " -- ") %>% 
  drop_na()

# unique(t$corpus)

labels <- tibble(corpus = unique(t$corpus),
                 corpus_r = c("Корпус-1835, ямбы",
                           "Корпус-1835, хореи",
                           "НКРЯ до 1810, ямбы",
                           "НКРЯ до 1810, хореи"))

t <- t %>% left_join(labels, by = "corpus")

edgelist <- t %>% drop_na()
nodelist <- tibble(source = unique(c(t$from, t$to))) %>% 
  mutate(ids = row_number()) # %>% 
  #left_join(w %>% rename(source = pos_syl), by = "source")

net_t <- tbl_graph(nodes = nodelist,
                   edges = edgelist,
                   directed = FALSE)

net_t %>% 
  ggraph(layout = 'linear', circular = TRUE) +
  #ggraph(layout = "kk") + 
  geom_edge_arc(aes(width = value, #color = corpus, 
                     color = value,
                     alpha = value)) + 
  geom_edge_loop(aes(width = value, #color = corpus, 
                     color = value,
                     alpha = value)) + 
   geom_node_point(
    size = 4,
    color = "#440154FF"
    ) + 
  geom_node_text(aes(label = source), vjust = -0.5, size = 6, fontface = "bold") + 
  facet_wrap(~corpus_r) + 
  scale_edge_color_continuous(low = "#440154FF", high = "#FDE725FF") + 
  theme(legend.position = "None",
        text = element_text(size = 28),
        panel.spacing.y = unit(4, "lines"))


```

```{r, eval=FALSE}
ggsave("plots/fig_5-2-1_masc.png", plot = last_plot(), dpi = 300, 
       bg = "white", width = 16, height = 14)
```

Female

```{r}
t <- all_fem_ranks %>% 
  
    # rewrite labels
  
  mutate(pos_pair = ifelse(str_detect(pos_pair, "NOUN"), 
                           str_replace_all(pos_pair, "NOUN", "СУЩ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "VERB_inf"), 
                           str_replace_all(pos_pair, "VERB_inf", "ИНФ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "VERB"), 
                           str_replace_all(pos_pair, "VERB", "ГЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "ADJ"), 
                           str_replace_all(pos_pair, "ADJ", "ПРИЛ"),
                           pos_pair),
         pos_pair = ifelse(str_detect(pos_pair, "PRON"), 
                           str_replace_all(pos_pair, "PRON", "МЕСТ"),
                           pos_pair), 
         pos_pair = ifelse(str_detect(pos_pair, "ADV"), 
                           str_replace_all(pos_pair, "ADV", "НАР"),
                           pos_pair)) %>% 
  
  
  # filter(n_iamb > 5,
  #        n_tr > 5,
  #        rnc_n_iamb > 5,
  #        rnc_n_tr > 5) %>%
    filter(rank_iamb < 50,
         rnc_rank_iamb < 50,
         rank_tr < 50,
         rnc_rank_tr < 50) %>% 
  select(pos_pair, perc_iamb, perc_tr, rnc_perc_iamb, rnc_perc_tr) %>% 
  pivot_longer(!pos_pair, names_to = "corpus", values_to = "value") %>% 
  #filter(value > 0.3) %>% # avg freq
  separate(pos_pair, into = c("from", "to"), sep = " -- ") %>% 
  drop_na()

labels <- tibble(corpus = unique(t$corpus),
                 corpus_r = c("Корпус-1835, ямбы",
                           "Корпус-1835, хореи",
                           "НКРЯ до 1810, ямбы",
                           "НКРЯ до 1810, хореи"))

t <- t %>% left_join(labels, by = "corpus")

edgelist <- t %>% drop_na()
nodelist <- tibble(source = unique(c(t$from, t$to))) %>% 
  mutate(ids = row_number()) # %>% 
  #left_join(w %>% rename(source = pos_syl), by = "source")

net_t <- tbl_graph(nodes = nodelist,
                   edges = edgelist,
                   directed = FALSE)

net_t %>% 
  ggraph(layout = 'linear', circular = TRUE) +
  #ggraph(layout = "kk") + 
  geom_edge_arc(aes(width = value, #color = corpus, 
                     color = value,
                     alpha = value)) + 
  geom_edge_loop(aes(width = value, #color = corpus, 
                     color = value,
                     alpha = value)) + 
  geom_node_point(
    size = 4,
    color = "#440154FF"
    ) + 
  geom_node_text(aes(label = source), vjust = -0.5, size = 6, fontface = "bold") + 
  facet_wrap(~corpus_r) + 
  scale_edge_color_continuous(low = "#440154FF", high = "#FDE725FF") + 
  theme(legend.position = "None",
        text = element_text(size = 28),
        panel.spacing.y = unit(6, "lines"))
```

```{r, eval=FALSE}
ggsave("plots/fig_5-2-1.png", plot = last_plot(), dpi = 300, 
       bg = "white", width = 16, height = 14)
```

```{r}
iamb_masc %>% 
  filter(from_pos == "NOUN" & to_pos == "PRON") %>% 
  count(from, to, sort = T)
```

## endings

### POS pairs variability

#### masc

Masculine (all meters)

```{r}
glimpse(masc_pairs)

# total number of masc pairs
t <- nrow(masc_pairs)

# view 30 mf ending pairs
masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  count(ending_pair, sort = T) %>% 
  head(30) %>% 
  mutate(perc = round((n/t)*100, 2))

# pull top ending pairs 
m_ranks <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  count(ending_pair, sort = T) %>% 
  #head(1000) %>% 
  mutate(rank = row_number()) %>% select(-n)

# count POS variants inside every ending
m_ranked_pos <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(unlist(str_split(pos_pair, " -- "))))) %>% 
  ungroup() %>% 
  left_join(m_ranks, by = "ending_pair") %>% 
  filter(rank < 101) %>% 
  arrange(-desc(rank))
  #mutate(label = paste0(rank, " ", ending_pair),
  #       group = ifelse(n < 9, "less variation", "more variation")) 

head(m_ranked_pos, 10)
summary(m_ranked_pos$pos_var) # 4 is 3rd Qu. if 100 first ranks taken

m_ranked_pos <- m_ranked_pos %>% 
  mutate(label = paste0(rank, " ", ending_pair),
  group = ifelse(pos_var < 4, "less variation", "more variation")) 


# plot
p1_m <- m_ranked_pos %>% 
  ungroup() %>% 
  filter(rank <= 20) %>% 
  ggplot(aes(x = rank, y = pos_var, fill = group)) + geom_col(alpha = 0.7) + 
  #scale_x_continuous(breaks = im_rank_feat$rank, labels = im_rank_feat$label) + 
  #theme(axis.text.x = element_text(angle = 270)) + 
  coord_flip() + 
  scale_x_reverse(breaks = m_ranked_pos$rank, 
                     labels = m_ranked_pos$label) + 
  scale_fill_manual(values = c(met.brewer("Veronese")[7],
                               met.brewer("Veronese")[4])) + 
  labs(x = "", 
       y = "Количество частей речи", 
       
       subtitle = "Наиболее частотные\nмужские окончания") + 
  theme(legend.position = "None", 
        axis.text = element_text(size = 11),
        axis.title = element_text(size = 11),
        #title = element_text(size = 16),
        plot.subtitle = element_text(size = 14))

p1_m
```

Analysis of the less variate pairs

```{r}
m_ranked_pos %>% 
  filter(rank < 51) %>% 
  summary(n) # look into less than 1st quatrain, ie less than 4 pos pairs

less_var_pos <- m_ranked_pos %>% 
  filter(rank < 51 & pos_var < 3
           #group == "less variation"
           ) %>% 
  arrange(-desc(rank)) %>% pull(ending_pair)

length(less_var_pos)

# endings & pos pairs inside
masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  filter(ending_pair %in% less_var_pos) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(
                        unlist(
                          str_split(pos_pair, " -- ")))
                      ),
         pos_pair = paste0(
                      unique(unlist(str_split(pos_pair, " -- "))), collapse = ", ")) %>% 
  ungroup() %>% 
  arrange(-desc(pos_var)) 
```

#### fem

```{r}
glimpse(fem_pairs)

# total number of masc pairs
t <- nrow(fem_pairs)

# view 30 mf ending pairs
fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  count(ending_pair, sort = T) %>% 
  head(30) %>% 
  mutate(perc = round((n/t)*100, 2))

# pull top ending pairs 
f_ranks <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  count(ending_pair, sort = T) %>% 
  #head(1000) %>% 
  mutate(rank = row_number()) %>% select(-n)

# count POS variants inside every ending
f_ranked_pos <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(unlist(str_split(pos_pair, " -- "))))) %>% 
  ungroup() %>% 
  left_join(f_ranks, by = "ending_pair") %>% 
  filter(rank < 101) 

head(f_ranked_pos %>% select(-pos_pair), 15) 
summary(f_ranked_pos$pos_var) # 4 is 3rd qu.


f_ranked_pos <- f_ranked_pos %>% 
  mutate(label = paste0(rank, " ", ending_pair),
         group = ifelse(pos_var < 3, "less variation", "more variation")) %>% 
  select(-pos_pair) %>% 
  arrange(-desc(rank))

# plot
p1_f <- f_ranked_pos  %>% 
  filter(rank < 21) %>% 
  ggplot(aes(x = rank, y = pos_var, fill = group)) + geom_col(alpha = 0.7) + 
  coord_flip() + 
  scale_x_reverse(breaks = f_ranked_pos$rank, labels = f_ranked_pos$label) + 
  scale_fill_manual(values = c(met.brewer("Veronese")[1],
                               met.brewer("Veronese")[3])) + 
  labs(x = "", y = "Количество частей речи", 
       title = "В",
       subtitle = "Наиболее частотные\nженские окончания") + 
  theme(legend.position = "None", 
        axis.text = element_text(size = 11),
        plot.title = element_text(size = 18),
        plot.subtitle = element_text(size = 14))

p1_f
```

Analysis of the less variate pairs

```{r}
f_ranked_pos %>% 
  filter(rank < 51) %>% 
  summary() # look into less than 1st quatrain, ie less than 2 pos pairs (much lower than in masc rhymes)

less_var_pos_f <- f_ranked_pos %>% 
  filter(rank < 51 & pos_var < 2
           #group == "less variation"
           ) %>% 
  arrange(-desc(rank)) %>% pull(ending_pair)

length(less_var_pos_f) # 25 endings with ONLY ONE POS combination

# pos pairs inside non-variative endings
fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  filter(ending_pair %in% less_var_pos_f) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(
                        unlist(
                          str_split(pos_pair, " -- ")))
                      ),
         pos_pair = paste0(
                      unique(unlist(str_split(pos_pair, " -- "))), collapse = ", ")) %>% 
  ungroup() %>% 
  arrange(-desc(pos_var)) 
```

#### kendall cor

Correlation between ending frequency and its POS variability (how many POS are found inside an ending)

```{r}
glimpse(m_ranked_pos)


rank_list <- m_ranked_pos %>% 
  ungroup() %>% 
  select(-pos_pair) %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(pos_var)) %>% 
  mutate(rank_variation = row_number()) 

head(rank_list)

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")


# fem
rank_list <- f_ranked_pos %>% 
  ungroup() %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(pos_var)) %>% 
  mutate(rank_variation = row_number()) 

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")
```

#### point plot

Curves: Correlation btw ending frequency & grammatical variation

```{r}

m_ranked_long <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(unlist(str_split(pos_pair, " -- "))))) %>% 
  ungroup() %>% 
  left_join(m_ranks, by = "ending_pair") #%>% 
  #filter(rank < 1001)

f_ranked_long <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         pos_pair = paste0(from_pos, " -- ", to_pos)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(pos_pair = paste0(pos_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(pos_var = length(
                      unique(unlist(str_split(pos_pair, " -- "))))) %>% 
  ungroup() %>% 
  left_join(f_ranks, by = "ending_pair") #%>% 
  #filter(rank < 1001)

glimpse(m_ranked_long)

#pos_plot <- 
m_ranked_long %>% 
  ungroup() %>% 
  select(rank, pos_var) %>% 
  mutate(group = "Мужские рифмы") %>% 
  rbind(f_ranked_long %>%
          ungroup() %>%
          select(rank, pos_var) %>%
          mutate(group = "Женские рифмы")
        ) %>%
  filter(rank < 1500) %>% 
  ggplot(aes(x = rank, y = pos_var, color = group)) + 
  geom_point(alpha = 0.5, size = 0.9, shape = 1) + 
  #geom_line(alpha = 0.6, linewidth = 0.5) + 
  geom_smooth(alpha = 0.7, lty = 5, linewidth = 0.7, 
              color = met.brewer("Veronese")[1]) + 
  facet_wrap(~group) + 
  scale_color_manual(values = c(met.brewer("Veronese")[3],
                                met.brewer("Veronese")[5])) + 
  labs(x = "Ранг",
       y = "Количество частей речи",
       title = "A",
       subtitle = "Части речи") + 
  theme(legend.position = "None",
        axis.title = element_text(size = 12), 
        strip.text = element_text(size = 12),
        plot.title = element_text(size = 18), 
        plot.subtitle = element_text(size = 14))

# pos_plot
```

### POS - rank kendall cor

Longer lists

```{r}
rank_list <- m_ranked_long %>% 
  ungroup() %>% 
  filter(rank < 1001) %>% 
  select(-pos_pair) %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(pos_var)) %>% 
  mutate(rank_variation = row_number()) 

head(rank_list)

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")


# fem
rank_list <- f_ranked_long %>% 
  ungroup() %>% 
  filter(rank < 1001) %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(pos_var)) %>% 
  mutate(rank_variation = row_number()) 

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")
```

### feats variability

```{r}
# count feats variants inside every ending
m_ranked_feats <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         feats_pair = paste0(from_feats, " -- ", to_feats)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(feats_pair = paste0(feats_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(feats_var = length(
                      unique(unlist(str_split(feats_pair, " -- "))))) %>% 
  ungroup() %>% 
  select(-feats_pair) %>% 
  left_join(m_ranks, by = "ending_pair") %>% 
  filter(rank < 1001)

f_ranked_feats <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         feats_pair = paste0(from_feats, " -- ", to_feats)) %>% 
  #filter(ending_pair %in% rankss$ending_pair) %>% 
  group_by(ending_pair) %>% 
  summarise(feats_pair = paste0(feats_pair, collapse = " -- ")) %>% 
  ungroup() %>% rowwise() %>% 
  mutate(feats_var = length(
                      unique(unlist(str_split(feats_pair, " -- "))))) %>% 
  ungroup() %>% 
  select(-feats_pair) %>% 
  left_join(f_ranks, by = "ending_pair") %>% 
  filter(rank < 1001)


feats_plot <- m_ranked_feats %>% 
  ungroup() %>% 
  select(rank, feats_var) %>% 
  mutate(group = "Мужские рифмы") %>% 
  rbind(f_ranked_feats %>%
          ungroup() %>%
          select(rank, feats_var) %>%
          mutate(group = "Женские рифмы")
        ) %>%
  filter(rank < 1001) %>% 
  ggplot(aes(x = rank, y = feats_var, color = group)) + 
  geom_point(alpha = 0.5, size = 0.9, shape = 1) + 
  #geom_line(alpha = 0.6, linewidth = 0.5) + 
  geom_smooth(alpha = 0.7, lty = 5, linewidth = 0.7, 
              color = met.brewer("Veronese")[1]) + 
  facet_wrap(~group) + 
  scale_color_manual(values = c(met.brewer("Veronese")[3],
                                met.brewer("Veronese")[5])) + 
  labs(x = "Ранг",
       y = "Количество гр. форм",
       title = "Б", 
       subtitle = "Грамматрические формы") + 
  theme(legend.position = "None",
        axis.title = element_text(size = 12), 
        strip.text = element_text(size = 12),
        plot.title = element_text(size = 18), 
        plot.subtitle = element_text(size = 14))

feats_plot
```

### fem / masc endings separately

Fem endings

```{r}
head(f_ranked_feats)

f <- f_ranked_feats %>% 
  mutate(group = "Грамматич. признаки") %>% 
  rename(n = feats_var)

head(f)

f_plot <- f_ranked_long %>% 
  select(-pos_pair) %>% 
  mutate(group = " Части речи") %>% 
  rename(n = pos_var) %>% 
  rbind(f) %>% 
  filter(rank < 1001) %>% 
  ggplot(aes(x = rank, y = n, color = group)) + 
  geom_point(alpha = 0.5, size = 0.9, shape = 1) + 
  #geom_line(alpha = 0.6, linewidth = 0.5) + 
  geom_smooth(alpha = 0.7, lty = 5, linewidth = 0.7, 
              color = met.brewer("Veronese")[1]) + 
  facet_wrap(~group, scales = "free") + 
  scale_color_manual(values = c(met.brewer("Veronese")[2],
                                met.brewer("Veronese")[3])) + 
  labs(x = "Ранг",
       y = "",
       title = "А", 
       subtitle = "Женские рифмы") + 
  theme(legend.position = "None",
        axis.title = element_text(size = 12), 
        strip.text = element_text(size = 12),
        plot.title = element_text(size = 18), 
        plot.subtitle = element_text(size = 14))

f_plot
```

```{r}
m <- m_ranked_feats %>% 
  mutate(group = "Грамматич. признаки") %>% 
  rename(n = feats_var)

m_plot <- m_ranked_long %>% 
  select(-pos_pair) %>% 
  mutate(group = " Части речи") %>% 
  rename(n = pos_var) %>% 
  rbind(m) %>% 
  filter(rank < 1001) %>% 
  ggplot(aes(x = rank, y = n, color = group)) + 
  geom_point(alpha = 0.5, size = 0.9, shape = 1) + 
  #geom_line(alpha = 0.6, linewidth = 0.5) + 
  geom_smooth(alpha = 0.7, lty = 5, linewidth = 0.7, 
              color = met.brewer("Veronese")[1]) + 
  facet_wrap(~group, scales = "free") + 
  scale_color_manual(values = c(met.brewer("Veronese")[5],
                                met.brewer("Veronese")[4])) + 
  labs(x = "Ранг",
       y = "",
       title = "Б", 
       subtitle = "Мужские рифмы") + 
  theme(legend.position = "None",
        axis.title = element_text(size = 12), 
        strip.text = element_text(size = 12),
        plot.title = element_text(size = 18), 
        plot.subtitle = element_text(size = 14))

m_plot
```

### fig. 5.2.2

```{r}
layout <- "
AAAAAA#CCCC
AAAAAA#CCCC
BBBBBB#DDDD
BBBBBB#DDDD
"

#pos_plot + feats_plot + p1_m + p1_f + plot_layout(design = layout)

f_plot + m_plot + p1_f + p1_m + plot_layout(design = layout)

ggsave(filename = "plots/fig_5-2-2.png", plot = last_plot(), dpi = 300,
       bg = "white", width = 12, height = 10)
```

#### feats - kendall cor

```{r}
# glimpse(m_ranked_feats)

rank_list <- m_ranked_feats %>% 
  ungroup() %>% 
  filter(rank < 1001) %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(feats_var)) %>% 
  mutate(rank_variation = row_number()) 

head(rank_list)

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")


# fem
rank_list <- f_ranked_feats %>% 
  ungroup() %>% 
  filter(rank < 1001) %>% 
  rename(rank_ending = rank) %>% 
  arrange(desc(feats_var)) %>% 
  mutate(rank_variation = row_number()) 

head(rank_list)

# masculine ranks lists correlation
cor.test(rank_list$rank_ending, rank_list$rank_variation, 
         method = "kendall")
```

Look into less variable endings

```{r}
m_ranked_feats %>% 
  filter(rank < 51) %>% 
  summary() # 8.25 1st Qu

less_var_feats <- m_ranked_feats %>% 
  filter(rank < 51 & feats_var < 8.25) %>% 
  pull(ending_pair)

length(less_var_feats)
```

Examples

```{r}
# ending intersecation between less variative in terms of POS combitaion & grammar
tibble(ending_pair = intersect(less_var_pos, less_var_feats)) %>% 
  left_join(m_ranks, by = "ending_pair")

masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending), 
         feats_pair = paste0(from_feats, " -- ", to_feats)) %>% 
  filter(ending_pair %in% intersect(less_var_pos, less_var_feats)) %>% 
  group_by(ending_pair, feats_pair) %>% 
  sample_n(1) %>% 
  select(ending_pair, rhyme_alph, from, to, from_pos, to_pos, feats_pair) %>% 
  ungroup() %>% 
  distinct(rhyme_alph, .keep_all = TRUE)
```

FEM rhymes feats analysis

```{r}
f_ranked_feats %>% 
  filter(rank < 51) %>% 
  summary() # 4.0 1st qu. (vs masc 8.25 1st Qu)

less_var_feats_f <- f_ranked_feats %>% 
  filter(rank < 51 & feats_var < 4.1) %>% 
  pull(ending_pair)

length(less_var_feats_f) # 13
```

## words inside endings

```{r}
glimpse(m_ranks)
# glimpse(masc_pairs)
```

```{r}
m_1 <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(from, from_ending, ending_pair) %>% 
  rename(word = from, 
         ending = from_ending)

m_2 <- masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(to, to_ending, ending_pair) %>% 
  rename(word = to, 
         ending = to_ending)

masc_words <- rbind(m_1, m_2)


f_1 <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(from, from_ending, ending_pair) %>% 
  rename(word = from, 
         ending = from_ending)

f_2 <- fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(to, to_ending, ending_pair) %>% 
  rename(word = to, 
         ending = to_ending)


fem_words <- rbind(f_1, f_2)

fem_words_p <- fem_words %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  ungroup() %>% 
  count(ending_pair, sort = T) %>% 
  left_join(f_ranks, by = "ending_pair") %>% 
  filter(rank < 1001) %>% 
  mutate(group = "fem")


# glimpse(masc_words)
# 
# masc_words %>% 
#   group_by(ending_pair) %>% 
#   count(word, sort = T) %>% 
#   ungroup() %>% 
#   count(ending_pair, sort = T) %>% 
#   left_join(m_ranks, by = "ending_pair") %>% 
#   filter(rank < 1001) %>% 
#   mutate(group = "masc") %>% 
#   rbind(fem_words_p) %>% 
#   
#   ggplot(aes( x = rank, y = n, color = group)) + 
#   geom_point(alpha = 0.5, size = 0.9) + 
#   geom_line(alpha = 0.6, linewidth = 0.5) + 
#  
#   facet_wrap(~group) +
#     geom_smooth(alpha = 0.7) +
#   scale_color_manual(values = c(met.brewer("Veronese")[3],
#                                 met.brewer("Veronese")[5]))
```

```{r}
masc_words %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  ungroup() %>% 
  count(ending_pair, sort = T) %>% 
  left_join(m_ranks, by = "ending_pair") %>% 
  filter(rank < 51) %>% 
  summary() # 1st qu.: 37.25

less_var_words <- masc_words %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  ungroup() %>% 
  count(ending_pair, sort = T) %>% 
  left_join(m_ranks, by = "ending_pair") %>% 
  filter(rank < 51 & n < 37.25) %>% 
  pull(ending_pair)

length(less_var_words)

intersect(less_var_pos, less_var_words)
length(intersect(less_var_pos, less_var_words))

intersect(less_var_feats, less_var_words)
length(intersect(less_var_feats, less_var_words))
```

Examples of unproductive endings & all less var endings

```{r}
masc_words %>% 
  filter(ending_pair %in% less_var_words) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Most monotonous POS-wise:

NB some "monotonous" endings are easily generating a lot of words (-ить)

```{r}
masc_words %>% 
  filter(ending_pair %in% less_var_pos) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var)) 

```

Most monotonous feats-wise

```{r}
masc_words %>% 
  filter(ending_pair %in% less_var_feats) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Intersections

```{r}
length(intersect(less_var_pos, less_var_feats))
length(intersect(less_var_pos, less_var_words))
length(intersect(less_var_feats, less_var_words))


length(intersect(intersect(less_var_pos, less_var_feats), less_var_words))

# the most monotonous masc rhyme endings
intersect(intersect(less_var_pos, less_var_feats), less_var_words)

masc_words %>% 
  filter(ending_pair %in% intersect(
    intersect(
      less_var_pos, less_var_feats), 
    less_var_words)
    ) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Fem words

```{r}
fem_words %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  ungroup() %>% 
  count(ending_pair, sort = T) %>% 
  left_join(f_ranks, by = "ending_pair") %>% 
  filter(rank < 51) %>% 
  summary() # 1st qu.: 44 (vs masc:  37.25)

less_var_words_f <- fem_words %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  ungroup() %>% 
  count(ending_pair, sort = T) %>% 
  left_join(f_ranks, by = "ending_pair") %>% 
  filter(rank < 51 & n < 44) %>% 
  pull(ending_pair)

length(less_var_words_f)

# intersect(less_var_pos_f, less_var_words_f)
# length(intersect(less_var_pos_f, less_var_words_f))
# 
# intersect(less_var_feats_f, less_var_words_f)
# length(intersect(less_var_feats_f, less_var_words_f))
```

Smallest n of words inside freq ending

```{r}
fem_words %>% 
  filter(ending_pair %in% less_var_words_f) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Smallest POS pair variation -- NB -енья / -енье гнезда (вдохновенье / вдохновенья...)

```{r}
fem_words %>% 
  filter(ending_pair %in% less_var_pos_f) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Less grammatical variation

```{r}
fem_words %>% 
  filter(ending_pair %in% less_var_feats_f) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

Intersections of all

```{r}
length(intersect(less_var_pos_f, less_var_feats_f))
length(intersect(less_var_pos_f, less_var_words_f))
length(intersect(less_var_feats_f, less_var_words_f))


length(intersect(intersect(less_var_pos_f, less_var_feats_f), less_var_words_f))

# the most monotonous masc rhyme endings
intersect(intersect(less_var_pos_f, less_var_feats_f), less_var_words_f)

fem_words %>% 
  filter(ending_pair %in% intersect(
    intersect(
      less_var_pos_f, less_var_feats_f), 
    less_var_words_f)
    ) %>% 
  group_by(ending_pair) %>% 
  count(word, sort = T) %>% 
  select(-n) %>% 
  summarise(n_var = n(),
            word_list = paste0(word, collapse = ", ")) %>% 
  arrange(-desc(n_var))
```

NB both for masc & fem rhymes it seems that THE most freq ending is also the most variative (-oi, -oju),

however, some of the endings have very low N of pos/feats combinations (-ить) but can generate very large number of words, these are mostly verbal endings =\> seeming refusal to use this kind of rhymes

the most redundant / monotonous are though NOUN endings and rhyme pairs, which are less plausible to include many words for non-freq endings (such as -ец / -ца) though they include a small number of very symbolic poetic words (венец, певец... любовь кровь... пир мир...)

## percentage of less variable rhyme endings

### masc rhymes

Count percentage by corpus

```{r}
m_ranked_pos %>% select(-pos_pair) %>% head

corpus_totals <- masc_pairs %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus) %>% 
  rename(total = n)

masc_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(text_id, ending_pair) %>% 
  left_join(m_ranked_pos %>% select(ending_pair, pos_var, group),
            by = "ending_pair") %>% 
  mutate(group = ifelse(is.na(group), "non-freq", group),
         corpus = str_extract(text_id, "^\\w")) %>% 
  group_by(corpus) %>% 
  count(group) %>% 
  ungroup() %>% 
  left_join(corpus_totals, by = "corpus") %>% 
  mutate(perc = round((n / total)*100, 1)) %>% 
  select(-n, -total) %>% 
  pivot_wider(names_from = group, values_from = perc)
  
```

Load metadata about authors

```{r}
meta <- read.csv("../../data/corpus1835/sql_db/texts_metadata.csv")
authors <- read.csv("../../data/corpus1835/sql_db/authors.csv")

meta <- meta %>% 
  select(text_id, A_ID) %>% 
  left_join(authors %>% select(A_ID, author_name), by = "A_ID")

masc_pairs_authors <- masc_pairs %>% 
  left_join(meta, by = "text_id")

masc_pairs_authors %>% 
  count(author_name, sort = T) %>% head()
```

Count perc of less / more variative rhymes by different authors

```{r}
# select authors
a <- c("Баратынский Е.А.", "Бенедиктов В.Г.", "Мейснер А.", "Тимофеев А.В.",
      "Шахова Е.Н.", "Некрасов Н.А.", "Суханов М.Д.", "Ростопчина Е.П.", 
      "Козлов И.И.")

a_totals <- masc_pairs_authors %>% 
  filter(author_name %in% a) %>% 
  count(author_name, sort = T) %>% 
  rename(total = n)

min(a_totals$total)
m_ranked_pos %>% 
  filter(group == "less variation") %>% 
  select(ending_pair) %>% 
  distinct() %>% pull()

samples <- NULL

for (i in 1:100) {
  x <- masc_pairs_authors %>% 
    filter(author_name %in% a) %>% 
    group_by(author_name) %>% 
    sample_n(100) %>% 
    mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
    select(text_id, author_name, ending_pair) %>% 
    left_join(m_ranked_pos %>% select(ending_pair, pos_var, group),
              by = "ending_pair") %>% 
    mutate(group = ifelse(is.na(group), "non-freq rhymes (not top-100)", group)) %>% 
    group_by(author_name) %>% 
    count(group) %>% 
    ungroup() %>% 
    #left_join(a_totals, by = "author_name") %>% 
    mutate(perc = round((n / 100)*100, 1)) %>% 
    select(-n#, -total
           ) #%>% 
    #pivot_wider(names_from = group, values_from = perc) %>% 
    #arrange(desc(`less variation`))

  samples <- rbind(samples, x)
}


samples %>% 
  ggplot(aes(x = author_name, y = perc, color = group)) + 
  geom_boxplot(width = 0.5)
```

### fem rhymes

```{r}
f_ranked_pos %>% head

f_ranked_pos %>% 
  filter(group == "less variation") %>% 
  select(ending_pair) %>% 
  distinct() %>% pull()

corpus_totals <- fem_pairs %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus) %>% 
  rename(total = n)

fem_pairs %>% 
  mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
  select(text_id, ending_pair) %>% 
  left_join(f_ranked_pos %>% select(ending_pair, pos_var, group),
            by = "ending_pair") %>% 
  mutate(group = ifelse(is.na(group), "non-freq", group),
         corpus = str_extract(text_id, "^\\w")) %>% 
  group_by(corpus) %>% 
  count(group) %>% 
  ungroup() %>% 
  left_join(corpus_totals, by = "corpus") %>% 
  mutate(perc = round((n / total)*100, 1)) %>% 
  select(-n, -total) %>% 
  pivot_wider(names_from = group, values_from = perc)
  
```

Authors

```{r}
fem_pairs_authors <- fem_pairs %>% 
  left_join(meta, by = "text_id")

fem_pairs_authors %>% 
  count(author_name, sort = T) %>% head()
```

```{r}
# select authors
a <- c("Баратынский Е.А.", "Бенедиктов В.Г.", "Мейснер А.", "Тимофеев А.В.",
      "Шахова Е.Н.", "Некрасов Н.А.", "Суханов М.Д.", "Ростопчина Е.П.", 
      "Козлов И.И.")

a_totals <- fem_pairs_authors %>% 
  filter(author_name %in% a) %>% 
  count(author_name, sort = T) %>% 
  rename(total = n)

min(a_totals$total)

samples <- NULL

for (i in 1:100) {
  x <- fem_pairs_authors %>% 
    filter(author_name %in% a) %>% 
    group_by(author_name) %>% 
    sample_n(100) %>% 
    mutate(ending_pair = paste0("-", from_ending, " -- -", to_ending)) %>% 
    select(text_id, author_name, ending_pair) %>% 
    left_join(f_ranked_pos %>% select(ending_pair, pos_var, group),
              by = "ending_pair") %>% 
    mutate(group = ifelse(is.na(group), "non-freq rhymes (not top-100)", group)) %>% 
    group_by(author_name) %>% 
    count(group) %>% 
    ungroup() %>% 
    #left_join(a_totals, by = "author_name") %>% 
    mutate(perc = round((n / 100)*100, 1)) %>% 
    select(-n#, -total
           ) #%>% 
    #pivot_wider(names_from = group, values_from = perc) %>% 
    #arrange(desc(`less variation`))

  samples <- rbind(samples, x)
}


samples %>% 
  filter(group != "non-freq rhymes (not top-100)") %>% 
  ggplot(aes(x = author_name, y = perc, color = group)) + 
  geom_boxplot(width = 0.5)
```
