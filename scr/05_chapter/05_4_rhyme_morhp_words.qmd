---
title: "05.2. Code - rhyme words POS"
format: md
editor: visual
---

## 5.2.1. POS in rhymes - word level

## load data & pckg

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(tidytext)

# library(kableExtra)
# library(umap)

library(MetBrewer)
library(patchwork)
theme_set(theme_minimal())
```

### meta

Import metadata

```{r}
meta <- read.csv("../../data/corpus1835/sql_db/texts_metadata.csv")
glimpse(meta)
```

Meter labels

```{r}
table(meta$meter)

meter_lables <- meta %>% 
  select(text_id, meter) %>% distinct()

head(meter_lables)
```

### rhyme pairs

Import data & merge words + grammatical features

```{r}
rhyme_pairs <- read.csv("../../data/corpus1835/sql_db/rhyme_pairs.csv") %>% 
  rename(text_id = poem_id) %>% 
  # remove Kulman texts
  filter(!str_detect(text_id, "C_264"))

glimpse(rhyme_pairs)
```

#### attach meter info

```{r}
nrow(rhyme_pairs)

rhyme_pairs <- rhyme_pairs %>% 
  left_join(meter_lables, by = "text_id") 

glimpse(rhyme_pairs)
```

### rhyme words

```{r}
rhyme_words <- read.csv("../../data/corpus1835/sql_db/rhyme_words_upd.csv", 
                        
                        # DON'T LET R EAT IAMBS AND DO INTEGER 01 => 1
                        colClasses = c("stress_pattern" = "character",
                                       "closure_pattern" = "character")) 

glimpse(rhyme_words)

# check if all words are unique
length(unique(rhyme_words$word))
nrow(rhyme_words)
```

#### rewrite POS tags

```{r}
pos_transl <- tibble(old_tag = c("S", "V", "APRO", "SPRO", 
                   "A", "ADV", "NUM", "ADVPRO",
                   "INTJ", "PART", "PR", "ANUM", "CONJ"),
       # pos = c("NOUN", "VERB", "aPRON", "nPRON", 
       #         "ADJ", "ADV", "NUM", "advPRON",
       #         "INTJ", "PART", "ADP", "adjNUM", "CONJ"),
       pos = c("NOUN", "VERB", "PRON", "PRON", 
               "ADJ", "ADV", "NUM", "PRON",
               "INTJ", "PART", "ADP", "NUM", "CONJ")) # upos

# attach to the table with all words
rhyme_words <- rhyme_words %>% 
  rename(old_tag = pos) %>% 
  left_join(pos_transl, by = "old_tag")
```

#### extract inf & other verb forms

Infinitives

```{r}
rhyme_words %>% 
  filter(pos == "VERB") %>% 
  select(feats) %>% 
  filter(str_detect(feats, "инф")) %>% count(feats, sort = T) %>% head()
```

Imperatives

```{r}
rhyme_words %>% 
  filter(pos == "VERB") %>% 
  select(feats) %>% 
  filter(str_detect(feats, "пов")) %>% 
  count(feats, sort = T) %>% head()


# VERB - пов
# VERB - деепр
# VERB - прич
```

```{r}
rhyme_words %>% 
  mutate(pos = ifelse(str_detect(feats, "инф"),
                      "VERB_inf",
                      pos),
         pos = ifelse(str_detect(feats, "пов"),
                      "VERB_imp",
                      pos),
         pos = ifelse(str_detect(feats, "деепр"),
                      "VERB_deeprich",
                      pos),
         pos = ifelse(str_detect(feats, "прич"),
                      "VERB_prich",
                      pos)
         ) %>% 
  count(pos, sort = T) # check if rewritten properly
```

Rewrite tags

```{r}
rhyme_words <- rhyme_words %>% 
  mutate(pos = ifelse(str_detect(feats, "инф"),
                      "VERB_inf",
                      pos),
         pos = ifelse(str_detect(feats, "пов"),
                      "VERB_imp",
                      pos),
         pos = ifelse(str_detect(feats, "деепр"),
                      "VERB_deeprich",
                      pos),
         pos = ifelse(str_detect(feats, "прич"),
                      "VERB_prich",
                      pos))
```

#### 

# words

### data preparation

Merge the rhyme pairs & words features

First word

```{r}
nrow(rhyme_pairs) # Number of actual pairs (should not be exceeded by either of words tables)

word_1 <- rhyme_pairs %>% 
  select(text_id, meter, rhyme_alph, from) %>% 
  rename(word = from) %>% 
  left_join(rhyme_words, by = "word") 

nrow(word_1)
head(word_1, 10)


# check errors
word_1 %>% 
  filter(is.na(word_acc)) %>% head()

word_1 %>% 
  filter(is.na(pos)) %>% head()

# remove errors
word_1 <- word_1 %>% 
  filter(!is.na(word_acc) & !is.na(pos))
```

Second word

```{r}
word_2 <- rhyme_pairs %>% 
  select(text_id, meter, rhyme_alph, to) %>% 
  rename(word = to) %>% 
  left_join(rhyme_words, by = "word")

nrow(word_2) == nrow(rhyme_pairs) # must be true
head(word_2, 10)


# check errors
word_2 %>% 
  filter(is.na(word_acc)) %>% head()

word_2 %>% 
  filter(is.na(pos)) %>% head()

# remove errors
word_2 <- word_2 %>% 
  filter(!is.na(word_acc) & !is.na(pos))

nrow(word_2)
```

Merge all from-to words in one table

```{r}
all_words <- rbind(word_1, word_2)
```

Remove obsolete data

```{r}
rm(meter_lables, rhyme_words, word_1, word_2)
```

### Basic stats

```{r}
table(all_words$meter)
```

#### MFW in rhymes

Errors: hyperdactyllic edings

```{r, eval=F}
all_words %>% 
  filter(closure == "other") %>% 
  select(word_acc, closure_pattern) %>% 
  #distinct() %>% 
  nrow()
# 148 words
# mostly wrongly annotated stresses (but very small number of words)
```

MFW iamb & trochee

```{r}
closures <- c("masc", "fem", "dactylic")

all_words %>% 
  filter(meter %in% c("Iamb", "Trochee") & closure %in% closures) %>% 
  group_by(meter, closure) %>% 
  count(word_acc, sort = T) %>% 
  slice_max(order_by = n, n = 5) %>% 
  filter(closure == "fem")

all_words %>% 
  filter(meter %in% c("Iamb", "Trochee") & closure %in% closures) %>% 
  group_by(meter, closure) %>% 
  count(word_acc, sort = T) %>% 
  slice_max(order_by = n, n = 5) %>% 
  filter(closure == "masc")

all_words %>% 
  filter(meter %in% c("Iamb", "Trochee") & closure %in% closures) %>% 
  group_by(meter, closure) %>% 
  count(word_acc, sort = T) %>% 
  slice_max(order_by = n, n = 5) %>% 
  filter(closure == "dactylic")
```

MFW 3-syll meters

```{r}
all_words %>% 
  filter(meter %in% c("Dactyl", "Amphibrach", "Anapest") & closure %in% closures) %>% 
  group_by(meter, closure) %>% 
  count(word_acc, sort = T) %>% 
  slice_max(order_by = n, n = 5)
```

#### total_meter

Total number of rhyme words in a meter

```{r}
total_meter <- all_words %>% 
  count(meter) %>% 
  rename(total = n)

total_meter
```

#### Number of masc / fem / dactyl endings

```{r}
all_words %>% 
  filter(closure != "other" & meter != "Other") %>% 
  group_by(meter) %>% 
  count(closure) %>% 
  left_join(total_meter, by = "meter") %>% 
  mutate(perc = round((n / total) * 100, 2 ))
```

```{r}
# all_words %>% 
#   filter(meter == "Dactyl" & closure == "masc") %>% 
#   select(text_id, word_acc, closure_pattern) %>% sample_n(10)

# meta %>% 
#   filter(text_id == "P_294")
```

### top endings in meters

#### iamb_closures

Number of words of a particular clausula type IN iambic texts

```{r}
iamb_closures <- all_words %>% 
  filter(meter == "Iamb") %>% 
  count(closure) %>% 
  rename(total_closure = n) 
```

```{r}

all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(ending_st) %>% 
  slice_max(order_by = n, n = 5) %>% 
  ungroup() %>% 
  left_join(total_meter, by = "meter") %>% 
  # percentage of all words in iamb
  mutate(perc_all_iambic = round((n / total) * 100, 2 )) %>% 
  left_join(iamb_closures, by = "closure") %>% 
  
  # percentage of word of particular clausula type
  mutate(perc_iamb_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total, -total_closure)
```

```{r, eval=FALSE}
all_words %>% 
  filter(closure == "dactylic") %>% count(word_acc, sort = T)
```

#### trochee_closures

Number of words of a particular clausula type IN trochaic texts

```{r}
trochee_closures <- all_words %>% 
  filter(meter == "Trochee") %>% 
  count(closure) %>% 
  rename(total_closure = n) 
```

```{r}
all_words %>% 
  filter(meter == "Trochee" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(ending_st) %>% 
  slice_max(order_by = n, n = 5) %>% 
  ungroup() %>% 
  left_join(total_meter, by = "meter") %>% 
  # percentage of all words in iamb
  mutate(perc_all_tr = round((n / total) * 100, 2 )) %>% 
  left_join(trochee_closures, by = "closure") %>% 
  
  # percentage of word of particular clausula type
  mutate(perc_tr_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total, -total_closure)
```

### POS distribution in meters / endings

#### tab. 5.2.1 - all meters & clausulas together

```{r}
all_words %>% 
  filter(closure != "other") %>% 
  count(pos) %>% 
  mutate(perc_total = round(
    n / nrow(all_words %>% filter(closure != "other")) * 100, 
    2))
```

Masc

```{r}
all_words %>% 
  filter(closure == "masc") %>% 
  count(pos) %>% 
  mutate(perc_total = round(
    n / nrow(all_words %>% filter(closure == "masc")) * 100, 
    2))
```

Fem

```{r}
all_words %>% 
  filter(closure == "fem") %>% 
  count(pos) %>% 
  mutate(perc_total = round(
    n / nrow(all_words %>% filter(closure == "fem")) * 100, 
    2))
```

#### iamb

Total distribution of POS (all words)

```{r}
all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  count(meter, pos) %>% 
  left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  mutate(perc_all_iambic = round((n / total) * 100, 2 )) %>% 
  select(-meter, -total) %>% 
  arrange(-desc(pos))
```

By clausula

```{r}
all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(iamb_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_iamb_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter) %>% 
  filter(closure == "masc")

all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(iamb_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_iamb_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter) %>% 
  filter(closure == "fem")

all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(iamb_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_iamb_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter) %>% 
  filter(closure == "dactylic")
```

#### trochee

Total POS

```{r}
all_words %>% 
  filter(meter == "Trochee" & closure != "other") %>% 
  count(meter, pos) %>% 
  left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  mutate(perc_all_iambic = round((n / total) * 100, 2 )) %>% 
  select(-meter, -total) %>% 
  arrange(-desc(pos))
```

By clausula

```{r}
all_words %>% 
  filter(meter == "Trochee" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(trochee_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_tr_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter, -n) %>% 
  arrange(desc(perc_tr_clos)) %>% 
  pivot_wider(names_from = closure, values_from = perc_tr_clos)
```

### POS length (in syl)

How it works:

```{r}
#glimpse(all_words)

all_words$stress_pattern[3]

unlist(gregexpr(pattern = "1", "0100")) # stress position
nchar("0100") # length of the word


all_words %>% 
  sample_n(10) %>% 
  select(word, pos, stress_pattern) %>% 
  mutate(stress_position = unlist(gregexpr(pattern = "1", stress_pattern)),
         syl_len = nchar(stress_pattern)
         )
```

Altogether

```{r}
all_words %>% 
  select(pos, stress_pattern) %>% 
  mutate(stress_position = unlist(gregexpr(pattern = "1", stress_pattern)),
         syl_len = nchar(stress_pattern)
         ) %>% 
  group_by(pos) %>% 
  summarise(
            mean_stress_pos = round(mean(stress_position), 1),
            mean_syl_lenght = round(mean(syl_len), 1),
            
            med_stress_pos = median(stress_position),
            med_syl_length = median(syl_len)
            )
```

Masc rhymes

```{r}
m <- all_words %>% 
  filter(closure == "masc" & meter != "Other" & 
           pos %in% c("NOUN", "VERB", "ADJ", "PRON")) %>% 
  select(meter, pos, stress_pattern) %>% 
  mutate(stress_position = unlist(gregexpr(pattern = "1", stress_pattern)),
         syl_len = nchar(stress_pattern)
         ) %>% 
  group_by(meter, pos) %>% 
  summarise(
            mean_stress_pos = round(mean(stress_position), 1),
            mean_syl_lenght = round(mean(syl_len), 1),
            
            med_stress_pos = median(stress_position),
            med_syl_length = median(syl_len)
            ) %>% ungroup()

m
```

Fem rhymes

```{r}
f <- all_words %>% 
  filter(closure == "fem" & meter != "Other" & 
           pos %in% c("NOUN", "VERB", "ADJ", "PRON")) %>% 
  select(meter, pos, stress_pattern) %>% 
  mutate(stress_position = unlist(gregexpr(pattern = "1", stress_pattern)),
         syl_len = nchar(stress_pattern)
         ) %>% 
  group_by(meter, pos) %>% 
  summarise(
            fem_mean_stress_pos = round(mean(stress_position), 1),
            fem_mean_syl_lenght = round(mean(syl_len), 1),
            
            med_stress_pos = median(stress_position),
            med_syl_length = median(syl_len)
            ) %>% ungroup()

f
```

dactylic

```{r}
d <- all_words %>% 
  filter(pos %in% c("NOUN", "VERB", "ADJ", "PRON") & closure == "dactylic" & 
           meter != "Other") %>% 
  select(meter, pos, stress_pattern) %>% 
  mutate(stress_position = unlist(gregexpr(pattern = "1", stress_pattern)),
         syl_len = nchar(stress_pattern)
         ) %>% 
  group_by(meter, pos) %>% 
  summarise(
            d_mean_stress_pos = round(mean(stress_position), 1),
            d_mean_syl_lenght = round(mean(syl_len), 1),
            
            med_stress_pos = median(stress_position),
            med_syl_length = median(syl_len)
            ) %>% ungroup

d
```

```{r}
glimpse(m)

cbind(m %>% select(-med_stress_pos, -med_syl_length), 
      f$fem_mean_stress_pos, f$fem_mean_syl_lenght #,
      #d$d_mean_stress_pos, d$d_mean_syl_lenght
      ) %>% 
  select(meter, pos, 
         mean_syl_lenght, `f$fem_mean_syl_lenght`,
         mean_stress_pos, `f$fem_mean_stress_pos`)
```

### POS groups

Grouping according to Shaw 2004 (p. 347)

```{r}
unique(all_words$pos)

x <- tibble(pos = c("NOUN", "ADJ", "PRON", "VERB_prich", 
               
               "VERB", "VERB_inf", "VERB_imp",
               
               "ADV", "NUM", "INTJ", "ADP", "CONJ", "VERB_deeprich", "PART"
               ),
       pos_group = c("declined", "declined", "declined", "declined",
                     
                     "verbs", "verbs", "verbs", 
                     
                     "other", "other", "other", "other", "other", "other", "other"     
                     ))

nrow(x) == length(unique(all_words$pos))
x
```

```{r}
all_words <- all_words %>% 
  left_join(x, by = "pos")
```

#### iamb

total POS

```{r}
all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  count(meter, pos_group) %>% 
  left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  mutate(perc_all_iambic = round((n / total) * 100, 2 )) %>% 
  select(-meter, -total) %>% 
  arrange(desc(n))
```

By clausula

```{r}
all_words %>% 
  filter(meter == "Iamb" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos_group) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(iamb_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_iamb_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter)
```

#### trochee

Total POS

```{r}
all_words %>% 
  filter(meter == "Trochee" & closure != "other") %>% 
  count(meter, pos_group) %>% 
  left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  mutate(perc_all_iambic = round((n / total) * 100, 2 )) %>% 
  select(-meter, -total) %>% 
  arrange(desc(n))
```

By clausula

```{r}
all_words %>% 
  filter(meter == "Trochee" & closure != "other") %>% 
  group_by(meter, closure) %>% 
  count(meter, pos_group) %>% 
  ungroup() %>% 
  #left_join(total_meter, by = "meter") %>% 
  
  # percentage of all words in iamb
  #mutate(perc_all_iambic = round((n / total) * 100, 2 )) # %>% 
  left_join(trochee_closures, by = "closure") %>% 
  # 
  # # percentage of word of particular clausula type
  mutate(perc_tr_clos = round((n / total_closure) * 100, 2 )) %>% 
  select(-total_closure, -meter)
```

```{r}
rm(x, iamb_closures, trochee_closures)
```

## periodicals / books

Separate periodicals & books sources of texts

```{r}
#glimpse(all_words)
# quick check
all_words %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% count(corpus)

```

Store totals & filter only iambs for Table 5.2.2

```{r}
cp_total <- all_words %>% 
  filter(meter == "Iamb") %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus) %>% 
  rename(total = n)

cp_clausulas <- all_words %>% 
  filter(meter == "Iamb") %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus, closure) %>% 
  mutate(corpus_closure = paste0(corpus, "__", closure)) %>% 
  rename(total_closure = n) %>% 
  select(-corpus, -closure)
```

All POS

```{r}
all_words %>% 
  filter(meter == "Iamb") %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus, pos) %>% 
  left_join(cp_total, by = "corpus") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = corpus, values_from = perc)
```

By clausula

```{r}
all_words %>% 
  filter(meter == "Iamb") %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus, pos, closure) %>% 
  mutate(corpus_closure = paste0(corpus, "__", closure)) %>% 
  left_join(cp_clausulas, by = "corpus_closure") %>% 
  #select(-corpus_closure) %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 2 )) %>% 
  filter(closure %in% c("masc", "fem")) %>% 
  select(-corpus, -closure, -total_closure, -n) %>% 
  arrange(desc(perc_closure)) %>% 
  pivot_wider(names_from = corpus_closure, values_from = perc_closure) %>% 
  select(pos, P__fem, C__fem, P__masc, C__masc)
```

POS groups

```{r}
all_words %>% 
  filter(meter == "Iamb") %>% 
  mutate(corpus = str_extract(text_id, "^\\w")) %>% 
  count(corpus, pos_group, closure) %>% 
  mutate(corpus_closure = paste0(corpus, "__", closure)) %>% 
  left_join(cp_clausulas, by = "corpus_closure") %>% 
  #select(-corpus_closure) %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 2 )) %>% 
  filter(closure %in% c("masc", "fem")) %>% 
  select(-corpus, -closure, -total_closure, -n) %>% 
  arrange(desc(perc_closure)) %>% 
  pivot_wider(names_from = corpus_closure, values_from = perc_closure) %>% 
  select(pos_group, P__fem, C__fem, P__masc, C__masc)
```

```{r}
rm(cp_clausulas, cp_total)
```

## authors

### load data

NB the data includes MUCH smaller samples for each author than in Shaw's analysis (but still more than 1k rhyme words for each author)

```{r}
# load data about authors
authors_meta <- read_csv("../../data/corpus1835/sql_db/authors.csv") %>% 
  select(A_ID, author_name)

# glimpse(authors_meta)

# attach authors to texts
authors <- meta %>% 
  select(text_id, A_ID) %>% 
  left_join(authors_meta, by = "A_ID") 

# attach authors to rhyme words
glimpse(all_words)
all_words %>% 
  filter(meter == "Iamb") %>% 
  left_join(authors, by = "text_id") %>% 
  filter(!is.na(author_name)) %>% 
  count(author_name, sort = T) %>% head(40) # quick view

# attachment & removal of NA
words_authors <- all_words %>% 
  # leave only iambic endings 
  filter(meter == "Iamb") %>% 
  left_join(authors %>% select(-A_ID), by = "text_id") %>% 
  filter(!is.na(author_name))

# words_authors %>% 
#   filter(author_name == "Кульман Е.Б.")
```

### selection

#### pushkin-like verse

```{r}
author_v <- c("Баратынский Е.А.", "Козлов И.И.", "Ростопчина Е.П.")
```

```{r}
authors_total <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name) %>% 
  rename(total = n)

authors_total
```

Total POS (without masc/fem devision

```{r, eval=FALSE}
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc)
```

```{r}
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos_group) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc)
```

Clausulas

```{r}
authors_closures <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name, closure) %>% 
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  select(-author_name, -closure) %>% 
  rename(total_closure = n)
```

```{r}
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  filter(pos %in% c("NOUN", "VERB", "ADJ", "PRON", "ADV")) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure)
```

```{r}
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos_group, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure)
```

```{r}
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  filter(author_name == "Ростопчина Е.П.") %>% 
  filter(pos == "VERB") %>% sample_n(10)
```

#### benediktov & co

```{r}
author_v <- c("Бенедиктов В.Г.", "Бернет Е.", "Шахова Е.Н." )

authors_total <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name) %>% 
  rename(total = n)

authors_total
```

All POS

```{r, eval=FALSE}
# pos separately
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc)

# pos groups
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos_group) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc)
```

Clausulas

```{r}
# total clausulas
authors_closures <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name, closure) %>% 
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  select(-author_name, -closure) %>% 
  rename(total_closure = n)

# pos separately
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  filter(pos %in% c("NOUN", "VERB", "ADJ", "PRON", "ADV")) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure) 

# pos groups
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos_group, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure) %>% head(25)
```

#### other authors

```{r}
author_v <- c("Слепушкин Ф.Н.",  "Мейснер А.", "Некрасов Н.А.")
```

All POS

```{r}
authors_total <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name) %>% 
  rename(total = n)

authors_total
```

```{r, eval=FALSE}
# pos separately
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc) 

# pos groups
words_authors %>% 
  filter(author_name %in% author_v) %>% 
  group_by(author_name) %>% 
  count(pos_group) %>% 
  left_join(authors_total, by = "author_name") %>% 
  mutate(perc = round( (n/total)*100, 2 )) %>% 
  select(-n, -total) %>% 
  arrange(desc(perc)) %>% 
  pivot_wider(names_from = author_name, values_from = perc) 
```

Clausulas

```{r}
# total clausulas
authors_closures <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name, closure) %>% 
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  select(-author_name, -closure) %>% 
  rename(total_closure = n)

# pos separately
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  filter(pos %in% c("NOUN", "VERB", "ADJ", "PRON", "ADV")) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure) %>% 
  filter(closure == "fem")

# pos groups
words_authors %>% 
  filter(author_name %in% author_v & closure %in% c("masc", "fem")) %>% 
  group_by(author_name) %>% 
  count(pos_group, closure) %>% 
  ungroup() %>% 
  # left_join(authors_total, by = "author_name") %>% 
  # mutate(perc_total = round( (n/total)*100, 2 )) %>% 
  
  mutate(author_closure = paste0(author_name, "__", closure)) %>% 
  left_join(authors_closures, by = "author_closure") %>% 
  mutate(perc_closure = round( (n/total_closure)*100, 1 )) %>% 
  
  select(-n, -total_closure, -author_closure) %>% 
  arrange(desc(perc_closure)) %>% 
  pivot_wider(names_from = author_name, values_from = perc_closure) 
```

```{r}
rm(authors_closures, authors_total, authors)
```

### all authors scaled

```{r}
author_v <- c("Баратынский Е.А.", "Козлов И.И.", "Ростопчина Е.П.",
              "Бенедиктов В.Г.", "Бернет Е.", "Шахова Е.Н.",
              "Слепушкин Ф.Н.",  "Мейснер А.", "Некрасов Н.А."
             )

authors_total <- words_authors %>% 
  filter(author_name %in% author_v) %>% 
  count(author_name) %>% 
  rename(total = n)

authors_total

top_authors <- words_authors %>% count(author_name, sort = T) %>% filter(n > 1000) %>% pull(author_name)
```

All POS

```{r}
v <- words_authors %>% 
  filter(author_name %in% top_authors) %>% 
  group_by(author_name) %>% 
  sample_n(1000) %>% 
  count(pos) %>% 
  ungroup() %>% 
  pivot_wider(names_from = pos, values_from = n) %>% 
  select(ADJ, ADV, NOUN, PRON, VERB, VERB_inf, VERB_imp, VERB_prich, VERB_deeprich)

a <- words_authors %>% 
  filter(author_name %in% top_authors) %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  pivot_wider(names_from = pos, values_from = n) %>% select(author_name)

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) 

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) %>% 
  pivot_longer(!author_name, names_to = "pos", values_to = "z_score") %>% 
  ggplot(aes(x = author_name, y = z_score, fill = pos)) + 
  geom_col(position = "dodge", width = 0.5) + 
  theme(axis.text.x = element_text(angle = 90))
```

Masc clausula

```{r}
# select authors with more than 500 masc words (45)
top_authors <- words_authors %>% 
  filter(closure == "masc") %>% 
  count(author_name, sort = T) %>% 
  filter(n > 300) %>% 
  pull(author_name)

v <- words_authors %>% 
  filter(author_name %in% top_authors & closure == "masc") %>% 
  group_by(author_name) %>% 
  sample_n(300) %>% 
  count(pos) %>% 
  ungroup() %>% 
  pivot_wider(names_from = pos, values_from = n) %>% 
  select(ADJ, ADV, NOUN, PRON, VERB, VERB_inf, VERB_imp, VERB_prich, VERB_deeprich)

a <- words_authors %>% 
  filter(author_name %in% top_authors & closure == "masc") %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  pivot_wider(names_from = pos, values_from = n) %>% select(author_name)

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) 

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) %>% 
  pivot_longer(!author_name, names_to = "pos", values_to = "z_score") %>% 
  ggplot(aes(x = author_name, y = z_score, fill = pos)) + 
  geom_col(position = "dodge", width = 0.5) + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(title = "Masculine rhymes")
```

```{r}
words_authors %>% 
  filter(closure == "masc" & pos == "ADJ") %>% sample_n(10)
```

Feminine rhymes

```{r}
# select authors with more than 500 fem rhymes (40)
top_authors <- words_authors %>% 
  filter(closure == "fem") %>% 
  count(author_name, sort = T) %>% 
  filter(n > 500) %>% 
  pull(author_name)

v <- words_authors %>% 
  filter(author_name %in% top_authors & closure == "fem") %>% 
  group_by(author_name) %>% 
  sample_n(500) %>% 
  count(pos) %>% 
  ungroup() %>% 
  pivot_wider(names_from = pos, values_from = n) %>% 
  select(ADJ, ADV, NOUN, PRON, VERB, VERB_inf, VERB_imp, VERB_prich, VERB_deeprich)

a <- words_authors %>% 
  filter(author_name %in% top_authors & closure == "fem") %>% 
  group_by(author_name) %>% 
  count(pos) %>% 
  pivot_wider(names_from = pos, values_from = n) %>% select(author_name)

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) 

cbind(a, as.tibble(scale(v))) %>% filter(author_name %in% author_v) %>% 
  pivot_longer(!author_name, names_to = "pos", values_to = "z_score") %>% 
  ggplot(aes(x = author_name, y = z_score, fill = pos)) + 
  geom_col(position = "dodge", width = 0.5) + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(title = "Feminine rhymes")
```

```{r, eval=FALSE}
glimpse(v)
glimpse(a)

d <- cbind(a, v) %>% 
  ungroup() %>% 
  filter(author_name %in% authors[1:3]) %>% 
  select(-author_name)

d[,1:5]

proj <- umap(d[1:5], data = "dist")

```

```{r}
rm(a, authors_closures, authors_total,words_authors, authors, author_v, closures, top_authors, total_meter)
```

## blanc verse

### prep Kulmann data

-   extract Kulmann's endwords from texts

Load full texts

```{r}
authors_meta %>% filter(str_detect(author_name, "Кульман"))

kulmann_texts <- meta %>% 
  filter(A_ID == "A_96")

texts <- read_csv("../../data/corpus1835/corpus1835_texts_lemm_acc.csv")

kulmann_texts <- kulmann_texts %>% 
  left_join(texts %>% select(text_id, text_cln), by = "text_id")
```

```{r}
# number of texts
nrow(kulmann_texts)

# total number of lines
kulmann_texts %>% 
  summarise(total_lines_kulmann = sum(n_lines))
```

Extract endwords

```{r}
k_endwords <- kulmann_texts %>% 
  
  select(text_id, text_cln) %>% 
  # some text cleaning
  mutate(text_cln = str_replace_all(text_cln, "\n", " ------ "),
         text_cln = str_remove(text_cln, "<.*?>"),
         text_cln = str_replace_all(text_cln, " ------ ", "\n")) %>% 
  
  # extract endword
  
  separate_rows(text_cln, sep = "\n") %>% 
  # remove lines with no words
  filter(text_cln != "" & !str_detect(text_cln, "^[[:punct:]]+$|^[[:space:]]+$")) %>% 
  # remove punct in the end of the line
  mutate(text_cln = str_remove_all(text_cln, "\\W+$|\\s+$"),
         # extract endword
         endword = str_extract(text_cln, "\\w+$")) 

head(k_endwords)

# writeLines(k_endwords %>% pull(endword), 
#           "k_endwords.txt")
```

-   get POS tags

```{r}
endw_pos <- read_csv("k_endwords.csv") %>% select(-`...1`)
nrow(k_endwords) == nrow(endw_pos)

k_ew_pos <- cbind(k_endwords, endw_pos)

glimpse(k_ew_pos)
```

Extract & rewrite POS tags

```{r}
k_ew_pos <- k_ew_pos %>% 
  select(-text_cln, -lemma) %>% 
  
  # extract pos
  mutate(feats = pos,
         pos = str_extract(feats, "^\\w+(,|=)"),
         pos = str_remove(pos, ',|='),
         rhyme_words = tolower(endword)
         ) %>% 
  
  # rewrite pos with UPOS tags
  rename(old_tag = pos) %>% 
  left_join(pos_transl, by = "old_tag") %>% 
  
  # separate verb forms
  mutate(pos = ifelse(str_detect(feats, "инф"),
                      "VERB_inf",
                      pos),
         pos = ifelse(str_detect(feats, "пов"),
                      "VERB_imp",
                      pos),
         pos = ifelse(str_detect(feats, "деепр"),
                      "VERB_deeprich",
                      pos),
         pos = ifelse(str_detect(feats, "прич"),
                      "VERB_prich",
                      pos)
         )
```

```{r}
head(k_ew_pos)
```

### count i3 pos

Attach meters & count other poems in Iamb / Iamb-3

```{r}
# glimpse(meta)
# glimpse(all_words)

# all 32 Kulmann's texts are Iamb_3
meta %>% 
  filter(A_ID == "A_96") %>% 
  mutate(formula = paste0(meter, "_", feet)) %>% 
  count(formula)

# select other Iamb-3 texts
iamb3_texts <- meta %>% 
  filter(A_ID != "A_96") %>% 
  mutate(formula = paste0(meter, "_", feet)) %>% 
  filter(formula == "Iamb_3") %>% 
  pull(text_id)

length(iamb3_texts) # 53 other Iamb_3 poems

iamb_texts <- meta %>% 
  filter(A_ID != "A_96" & meter == "Iamb") %>% 
  pull(text_id)

length(iamb_texts) # 3023 iamb texts
```

```{r}
total <- all_words %>% 
  filter(text_id %in% iamb3_texts) %>% 
  #filter only fem clausula
  filter(closure == "fem") %>% 
  nrow()

total # 1098 rhyme words in iamb-3

i3_rhymed <- all_words %>% 
  filter(text_id %in% iamb3_texts & closure == "fem") %>% 
  count(pos) %>% 
  rename(n_rhyme_i3 = n) %>% 
  mutate(perc_rhyme_i3 = round( (n_rhyme_i3/total)*100, 2 ))

i3_rhymed
```

all Iambs

```{r}
total_iambs <- all_words %>% 
  filter(text_id %in% iamb_texts & closure == "fem") %>% 
  nrow()

total_iambs # 53 075 words in all iambs

iambs_rhymed <- all_words %>% 
  filter(text_id %in% iamb_texts & closure == "fem") %>% 
  count(pos) %>% 
  rename(n_rhyme_iambs = n) %>% 
  mutate(perc_rhyme_iambs = round( (n_rhyme_iambs/total_iambs)*100, 2 ))

iambs_rhymed
```

rnc i3 data load

```{r, eval=FALSE}
rnc_rhymes <- read_csv("../../data/ch5/rnc_rhymes.csv")

rnc1 <- rnc_rhymes %>% select(poem_id, from, from_upos, from_feats) %>% 
  rename(text_id = poem_id,
         word = from,
         pos = from_upos,
         feats = from_feats)

rnc2 <- rnc_rhymes %>% select(poem_id, to, to_upos, to_feats) %>% 
  rename(text_id = poem_id, 
         word = to,
         pos = to_upos,
         feats = to_feats)

all_rnc <- rbind(rnc1, rnc2) 

all_rnc <- all_rnc %>% 
  mutate(pos = ifelse(str_detect(feats, "VerbForm=Inf"), 
                      "VERB_inf", pos),
         pos = ifelse(str_detect(feats, "Mood=Imp"), 
                      "VERB_imp", pos))

# load meters
load("../../data/nkrja_19th_lem.Rda")
glimpse(c19)
glimpse(rnc_rhymes)

rnc_i3_ids <- c19 %>% 
  mutate(text_id = paste0("RNC_", Unnamed..0, "_", year)) %>% 
  filter(meter == "Я" & feet == "3") %>% 
  pull(text_id) 

rm(c19)

head(rnc_i3_ids)

rnc_i3 <- all_rnc %>% filter(text_id %in% rnc_i3_ids) 

head(rnc_i3)
length(unique(rnc_i3$text_id)) # number of Iamb-3 texts with rhymes detected in rnc
```

Cound POS in rnc i3 -- NB these are not only fem endings

```{r, eval=FALSE}
rnc_i3_total <- nrow(rnc_i3)

rnc_i3_pos <- rnc_i3 %>% 
  count(pos) %>% 
  rename(rnc_i3 = n) %>% 
  mutate(perc_rnc_i3 = round( (rnc_i3/rnc_i3_total)*100, 2 ))

rnc_i3_pos
```

i3 kulmann POS

```{r}
total_k <- nrow(k_ew_pos)

k_ew_pos %>% 
  count(pos) %>% 
  rename(n_kulmann = n) %>% 
  mutate(perc_kulmann = round( (n_kulmann/total_k)*100 , 1)) %>% 
  left_join(i3_rhymed, by = "pos") %>% 
  left_join(iambs_rhymed, by = "pos") %>% 
  #left_join(rnc_i3_pos, by = "pos") %>% 
  select(pos, perc_kulmann, perc_rhyme_i3, perc_rhyme_iambs
         #, perc_rnc_i3
         ) %>% 
  arrange(desc(perc_rhyme_i3))
```
